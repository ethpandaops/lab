// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: vendor/xatu-cbt/clickhouse/int_attestation_first_seen.proto

package clickhouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	IntAttestationFirstSeenService_List_FullMethodName = "/cbt.IntAttestationFirstSeenService/List"
	IntAttestationFirstSeenService_Get_FullMethodName  = "/cbt.IntAttestationFirstSeenService/Get"
)

// IntAttestationFirstSeenServiceClient is the client API for IntAttestationFirstSeenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IntAttestationFirstSeenService provides RPC methods for querying int_attestation_first_seen data
type IntAttestationFirstSeenServiceClient interface {
	// List returns paginated int_attestation_first_seen records
	List(ctx context.Context, in *ListIntAttestationFirstSeenRequest, opts ...grpc.CallOption) (*ListIntAttestationFirstSeenResponse, error)
	// Get returns a single int_attestation_first_seen record by primary key
	Get(ctx context.Context, in *GetIntAttestationFirstSeenRequest, opts ...grpc.CallOption) (*GetIntAttestationFirstSeenResponse, error)
}

type intAttestationFirstSeenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntAttestationFirstSeenServiceClient(cc grpc.ClientConnInterface) IntAttestationFirstSeenServiceClient {
	return &intAttestationFirstSeenServiceClient{cc}
}

func (c *intAttestationFirstSeenServiceClient) List(ctx context.Context, in *ListIntAttestationFirstSeenRequest, opts ...grpc.CallOption) (*ListIntAttestationFirstSeenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntAttestationFirstSeenResponse)
	err := c.cc.Invoke(ctx, IntAttestationFirstSeenService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intAttestationFirstSeenServiceClient) Get(ctx context.Context, in *GetIntAttestationFirstSeenRequest, opts ...grpc.CallOption) (*GetIntAttestationFirstSeenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntAttestationFirstSeenResponse)
	err := c.cc.Invoke(ctx, IntAttestationFirstSeenService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntAttestationFirstSeenServiceServer is the server API for IntAttestationFirstSeenService service.
// All implementations must embed UnimplementedIntAttestationFirstSeenServiceServer
// for forward compatibility
//
// IntAttestationFirstSeenService provides RPC methods for querying int_attestation_first_seen data
type IntAttestationFirstSeenServiceServer interface {
	// List returns paginated int_attestation_first_seen records
	List(context.Context, *ListIntAttestationFirstSeenRequest) (*ListIntAttestationFirstSeenResponse, error)
	// Get returns a single int_attestation_first_seen record by primary key
	Get(context.Context, *GetIntAttestationFirstSeenRequest) (*GetIntAttestationFirstSeenResponse, error)
	mustEmbedUnimplementedIntAttestationFirstSeenServiceServer()
}

// UnimplementedIntAttestationFirstSeenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntAttestationFirstSeenServiceServer struct {
}

func (UnimplementedIntAttestationFirstSeenServiceServer) List(context.Context, *ListIntAttestationFirstSeenRequest) (*ListIntAttestationFirstSeenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIntAttestationFirstSeenServiceServer) Get(context.Context, *GetIntAttestationFirstSeenRequest) (*GetIntAttestationFirstSeenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIntAttestationFirstSeenServiceServer) mustEmbedUnimplementedIntAttestationFirstSeenServiceServer() {
}

// UnsafeIntAttestationFirstSeenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntAttestationFirstSeenServiceServer will
// result in compilation errors.
type UnsafeIntAttestationFirstSeenServiceServer interface {
	mustEmbedUnimplementedIntAttestationFirstSeenServiceServer()
}

func RegisterIntAttestationFirstSeenServiceServer(s grpc.ServiceRegistrar, srv IntAttestationFirstSeenServiceServer) {
	s.RegisterService(&IntAttestationFirstSeenService_ServiceDesc, srv)
}

func _IntAttestationFirstSeenService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntAttestationFirstSeenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntAttestationFirstSeenServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntAttestationFirstSeenService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntAttestationFirstSeenServiceServer).List(ctx, req.(*ListIntAttestationFirstSeenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntAttestationFirstSeenService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntAttestationFirstSeenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntAttestationFirstSeenServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntAttestationFirstSeenService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntAttestationFirstSeenServiceServer).Get(ctx, req.(*GetIntAttestationFirstSeenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntAttestationFirstSeenService_ServiceDesc is the grpc.ServiceDesc for IntAttestationFirstSeenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntAttestationFirstSeenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cbt.IntAttestationFirstSeenService",
	HandlerType: (*IntAttestationFirstSeenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _IntAttestationFirstSeenService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IntAttestationFirstSeenService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vendor/xatu-cbt/clickhouse/int_attestation_first_seen.proto",
}
