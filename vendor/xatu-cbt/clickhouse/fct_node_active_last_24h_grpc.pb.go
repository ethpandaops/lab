// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: vendor/xatu-cbt/clickhouse/fct_node_active_last_24h.proto

package clickhouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FctNodeActiveLast24HService_List_FullMethodName = "/cbt.FctNodeActiveLast24hService/List"
	FctNodeActiveLast24HService_Get_FullMethodName  = "/cbt.FctNodeActiveLast24hService/Get"
)

// FctNodeActiveLast24HServiceClient is the client API for FctNodeActiveLast24HService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FctNodeActiveLast24hService provides RPC methods for querying fct_node_active_last_24h data
type FctNodeActiveLast24HServiceClient interface {
	// List returns paginated fct_node_active_last_24h records
	List(ctx context.Context, in *ListFctNodeActiveLast24HRequest, opts ...grpc.CallOption) (*ListFctNodeActiveLast24HResponse, error)
	// Get returns a single fct_node_active_last_24h record by primary key
	Get(ctx context.Context, in *GetFctNodeActiveLast24HRequest, opts ...grpc.CallOption) (*GetFctNodeActiveLast24HResponse, error)
}

type fctNodeActiveLast24HServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFctNodeActiveLast24HServiceClient(cc grpc.ClientConnInterface) FctNodeActiveLast24HServiceClient {
	return &fctNodeActiveLast24HServiceClient{cc}
}

func (c *fctNodeActiveLast24HServiceClient) List(ctx context.Context, in *ListFctNodeActiveLast24HRequest, opts ...grpc.CallOption) (*ListFctNodeActiveLast24HResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFctNodeActiveLast24HResponse)
	err := c.cc.Invoke(ctx, FctNodeActiveLast24HService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fctNodeActiveLast24HServiceClient) Get(ctx context.Context, in *GetFctNodeActiveLast24HRequest, opts ...grpc.CallOption) (*GetFctNodeActiveLast24HResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFctNodeActiveLast24HResponse)
	err := c.cc.Invoke(ctx, FctNodeActiveLast24HService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FctNodeActiveLast24HServiceServer is the server API for FctNodeActiveLast24HService service.
// All implementations must embed UnimplementedFctNodeActiveLast24HServiceServer
// for forward compatibility
//
// FctNodeActiveLast24hService provides RPC methods for querying fct_node_active_last_24h data
type FctNodeActiveLast24HServiceServer interface {
	// List returns paginated fct_node_active_last_24h records
	List(context.Context, *ListFctNodeActiveLast24HRequest) (*ListFctNodeActiveLast24HResponse, error)
	// Get returns a single fct_node_active_last_24h record by primary key
	Get(context.Context, *GetFctNodeActiveLast24HRequest) (*GetFctNodeActiveLast24HResponse, error)
	mustEmbedUnimplementedFctNodeActiveLast24HServiceServer()
}

// UnimplementedFctNodeActiveLast24HServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFctNodeActiveLast24HServiceServer struct {
}

func (UnimplementedFctNodeActiveLast24HServiceServer) List(context.Context, *ListFctNodeActiveLast24HRequest) (*ListFctNodeActiveLast24HResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFctNodeActiveLast24HServiceServer) Get(context.Context, *GetFctNodeActiveLast24HRequest) (*GetFctNodeActiveLast24HResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFctNodeActiveLast24HServiceServer) mustEmbedUnimplementedFctNodeActiveLast24HServiceServer() {
}

// UnsafeFctNodeActiveLast24HServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FctNodeActiveLast24HServiceServer will
// result in compilation errors.
type UnsafeFctNodeActiveLast24HServiceServer interface {
	mustEmbedUnimplementedFctNodeActiveLast24HServiceServer()
}

func RegisterFctNodeActiveLast24HServiceServer(s grpc.ServiceRegistrar, srv FctNodeActiveLast24HServiceServer) {
	s.RegisterService(&FctNodeActiveLast24HService_ServiceDesc, srv)
}

func _FctNodeActiveLast24HService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFctNodeActiveLast24HRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FctNodeActiveLast24HServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FctNodeActiveLast24HService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FctNodeActiveLast24HServiceServer).List(ctx, req.(*ListFctNodeActiveLast24HRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FctNodeActiveLast24HService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFctNodeActiveLast24HRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FctNodeActiveLast24HServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FctNodeActiveLast24HService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FctNodeActiveLast24HServiceServer).Get(ctx, req.(*GetFctNodeActiveLast24HRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FctNodeActiveLast24HService_ServiceDesc is the grpc.ServiceDesc for FctNodeActiveLast24HService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FctNodeActiveLast24HService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cbt.FctNodeActiveLast24hService",
	HandlerType: (*FctNodeActiveLast24HServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _FctNodeActiveLast24HService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FctNodeActiveLast24HService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vendor/xatu-cbt/clickhouse/fct_node_active_last_24h.proto",
}
