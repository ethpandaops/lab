// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: vendor/xatu-cbt/clickhouse/fct_block_head.proto

package clickhouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FctBlockHeadService_List_FullMethodName = "/cbt.FctBlockHeadService/List"
	FctBlockHeadService_Get_FullMethodName  = "/cbt.FctBlockHeadService/Get"
)

// FctBlockHeadServiceClient is the client API for FctBlockHeadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query fct_block_head data
type FctBlockHeadServiceClient interface {
	// List records | Retrieve paginated results with optional filtering
	List(ctx context.Context, in *ListFctBlockHeadRequest, opts ...grpc.CallOption) (*ListFctBlockHeadResponse, error)
	// Get record | Retrieve a single record by slot_start_date_time
	Get(ctx context.Context, in *GetFctBlockHeadRequest, opts ...grpc.CallOption) (*GetFctBlockHeadResponse, error)
}

type fctBlockHeadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFctBlockHeadServiceClient(cc grpc.ClientConnInterface) FctBlockHeadServiceClient {
	return &fctBlockHeadServiceClient{cc}
}

func (c *fctBlockHeadServiceClient) List(ctx context.Context, in *ListFctBlockHeadRequest, opts ...grpc.CallOption) (*ListFctBlockHeadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFctBlockHeadResponse)
	err := c.cc.Invoke(ctx, FctBlockHeadService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fctBlockHeadServiceClient) Get(ctx context.Context, in *GetFctBlockHeadRequest, opts ...grpc.CallOption) (*GetFctBlockHeadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFctBlockHeadResponse)
	err := c.cc.Invoke(ctx, FctBlockHeadService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FctBlockHeadServiceServer is the server API for FctBlockHeadService service.
// All implementations must embed UnimplementedFctBlockHeadServiceServer
// for forward compatibility
//
// Query fct_block_head data
type FctBlockHeadServiceServer interface {
	// List records | Retrieve paginated results with optional filtering
	List(context.Context, *ListFctBlockHeadRequest) (*ListFctBlockHeadResponse, error)
	// Get record | Retrieve a single record by slot_start_date_time
	Get(context.Context, *GetFctBlockHeadRequest) (*GetFctBlockHeadResponse, error)
	mustEmbedUnimplementedFctBlockHeadServiceServer()
}

// UnimplementedFctBlockHeadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFctBlockHeadServiceServer struct {
}

func (UnimplementedFctBlockHeadServiceServer) List(context.Context, *ListFctBlockHeadRequest) (*ListFctBlockHeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFctBlockHeadServiceServer) Get(context.Context, *GetFctBlockHeadRequest) (*GetFctBlockHeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFctBlockHeadServiceServer) mustEmbedUnimplementedFctBlockHeadServiceServer() {}

// UnsafeFctBlockHeadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FctBlockHeadServiceServer will
// result in compilation errors.
type UnsafeFctBlockHeadServiceServer interface {
	mustEmbedUnimplementedFctBlockHeadServiceServer()
}

func RegisterFctBlockHeadServiceServer(s grpc.ServiceRegistrar, srv FctBlockHeadServiceServer) {
	s.RegisterService(&FctBlockHeadService_ServiceDesc, srv)
}

func _FctBlockHeadService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFctBlockHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FctBlockHeadServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FctBlockHeadService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FctBlockHeadServiceServer).List(ctx, req.(*ListFctBlockHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FctBlockHeadService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFctBlockHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FctBlockHeadServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FctBlockHeadService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FctBlockHeadServiceServer).Get(ctx, req.(*GetFctBlockHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FctBlockHeadService_ServiceDesc is the grpc.ServiceDesc for FctBlockHeadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FctBlockHeadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cbt.FctBlockHeadService",
	HandlerType: (*FctBlockHeadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _FctBlockHeadService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FctBlockHeadService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vendor/xatu-cbt/clickhouse/fct_block_head.proto",
}
