// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: vendor/xatu-cbt/clickhouse/fct_block_proposer_entity.proto

package clickhouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	FctBlockProposerEntityService_List_FullMethodName = "/cbt.FctBlockProposerEntityService/List"
	FctBlockProposerEntityService_Get_FullMethodName  = "/cbt.FctBlockProposerEntityService/Get"
)

// FctBlockProposerEntityServiceClient is the client API for FctBlockProposerEntityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FctBlockProposerEntityService provides RPC methods for querying fct_block_proposer_entity data
type FctBlockProposerEntityServiceClient interface {
	// List returns paginated fct_block_proposer_entity records
	List(ctx context.Context, in *ListFctBlockProposerEntityRequest, opts ...grpc.CallOption) (*ListFctBlockProposerEntityResponse, error)
	// Get returns a single fct_block_proposer_entity record by primary key
	Get(ctx context.Context, in *GetFctBlockProposerEntityRequest, opts ...grpc.CallOption) (*GetFctBlockProposerEntityResponse, error)
}

type fctBlockProposerEntityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFctBlockProposerEntityServiceClient(cc grpc.ClientConnInterface) FctBlockProposerEntityServiceClient {
	return &fctBlockProposerEntityServiceClient{cc}
}

func (c *fctBlockProposerEntityServiceClient) List(ctx context.Context, in *ListFctBlockProposerEntityRequest, opts ...grpc.CallOption) (*ListFctBlockProposerEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFctBlockProposerEntityResponse)
	err := c.cc.Invoke(ctx, FctBlockProposerEntityService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fctBlockProposerEntityServiceClient) Get(ctx context.Context, in *GetFctBlockProposerEntityRequest, opts ...grpc.CallOption) (*GetFctBlockProposerEntityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFctBlockProposerEntityResponse)
	err := c.cc.Invoke(ctx, FctBlockProposerEntityService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FctBlockProposerEntityServiceServer is the server API for FctBlockProposerEntityService service.
// All implementations must embed UnimplementedFctBlockProposerEntityServiceServer
// for forward compatibility
//
// FctBlockProposerEntityService provides RPC methods for querying fct_block_proposer_entity data
type FctBlockProposerEntityServiceServer interface {
	// List returns paginated fct_block_proposer_entity records
	List(context.Context, *ListFctBlockProposerEntityRequest) (*ListFctBlockProposerEntityResponse, error)
	// Get returns a single fct_block_proposer_entity record by primary key
	Get(context.Context, *GetFctBlockProposerEntityRequest) (*GetFctBlockProposerEntityResponse, error)
	mustEmbedUnimplementedFctBlockProposerEntityServiceServer()
}

// UnimplementedFctBlockProposerEntityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFctBlockProposerEntityServiceServer struct {
}

func (UnimplementedFctBlockProposerEntityServiceServer) List(context.Context, *ListFctBlockProposerEntityRequest) (*ListFctBlockProposerEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedFctBlockProposerEntityServiceServer) Get(context.Context, *GetFctBlockProposerEntityRequest) (*GetFctBlockProposerEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFctBlockProposerEntityServiceServer) mustEmbedUnimplementedFctBlockProposerEntityServiceServer() {
}

// UnsafeFctBlockProposerEntityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FctBlockProposerEntityServiceServer will
// result in compilation errors.
type UnsafeFctBlockProposerEntityServiceServer interface {
	mustEmbedUnimplementedFctBlockProposerEntityServiceServer()
}

func RegisterFctBlockProposerEntityServiceServer(s grpc.ServiceRegistrar, srv FctBlockProposerEntityServiceServer) {
	s.RegisterService(&FctBlockProposerEntityService_ServiceDesc, srv)
}

func _FctBlockProposerEntityService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFctBlockProposerEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FctBlockProposerEntityServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FctBlockProposerEntityService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FctBlockProposerEntityServiceServer).List(ctx, req.(*ListFctBlockProposerEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FctBlockProposerEntityService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFctBlockProposerEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FctBlockProposerEntityServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FctBlockProposerEntityService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FctBlockProposerEntityServiceServer).Get(ctx, req.(*GetFctBlockProposerEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FctBlockProposerEntityService_ServiceDesc is the grpc.ServiceDesc for FctBlockProposerEntityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FctBlockProposerEntityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cbt.FctBlockProposerEntityService",
	HandlerType: (*FctBlockProposerEntityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _FctBlockProposerEntityService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FctBlockProposerEntityService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vendor/xatu-cbt/clickhouse/fct_block_proposer_entity.proto",
}
