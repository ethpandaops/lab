// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: vendor/xatu-cbt/clickhouse/int_beacon_committee_head.proto

package clickhouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	IntBeaconCommitteeHeadService_List_FullMethodName = "/cbt.IntBeaconCommitteeHeadService/List"
	IntBeaconCommitteeHeadService_Get_FullMethodName  = "/cbt.IntBeaconCommitteeHeadService/Get"
)

// IntBeaconCommitteeHeadServiceClient is the client API for IntBeaconCommitteeHeadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query int_beacon_committee_head data
type IntBeaconCommitteeHeadServiceClient interface {
	// List records | Retrieve paginated results with optional filtering
	List(ctx context.Context, in *ListIntBeaconCommitteeHeadRequest, opts ...grpc.CallOption) (*ListIntBeaconCommitteeHeadResponse, error)
	// Get record | Retrieve a single record by primary key
	Get(ctx context.Context, in *GetIntBeaconCommitteeHeadRequest, opts ...grpc.CallOption) (*GetIntBeaconCommitteeHeadResponse, error)
}

type intBeaconCommitteeHeadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntBeaconCommitteeHeadServiceClient(cc grpc.ClientConnInterface) IntBeaconCommitteeHeadServiceClient {
	return &intBeaconCommitteeHeadServiceClient{cc}
}

func (c *intBeaconCommitteeHeadServiceClient) List(ctx context.Context, in *ListIntBeaconCommitteeHeadRequest, opts ...grpc.CallOption) (*ListIntBeaconCommitteeHeadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIntBeaconCommitteeHeadResponse)
	err := c.cc.Invoke(ctx, IntBeaconCommitteeHeadService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intBeaconCommitteeHeadServiceClient) Get(ctx context.Context, in *GetIntBeaconCommitteeHeadRequest, opts ...grpc.CallOption) (*GetIntBeaconCommitteeHeadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIntBeaconCommitteeHeadResponse)
	err := c.cc.Invoke(ctx, IntBeaconCommitteeHeadService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntBeaconCommitteeHeadServiceServer is the server API for IntBeaconCommitteeHeadService service.
// All implementations must embed UnimplementedIntBeaconCommitteeHeadServiceServer
// for forward compatibility
//
// Query int_beacon_committee_head data
type IntBeaconCommitteeHeadServiceServer interface {
	// List records | Retrieve paginated results with optional filtering
	List(context.Context, *ListIntBeaconCommitteeHeadRequest) (*ListIntBeaconCommitteeHeadResponse, error)
	// Get record | Retrieve a single record by primary key
	Get(context.Context, *GetIntBeaconCommitteeHeadRequest) (*GetIntBeaconCommitteeHeadResponse, error)
	mustEmbedUnimplementedIntBeaconCommitteeHeadServiceServer()
}

// UnimplementedIntBeaconCommitteeHeadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIntBeaconCommitteeHeadServiceServer struct {
}

func (UnimplementedIntBeaconCommitteeHeadServiceServer) List(context.Context, *ListIntBeaconCommitteeHeadRequest) (*ListIntBeaconCommitteeHeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIntBeaconCommitteeHeadServiceServer) Get(context.Context, *GetIntBeaconCommitteeHeadRequest) (*GetIntBeaconCommitteeHeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIntBeaconCommitteeHeadServiceServer) mustEmbedUnimplementedIntBeaconCommitteeHeadServiceServer() {
}

// UnsafeIntBeaconCommitteeHeadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntBeaconCommitteeHeadServiceServer will
// result in compilation errors.
type UnsafeIntBeaconCommitteeHeadServiceServer interface {
	mustEmbedUnimplementedIntBeaconCommitteeHeadServiceServer()
}

func RegisterIntBeaconCommitteeHeadServiceServer(s grpc.ServiceRegistrar, srv IntBeaconCommitteeHeadServiceServer) {
	s.RegisterService(&IntBeaconCommitteeHeadService_ServiceDesc, srv)
}

func _IntBeaconCommitteeHeadService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntBeaconCommitteeHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntBeaconCommitteeHeadServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntBeaconCommitteeHeadService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntBeaconCommitteeHeadServiceServer).List(ctx, req.(*ListIntBeaconCommitteeHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntBeaconCommitteeHeadService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntBeaconCommitteeHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntBeaconCommitteeHeadServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntBeaconCommitteeHeadService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntBeaconCommitteeHeadServiceServer).Get(ctx, req.(*GetIntBeaconCommitteeHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntBeaconCommitteeHeadService_ServiceDesc is the grpc.ServiceDesc for IntBeaconCommitteeHeadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntBeaconCommitteeHeadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cbt.IntBeaconCommitteeHeadService",
	HandlerType: (*IntBeaconCommitteeHeadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _IntBeaconCommitteeHeadService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IntBeaconCommitteeHeadService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vendor/xatu-cbt/clickhouse/int_beacon_committee_head.proto",
}
