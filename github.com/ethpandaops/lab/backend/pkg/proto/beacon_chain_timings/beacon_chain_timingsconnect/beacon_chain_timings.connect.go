// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/pkg/server/proto/beacon_chain_timings/beacon_chain_timings.proto

package beacon_chain_timingsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	beacon_chain_timings "github.com/ethpandaops/lab/backend/pkg/proto/beacon_chain_timings"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BeaconChainTimingsServiceName is the fully-qualified name of the BeaconChainTimingsService
	// service.
	BeaconChainTimingsServiceName = "beacon_chain_timings.BeaconChainTimingsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BeaconChainTimingsServiceGetTimingDataProcedure is the fully-qualified name of the
	// BeaconChainTimingsService's GetTimingData RPC.
	BeaconChainTimingsServiceGetTimingDataProcedure = "/beacon_chain_timings.BeaconChainTimingsService/GetTimingData"
	// BeaconChainTimingsServiceGetSizeCDFDataProcedure is the fully-qualified name of the
	// BeaconChainTimingsService's GetSizeCDFData RPC.
	BeaconChainTimingsServiceGetSizeCDFDataProcedure = "/beacon_chain_timings.BeaconChainTimingsService/GetSizeCDFData"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	beaconChainTimingsServiceServiceDescriptor              = beacon_chain_timings.File_backend_pkg_server_proto_beacon_chain_timings_beacon_chain_timings_proto.Services().ByName("BeaconChainTimingsService")
	beaconChainTimingsServiceGetTimingDataMethodDescriptor  = beaconChainTimingsServiceServiceDescriptor.Methods().ByName("GetTimingData")
	beaconChainTimingsServiceGetSizeCDFDataMethodDescriptor = beaconChainTimingsServiceServiceDescriptor.Methods().ByName("GetSizeCDFData")
)

// BeaconChainTimingsServiceClient is a client for the
// beacon_chain_timings.BeaconChainTimingsService service.
type BeaconChainTimingsServiceClient interface {
	// Get timing data for a specific network and time window
	GetTimingData(context.Context, *connect.Request[beacon_chain_timings.GetTimingDataRequest]) (*connect.Response[beacon_chain_timings.GetTimingDataResponse], error)
	// Get size CDF data for a specific network
	GetSizeCDFData(context.Context, *connect.Request[beacon_chain_timings.GetSizeCDFDataRequest]) (*connect.Response[beacon_chain_timings.GetSizeCDFDataResponse], error)
}

// NewBeaconChainTimingsServiceClient constructs a client for the
// beacon_chain_timings.BeaconChainTimingsService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBeaconChainTimingsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BeaconChainTimingsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &beaconChainTimingsServiceClient{
		getTimingData: connect.NewClient[beacon_chain_timings.GetTimingDataRequest, beacon_chain_timings.GetTimingDataResponse](
			httpClient,
			baseURL+BeaconChainTimingsServiceGetTimingDataProcedure,
			connect.WithSchema(beaconChainTimingsServiceGetTimingDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSizeCDFData: connect.NewClient[beacon_chain_timings.GetSizeCDFDataRequest, beacon_chain_timings.GetSizeCDFDataResponse](
			httpClient,
			baseURL+BeaconChainTimingsServiceGetSizeCDFDataProcedure,
			connect.WithSchema(beaconChainTimingsServiceGetSizeCDFDataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// beaconChainTimingsServiceClient implements BeaconChainTimingsServiceClient.
type beaconChainTimingsServiceClient struct {
	getTimingData  *connect.Client[beacon_chain_timings.GetTimingDataRequest, beacon_chain_timings.GetTimingDataResponse]
	getSizeCDFData *connect.Client[beacon_chain_timings.GetSizeCDFDataRequest, beacon_chain_timings.GetSizeCDFDataResponse]
}

// GetTimingData calls beacon_chain_timings.BeaconChainTimingsService.GetTimingData.
func (c *beaconChainTimingsServiceClient) GetTimingData(ctx context.Context, req *connect.Request[beacon_chain_timings.GetTimingDataRequest]) (*connect.Response[beacon_chain_timings.GetTimingDataResponse], error) {
	return c.getTimingData.CallUnary(ctx, req)
}

// GetSizeCDFData calls beacon_chain_timings.BeaconChainTimingsService.GetSizeCDFData.
func (c *beaconChainTimingsServiceClient) GetSizeCDFData(ctx context.Context, req *connect.Request[beacon_chain_timings.GetSizeCDFDataRequest]) (*connect.Response[beacon_chain_timings.GetSizeCDFDataResponse], error) {
	return c.getSizeCDFData.CallUnary(ctx, req)
}

// BeaconChainTimingsServiceHandler is an implementation of the
// beacon_chain_timings.BeaconChainTimingsService service.
type BeaconChainTimingsServiceHandler interface {
	// Get timing data for a specific network and time window
	GetTimingData(context.Context, *connect.Request[beacon_chain_timings.GetTimingDataRequest]) (*connect.Response[beacon_chain_timings.GetTimingDataResponse], error)
	// Get size CDF data for a specific network
	GetSizeCDFData(context.Context, *connect.Request[beacon_chain_timings.GetSizeCDFDataRequest]) (*connect.Response[beacon_chain_timings.GetSizeCDFDataResponse], error)
}

// NewBeaconChainTimingsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBeaconChainTimingsServiceHandler(svc BeaconChainTimingsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	beaconChainTimingsServiceGetTimingDataHandler := connect.NewUnaryHandler(
		BeaconChainTimingsServiceGetTimingDataProcedure,
		svc.GetTimingData,
		connect.WithSchema(beaconChainTimingsServiceGetTimingDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	beaconChainTimingsServiceGetSizeCDFDataHandler := connect.NewUnaryHandler(
		BeaconChainTimingsServiceGetSizeCDFDataProcedure,
		svc.GetSizeCDFData,
		connect.WithSchema(beaconChainTimingsServiceGetSizeCDFDataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/beacon_chain_timings.BeaconChainTimingsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BeaconChainTimingsServiceGetTimingDataProcedure:
			beaconChainTimingsServiceGetTimingDataHandler.ServeHTTP(w, r)
		case BeaconChainTimingsServiceGetSizeCDFDataProcedure:
			beaconChainTimingsServiceGetSizeCDFDataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBeaconChainTimingsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBeaconChainTimingsServiceHandler struct{}

func (UnimplementedBeaconChainTimingsServiceHandler) GetTimingData(context.Context, *connect.Request[beacon_chain_timings.GetTimingDataRequest]) (*connect.Response[beacon_chain_timings.GetTimingDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("beacon_chain_timings.BeaconChainTimingsService.GetTimingData is not implemented"))
}

func (UnimplementedBeaconChainTimingsServiceHandler) GetSizeCDFData(context.Context, *connect.Request[beacon_chain_timings.GetSizeCDFDataRequest]) (*connect.Response[beacon_chain_timings.GetSizeCDFDataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("beacon_chain_timings.BeaconChainTimingsService.GetSizeCDFData is not implemented"))
}
