// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/server/proto/beacon_slots/beacon_slots.proto

package beacon_slots

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeaconSlotsService_GetProcessorState_FullMethodName = "/beacon_slots.BeaconSlotsService/GetProcessorState"
	BeaconSlotsService_GetSlotData_FullMethodName       = "/beacon_slots.BeaconSlotsService/GetSlotData"
	BeaconSlotsService_GetSlotRangeData_FullMethodName  = "/beacon_slots.BeaconSlotsService/GetSlotRangeData"
	BeaconSlotsService_GetNodes_FullMethodName          = "/beacon_slots.BeaconSlotsService/GetNodes"
)

// BeaconSlotsServiceClient is the client API for BeaconSlotsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The beacon_slots service definition
type BeaconSlotsServiceClient interface {
	// Get processor state
	GetProcessorState(ctx context.Context, in *GetProcessorStateRequest, opts ...grpc.CallOption) (*GetProcessorStateResponse, error)
	// Get slot data
	GetSlotData(ctx context.Context, in *GetSlotDataRequest, opts ...grpc.CallOption) (*GetSlotDataResponse, error)
	// Get slot range data
	GetSlotRangeData(ctx context.Context, in *GetSlotRangeDataRequest, opts ...grpc.CallOption) (*GetSlotRangeDataResponse, error)
	// Get node list
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
}

type beaconSlotsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeaconSlotsServiceClient(cc grpc.ClientConnInterface) BeaconSlotsServiceClient {
	return &beaconSlotsServiceClient{cc}
}

func (c *beaconSlotsServiceClient) GetProcessorState(ctx context.Context, in *GetProcessorStateRequest, opts ...grpc.CallOption) (*GetProcessorStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProcessorStateResponse)
	err := c.cc.Invoke(ctx, BeaconSlotsService_GetProcessorState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSlotsServiceClient) GetSlotData(ctx context.Context, in *GetSlotDataRequest, opts ...grpc.CallOption) (*GetSlotDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSlotDataResponse)
	err := c.cc.Invoke(ctx, BeaconSlotsService_GetSlotData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSlotsServiceClient) GetSlotRangeData(ctx context.Context, in *GetSlotRangeDataRequest, opts ...grpc.CallOption) (*GetSlotRangeDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSlotRangeDataResponse)
	err := c.cc.Invoke(ctx, BeaconSlotsService_GetSlotRangeData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconSlotsServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, BeaconSlotsService_GetNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeaconSlotsServiceServer is the server API for BeaconSlotsService service.
// All implementations must embed UnimplementedBeaconSlotsServiceServer
// for forward compatibility.
//
// The beacon_slots service definition
type BeaconSlotsServiceServer interface {
	// Get processor state
	GetProcessorState(context.Context, *GetProcessorStateRequest) (*GetProcessorStateResponse, error)
	// Get slot data
	GetSlotData(context.Context, *GetSlotDataRequest) (*GetSlotDataResponse, error)
	// Get slot range data
	GetSlotRangeData(context.Context, *GetSlotRangeDataRequest) (*GetSlotRangeDataResponse, error)
	// Get node list
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	mustEmbedUnimplementedBeaconSlotsServiceServer()
}

// UnimplementedBeaconSlotsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeaconSlotsServiceServer struct{}

func (UnimplementedBeaconSlotsServiceServer) GetProcessorState(context.Context, *GetProcessorStateRequest) (*GetProcessorStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcessorState not implemented")
}
func (UnimplementedBeaconSlotsServiceServer) GetSlotData(context.Context, *GetSlotDataRequest) (*GetSlotDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotData not implemented")
}
func (UnimplementedBeaconSlotsServiceServer) GetSlotRangeData(context.Context, *GetSlotRangeDataRequest) (*GetSlotRangeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotRangeData not implemented")
}
func (UnimplementedBeaconSlotsServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedBeaconSlotsServiceServer) mustEmbedUnimplementedBeaconSlotsServiceServer() {}
func (UnimplementedBeaconSlotsServiceServer) testEmbeddedByValue()                            {}

// UnsafeBeaconSlotsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeaconSlotsServiceServer will
// result in compilation errors.
type UnsafeBeaconSlotsServiceServer interface {
	mustEmbedUnimplementedBeaconSlotsServiceServer()
}

func RegisterBeaconSlotsServiceServer(s grpc.ServiceRegistrar, srv BeaconSlotsServiceServer) {
	// If the following call pancis, it indicates UnimplementedBeaconSlotsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeaconSlotsService_ServiceDesc, srv)
}

func _BeaconSlotsService_GetProcessorState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessorStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSlotsServiceServer).GetProcessorState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeaconSlotsService_GetProcessorState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSlotsServiceServer).GetProcessorState(ctx, req.(*GetProcessorStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSlotsService_GetSlotData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSlotsServiceServer).GetSlotData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeaconSlotsService_GetSlotData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSlotsServiceServer).GetSlotData(ctx, req.(*GetSlotDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSlotsService_GetSlotRangeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotRangeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSlotsServiceServer).GetSlotRangeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeaconSlotsService_GetSlotRangeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSlotsServiceServer).GetSlotRangeData(ctx, req.(*GetSlotRangeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconSlotsService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconSlotsServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BeaconSlotsService_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconSlotsServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BeaconSlotsService_ServiceDesc is the grpc.ServiceDesc for BeaconSlotsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeaconSlotsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beacon_slots.BeaconSlotsService",
	HandlerType: (*BeaconSlotsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProcessorState",
			Handler:    _BeaconSlotsService_GetProcessorState_Handler,
		},
		{
			MethodName: "GetSlotData",
			Handler:    _BeaconSlotsService_GetSlotData_Handler,
		},
		{
			MethodName: "GetSlotRangeData",
			Handler:    _BeaconSlotsService_GetSlotRangeData_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _BeaconSlotsService_GetNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server/proto/beacon_slots/beacon_slots.proto",
}
