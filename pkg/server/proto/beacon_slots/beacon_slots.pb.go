// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: pkg/server/proto/beacon_slots/beacon_slots.proto

package beacon_slots

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Geo location information for a node
type Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City      string                  `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	Country   string                  `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Continent string                  `protobuf:"bytes,3,opt,name=continent,proto3" json:"continent,omitempty"`
	Latitude  *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Geo) Reset() {
	*x = Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geo) ProtoMessage() {}

func (x *Geo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geo.ProtoReflect.Descriptor instead.
func (*Geo) Descriptor() ([]byte, []int) {
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP(), []int{0}
}

func (x *Geo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Geo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Geo) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *Geo) GetLatitude() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Latitude
	}
	return nil
}

func (x *Geo) GetLongitude() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Longitude
	}
	return nil
}

// Node information, keyed by meta_client_name
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Geo      *Geo   `protobuf:"bytes,3,opt,name=geo,proto3" json:"geo,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Node) GetGeo() *Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

// Proposer information (only slot and proposer_validator_index)
type Proposer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot                   int64 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	ProposerValidatorIndex int64 `protobuf:"varint,2,opt,name=proposer_validator_index,json=proposerValidatorIndex,proto3" json:"proposer_validator_index,omitempty"`
}

func (x *Proposer) Reset() {
	*x = Proposer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposer) ProtoMessage() {}

func (x *Proposer) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposer.ProtoReflect.Descriptor instead.
func (*Proposer) Descriptor() ([]byte, []int) {
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP(), []int{2}
}

func (x *Proposer) GetSlot() int64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Proposer) GetProposerValidatorIndex() int64 {
	if x != nil {
		return x.ProposerValidatorIndex
	}
	return 0
}

// Block data, matching the target JSON structure precisely
type BlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot                                             int64                  `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	SlotStartDateTime                                *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=slot_start_date_time,json=slotStartDateTime,proto3" json:"slot_start_date_time,omitempty"`
	Epoch                                            int64                  `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	EpochStartDateTime                               *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=epoch_start_date_time,json=epochStartDateTime,proto3" json:"epoch_start_date_time,omitempty"`
	BlockRoot                                        string                 `protobuf:"bytes,5,opt,name=block_root,json=blockRoot,proto3" json:"block_root,omitempty"`
	BlockVersion                                     string                 `protobuf:"bytes,6,opt,name=block_version,json=blockVersion,proto3" json:"block_version,omitempty"`
	BlockTotalBytes                                  *wrapperspb.Int64Value `protobuf:"bytes,7,opt,name=block_total_bytes,json=blockTotalBytes,proto3" json:"block_total_bytes,omitempty"`
	BlockTotalBytesCompressed                        *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=block_total_bytes_compressed,json=blockTotalBytesCompressed,proto3" json:"block_total_bytes_compressed,omitempty"`
	ParentRoot                                       string                 `protobuf:"bytes,9,opt,name=parent_root,json=parentRoot,proto3" json:"parent_root,omitempty"`
	StateRoot                                        string                 `protobuf:"bytes,10,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	ProposerIndex                                    int64                  `protobuf:"varint,11,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty"`
	Eth1DataBlockHash                                string                 `protobuf:"bytes,12,opt,name=eth1_data_block_hash,json=eth1DataBlockHash,proto3" json:"eth1_data_block_hash,omitempty"`
	Eth1DataDepositRoot                              string                 `protobuf:"bytes,13,opt,name=eth1_data_deposit_root,json=eth1DataDepositRoot,proto3" json:"eth1_data_deposit_root,omitempty"`
	ExecutionPayloadBlockHash                        string                 `protobuf:"bytes,14,opt,name=execution_payload_block_hash,json=executionPayloadBlockHash,proto3" json:"execution_payload_block_hash,omitempty"`
	ExecutionPayloadBlockNumber                      int64                  `protobuf:"varint,15,opt,name=execution_payload_block_number,json=executionPayloadBlockNumber,proto3" json:"execution_payload_block_number,omitempty"`
	ExecutionPayloadFeeRecipient                     string                 `protobuf:"bytes,16,opt,name=execution_payload_fee_recipient,json=executionPayloadFeeRecipient,proto3" json:"execution_payload_fee_recipient,omitempty"`
	ExecutionPayloadBaseFeePerGas                    *wrapperspb.Int64Value `protobuf:"bytes,17,opt,name=execution_payload_base_fee_per_gas,json=executionPayloadBaseFeePerGas,proto3" json:"execution_payload_base_fee_per_gas,omitempty"`
	ExecutionPayloadBlobGasUsed                      *wrapperspb.Int64Value `protobuf:"bytes,18,opt,name=execution_payload_blob_gas_used,json=executionPayloadBlobGasUsed,proto3" json:"execution_payload_blob_gas_used,omitempty"`
	ExecutionPayloadExcessBlobGas                    *wrapperspb.Int64Value `protobuf:"bytes,19,opt,name=execution_payload_excess_blob_gas,json=executionPayloadExcessBlobGas,proto3" json:"execution_payload_excess_blob_gas,omitempty"`
	ExecutionPayloadGasLimit                         *wrapperspb.Int64Value `protobuf:"bytes,20,opt,name=execution_payload_gas_limit,json=executionPayloadGasLimit,proto3" json:"execution_payload_gas_limit,omitempty"`
	ExecutionPayloadGasUsed                          *wrapperspb.Int64Value `protobuf:"bytes,21,opt,name=execution_payload_gas_used,json=executionPayloadGasUsed,proto3" json:"execution_payload_gas_used,omitempty"`
	ExecutionPayloadStateRoot                        string                 `protobuf:"bytes,22,opt,name=execution_payload_state_root,json=executionPayloadStateRoot,proto3" json:"execution_payload_state_root,omitempty"`
	ExecutionPayloadParentHash                       string                 `protobuf:"bytes,23,opt,name=execution_payload_parent_hash,json=executionPayloadParentHash,proto3" json:"execution_payload_parent_hash,omitempty"`
	ExecutionPayloadTransactionsCount                *wrapperspb.Int64Value `protobuf:"bytes,24,opt,name=execution_payload_transactions_count,json=executionPayloadTransactionsCount,proto3" json:"execution_payload_transactions_count,omitempty"`
	ExecutionPayloadTransactionsTotalBytes           *wrapperspb.Int64Value `protobuf:"bytes,25,opt,name=execution_payload_transactions_total_bytes,json=executionPayloadTransactionsTotalBytes,proto3" json:"execution_payload_transactions_total_bytes,omitempty"`
	ExecutionPayloadTransactionsTotalBytesCompressed *wrapperspb.Int64Value `protobuf:"bytes,26,opt,name=execution_payload_transactions_total_bytes_compressed,json=executionPayloadTransactionsTotalBytesCompressed,proto3" json:"execution_payload_transactions_total_bytes_compressed,omitempty"`
}

func (x *BlockData) Reset() {
	*x = BlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData) ProtoMessage() {}

func (x *BlockData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData.ProtoReflect.Descriptor instead.
func (*BlockData) Descriptor() ([]byte, []int) {
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP(), []int{3}
}

func (x *BlockData) GetSlot() int64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BlockData) GetSlotStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SlotStartDateTime
	}
	return nil
}

func (x *BlockData) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *BlockData) GetEpochStartDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EpochStartDateTime
	}
	return nil
}

func (x *BlockData) GetBlockRoot() string {
	if x != nil {
		return x.BlockRoot
	}
	return ""
}

func (x *BlockData) GetBlockVersion() string {
	if x != nil {
		return x.BlockVersion
	}
	return ""
}

func (x *BlockData) GetBlockTotalBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockTotalBytes
	}
	return nil
}

func (x *BlockData) GetBlockTotalBytesCompressed() *wrapperspb.Int64Value {
	if x != nil {
		return x.BlockTotalBytesCompressed
	}
	return nil
}

func (x *BlockData) GetParentRoot() string {
	if x != nil {
		return x.ParentRoot
	}
	return ""
}

func (x *BlockData) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *BlockData) GetProposerIndex() int64 {
	if x != nil {
		return x.ProposerIndex
	}
	return 0
}

func (x *BlockData) GetEth1DataBlockHash() string {
	if x != nil {
		return x.Eth1DataBlockHash
	}
	return ""
}

func (x *BlockData) GetEth1DataDepositRoot() string {
	if x != nil {
		return x.Eth1DataDepositRoot
	}
	return ""
}

func (x *BlockData) GetExecutionPayloadBlockHash() string {
	if x != nil {
		return x.ExecutionPayloadBlockHash
	}
	return ""
}

func (x *BlockData) GetExecutionPayloadBlockNumber() int64 {
	if x != nil {
		return x.ExecutionPayloadBlockNumber
	}
	return 0
}

func (x *BlockData) GetExecutionPayloadFeeRecipient() string {
	if x != nil {
		return x.ExecutionPayloadFeeRecipient
	}
	return ""
}

func (x *BlockData) GetExecutionPayloadBaseFeePerGas() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExecutionPayloadBaseFeePerGas
	}
	return nil
}

func (x *BlockData) GetExecutionPayloadBlobGasUsed() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExecutionPayloadBlobGasUsed
	}
	return nil
}

func (x *BlockData) GetExecutionPayloadExcessBlobGas() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExecutionPayloadExcessBlobGas
	}
	return nil
}

func (x *BlockData) GetExecutionPayloadGasLimit() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExecutionPayloadGasLimit
	}
	return nil
}

func (x *BlockData) GetExecutionPayloadGasUsed() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExecutionPayloadGasUsed
	}
	return nil
}

func (x *BlockData) GetExecutionPayloadStateRoot() string {
	if x != nil {
		return x.ExecutionPayloadStateRoot
	}
	return ""
}

func (x *BlockData) GetExecutionPayloadParentHash() string {
	if x != nil {
		return x.ExecutionPayloadParentHash
	}
	return ""
}

func (x *BlockData) GetExecutionPayloadTransactionsCount() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExecutionPayloadTransactionsCount
	}
	return nil
}

func (x *BlockData) GetExecutionPayloadTransactionsTotalBytes() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExecutionPayloadTransactionsTotalBytes
	}
	return nil
}

func (x *BlockData) GetExecutionPayloadTransactionsTotalBytesCompressed() *wrapperspb.Int64Value {
	if x != nil {
		return x.ExecutionPayloadTransactionsTotalBytesCompressed
	}
	return nil
}

// Attestation window
type AttestationWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartMs          int64   `protobuf:"varint,1,opt,name=start_ms,json=startMs,proto3" json:"start_ms,omitempty"`
	EndMs            int64   `protobuf:"varint,2,opt,name=end_ms,json=endMs,proto3" json:"end_ms,omitempty"`
	ValidatorIndices []int64 `protobuf:"varint,3,rep,packed,name=validator_indices,json=validatorIndices,proto3" json:"validator_indices,omitempty"`
}

func (x *AttestationWindow) Reset() {
	*x = AttestationWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationWindow) ProtoMessage() {}

func (x *AttestationWindow) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationWindow.ProtoReflect.Descriptor instead.
func (*AttestationWindow) Descriptor() ([]byte, []int) {
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP(), []int{4}
}

func (x *AttestationWindow) GetStartMs() int64 {
	if x != nil {
		return x.StartMs
	}
	return 0
}

func (x *AttestationWindow) GetEndMs() int64 {
	if x != nil {
		return x.EndMs
	}
	return 0
}

func (x *AttestationWindow) GetValidatorIndices() []int64 {
	if x != nil {
		return x.ValidatorIndices
	}
	return nil
}

// Attestations data
type AttestationsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Windows      []*AttestationWindow `protobuf:"bytes,1,rep,name=windows,proto3" json:"windows,omitempty"`
	MaximumVotes int64                `protobuf:"varint,2,opt,name=maximum_votes,json=maximumVotes,proto3" json:"maximum_votes,omitempty"`
}

func (x *AttestationsData) Reset() {
	*x = AttestationsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttestationsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttestationsData) ProtoMessage() {}

func (x *AttestationsData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttestationsData.ProtoReflect.Descriptor instead.
func (*AttestationsData) Descriptor() ([]byte, []int) {
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP(), []int{5}
}

func (x *AttestationsData) GetWindows() []*AttestationWindow {
	if x != nil {
		return x.Windows
	}
	return nil
}

func (x *AttestationsData) GetMaximumVotes() int64 {
	if x != nil {
		return x.MaximumVotes
	}
	return 0
}

// Intermediate message for nested blob timing maps
type BlobTimingMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timings map[int64]int64 `protobuf:"bytes,1,rep,name=timings,proto3" json:"timings,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // map blob_index -> ms
}

func (x *BlobTimingMap) Reset() {
	*x = BlobTimingMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobTimingMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobTimingMap) ProtoMessage() {}

func (x *BlobTimingMap) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobTimingMap.ProtoReflect.Descriptor instead.
func (*BlobTimingMap) Descriptor() ([]byte, []int) {
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP(), []int{6}
}

func (x *BlobTimingMap) GetTimings() map[int64]int64 {
	if x != nil {
		return x.Timings
	}
	return nil
}

// Timings data
type Timings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSeen         map[string]int64          `protobuf:"bytes,1,rep,name=block_seen,json=blockSeen,proto3" json:"block_seen,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                             // map meta_client -> ms
	BlobSeen          map[string]*BlobTimingMap `protobuf:"bytes,2,rep,name=blob_seen,json=blobSeen,proto3" json:"blob_seen,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`                                 // map meta_client -> BlobTimingMap
	BlockFirstSeenP2P map[string]int64          `protobuf:"bytes,3,rep,name=block_first_seen_p2p,json=blockFirstSeenP2p,proto3" json:"block_first_seen_p2p,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // map meta_client -> ms
	BlobFirstSeenP2P  map[string]*BlobTimingMap `protobuf:"bytes,4,rep,name=blob_first_seen_p2p,json=blobFirstSeenP2p,proto3" json:"blob_first_seen_p2p,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`     // map meta_client -> BlobTimingMap
}

func (x *Timings) Reset() {
	*x = Timings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timings) ProtoMessage() {}

func (x *Timings) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timings.ProtoReflect.Descriptor instead.
func (*Timings) Descriptor() ([]byte, []int) {
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP(), []int{7}
}

func (x *Timings) GetBlockSeen() map[string]int64 {
	if x != nil {
		return x.BlockSeen
	}
	return nil
}

func (x *Timings) GetBlobSeen() map[string]*BlobTimingMap {
	if x != nil {
		return x.BlobSeen
	}
	return nil
}

func (x *Timings) GetBlockFirstSeenP2P() map[string]int64 {
	if x != nil {
		return x.BlockFirstSeenP2P
	}
	return nil
}

func (x *Timings) GetBlobFirstSeenP2P() map[string]*BlobTimingMap {
	if x != nil {
		return x.BlobFirstSeenP2P
	}
	return nil
}

// Top-level beacon slot data message
type BeaconSlotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slot             int64                   `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
	Network          string                  `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	ProcessedAt      *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=processed_at,json=processedAt,proto3" json:"processed_at,omitempty"`
	ProcessingTimeMs int64                   `protobuf:"varint,4,opt,name=processing_time_ms,json=processingTimeMs,proto3" json:"processing_time_ms,omitempty"`
	Block            *BlockData              `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	Proposer         *Proposer               `protobuf:"bytes,6,opt,name=proposer,proto3" json:"proposer,omitempty"`
	Entity           *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=entity,proto3" json:"entity,omitempty"`
	Nodes            map[string]*Node        `protobuf:"bytes,8,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timings          *Timings                `protobuf:"bytes,9,opt,name=timings,proto3" json:"timings,omitempty"`
	Attestations     *AttestationsData       `protobuf:"bytes,10,opt,name=attestations,proto3" json:"attestations,omitempty"`
}

func (x *BeaconSlotData) Reset() {
	*x = BeaconSlotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconSlotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconSlotData) ProtoMessage() {}

func (x *BeaconSlotData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconSlotData.ProtoReflect.Descriptor instead.
func (*BeaconSlotData) Descriptor() ([]byte, []int) {
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP(), []int{8}
}

func (x *BeaconSlotData) GetSlot() int64 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *BeaconSlotData) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *BeaconSlotData) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

func (x *BeaconSlotData) GetProcessingTimeMs() int64 {
	if x != nil {
		return x.ProcessingTimeMs
	}
	return 0
}

func (x *BeaconSlotData) GetBlock() *BlockData {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BeaconSlotData) GetProposer() *Proposer {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *BeaconSlotData) GetEntity() *wrapperspb.StringValue {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *BeaconSlotData) GetNodes() map[string]*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *BeaconSlotData) GetTimings() *Timings {
	if x != nil {
		return x.Timings
	}
	return nil
}

func (x *BeaconSlotData) GetAttestations() *AttestationsData {
	if x != nil {
		return x.Attestations
	}
	return nil
}

var File_pkg_server_proto_beacon_slots_beacon_slots_proto protoreflect.FileDescriptor

var file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDesc = []byte{
	0x0a, 0x30, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2f,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc7, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x22, 0x58, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xb8, 0x0e, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x4b, 0x0a, 0x14, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11,
	0x73, 0x6c, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x4d, 0x0a, 0x15, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x12, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x74, 0x68, 0x31,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x65, 0x74, 0x68,
	0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x74, 0x68, 0x31, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x3f,
	0x0a, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x43, 0x0a, 0x1e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x66, 0x0a, 0x22, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x61,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72,
	0x47, 0x61, 0x73, 0x12, 0x61, 0x0a, 0x1f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x62, 0x47,
	0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x21, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x12, 0x5a, 0x0a,
	0x1b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x18, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x47, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x1a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x67,
	0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x61, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x6c, 0x0a, 0x24, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x21, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x77, 0x0a, 0x2a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x26, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x8c,
	0x01, 0x0a, 0x35, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x30, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x72, 0x0a,
	0x11, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65,
	0x6e, 0x64, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x72, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x05, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x62,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x65, 0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70,
	0x32, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x32,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x32, 0x70, 0x12, 0x5a, 0x0a, 0x13, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x32, 0x70,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x6c,
	0x6f, 0x62, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50, 0x32, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x50, 0x32, 0x70, 0x1a, 0x3c, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x65,
	0x65, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x65, 0x65, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a,
	0x16, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x50,
	0x32, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x50, 0x32, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x62, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x04, 0x0a, 0x0e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x53, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0c,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x4c, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x33,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68,
	0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescOnce sync.Once
	file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescData = file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDesc
)

func file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescGZIP() []byte {
	file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescOnce.Do(func() {
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescData)
	})
	return file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDescData
}

var file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_pkg_server_proto_beacon_slots_beacon_slots_proto_goTypes = []any{
	(*Geo)(nil),                    // 0: beacon_slots.Geo
	(*Node)(nil),                   // 1: beacon_slots.Node
	(*Proposer)(nil),               // 2: beacon_slots.Proposer
	(*BlockData)(nil),              // 3: beacon_slots.BlockData
	(*AttestationWindow)(nil),      // 4: beacon_slots.AttestationWindow
	(*AttestationsData)(nil),       // 5: beacon_slots.AttestationsData
	(*BlobTimingMap)(nil),          // 6: beacon_slots.BlobTimingMap
	(*Timings)(nil),                // 7: beacon_slots.Timings
	(*BeaconSlotData)(nil),         // 8: beacon_slots.BeaconSlotData
	nil,                            // 9: beacon_slots.BlobTimingMap.TimingsEntry
	nil,                            // 10: beacon_slots.Timings.BlockSeenEntry
	nil,                            // 11: beacon_slots.Timings.BlobSeenEntry
	nil,                            // 12: beacon_slots.Timings.BlockFirstSeenP2pEntry
	nil,                            // 13: beacon_slots.Timings.BlobFirstSeenP2pEntry
	nil,                            // 14: beacon_slots.BeaconSlotData.NodesEntry
	(*wrapperspb.DoubleValue)(nil), // 15: google.protobuf.DoubleValue
	(*timestamppb.Timestamp)(nil),  // 16: google.protobuf.Timestamp
	(*wrapperspb.Int64Value)(nil),  // 17: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil), // 18: google.protobuf.StringValue
}
var file_pkg_server_proto_beacon_slots_beacon_slots_proto_depIdxs = []int32{
	15, // 0: beacon_slots.Geo.latitude:type_name -> google.protobuf.DoubleValue
	15, // 1: beacon_slots.Geo.longitude:type_name -> google.protobuf.DoubleValue
	0,  // 2: beacon_slots.Node.geo:type_name -> beacon_slots.Geo
	16, // 3: beacon_slots.BlockData.slot_start_date_time:type_name -> google.protobuf.Timestamp
	16, // 4: beacon_slots.BlockData.epoch_start_date_time:type_name -> google.protobuf.Timestamp
	17, // 5: beacon_slots.BlockData.block_total_bytes:type_name -> google.protobuf.Int64Value
	17, // 6: beacon_slots.BlockData.block_total_bytes_compressed:type_name -> google.protobuf.Int64Value
	17, // 7: beacon_slots.BlockData.execution_payload_base_fee_per_gas:type_name -> google.protobuf.Int64Value
	17, // 8: beacon_slots.BlockData.execution_payload_blob_gas_used:type_name -> google.protobuf.Int64Value
	17, // 9: beacon_slots.BlockData.execution_payload_excess_blob_gas:type_name -> google.protobuf.Int64Value
	17, // 10: beacon_slots.BlockData.execution_payload_gas_limit:type_name -> google.protobuf.Int64Value
	17, // 11: beacon_slots.BlockData.execution_payload_gas_used:type_name -> google.protobuf.Int64Value
	17, // 12: beacon_slots.BlockData.execution_payload_transactions_count:type_name -> google.protobuf.Int64Value
	17, // 13: beacon_slots.BlockData.execution_payload_transactions_total_bytes:type_name -> google.protobuf.Int64Value
	17, // 14: beacon_slots.BlockData.execution_payload_transactions_total_bytes_compressed:type_name -> google.protobuf.Int64Value
	4,  // 15: beacon_slots.AttestationsData.windows:type_name -> beacon_slots.AttestationWindow
	9,  // 16: beacon_slots.BlobTimingMap.timings:type_name -> beacon_slots.BlobTimingMap.TimingsEntry
	10, // 17: beacon_slots.Timings.block_seen:type_name -> beacon_slots.Timings.BlockSeenEntry
	11, // 18: beacon_slots.Timings.blob_seen:type_name -> beacon_slots.Timings.BlobSeenEntry
	12, // 19: beacon_slots.Timings.block_first_seen_p2p:type_name -> beacon_slots.Timings.BlockFirstSeenP2pEntry
	13, // 20: beacon_slots.Timings.blob_first_seen_p2p:type_name -> beacon_slots.Timings.BlobFirstSeenP2pEntry
	16, // 21: beacon_slots.BeaconSlotData.processed_at:type_name -> google.protobuf.Timestamp
	3,  // 22: beacon_slots.BeaconSlotData.block:type_name -> beacon_slots.BlockData
	2,  // 23: beacon_slots.BeaconSlotData.proposer:type_name -> beacon_slots.Proposer
	18, // 24: beacon_slots.BeaconSlotData.entity:type_name -> google.protobuf.StringValue
	14, // 25: beacon_slots.BeaconSlotData.nodes:type_name -> beacon_slots.BeaconSlotData.NodesEntry
	7,  // 26: beacon_slots.BeaconSlotData.timings:type_name -> beacon_slots.Timings
	5,  // 27: beacon_slots.BeaconSlotData.attestations:type_name -> beacon_slots.AttestationsData
	6,  // 28: beacon_slots.Timings.BlobSeenEntry.value:type_name -> beacon_slots.BlobTimingMap
	6,  // 29: beacon_slots.Timings.BlobFirstSeenP2pEntry.value:type_name -> beacon_slots.BlobTimingMap
	1,  // 30: beacon_slots.BeaconSlotData.NodesEntry.value:type_name -> beacon_slots.Node
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_pkg_server_proto_beacon_slots_beacon_slots_proto_init() }
func file_pkg_server_proto_beacon_slots_beacon_slots_proto_init() {
	if File_pkg_server_proto_beacon_slots_beacon_slots_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Proposer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*BlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*AttestationWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*AttestationsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*BlobTimingMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Timings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*BeaconSlotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_server_proto_beacon_slots_beacon_slots_proto_goTypes,
		DependencyIndexes: file_pkg_server_proto_beacon_slots_beacon_slots_proto_depIdxs,
		MessageInfos:      file_pkg_server_proto_beacon_slots_beacon_slots_proto_msgTypes,
	}.Build()
	File_pkg_server_proto_beacon_slots_beacon_slots_proto = out.File
	file_pkg_server_proto_beacon_slots_beacon_slots_proto_rawDesc = nil
	file_pkg_server_proto_beacon_slots_beacon_slots_proto_goTypes = nil
	file_pkg_server_proto_beacon_slots_beacon_slots_proto_depIdxs = nil
}
