syntax = "proto3";

package lab;

option go_package = "github.com/ethpandaops/lab/pkg/proto/lab";

// Service definitions
service LabService {
  // Get configuration for a specific network
  rpc GetFrontendConfig (GetFrontendConfigRequest) returns (GetFrontendConfigResponse);
}


// GetFrontendConfigRequest is the request for the GetFrontendConfig method
message GetFrontendConfigRequest {

}

// GetFrontendConfigResponse is the response for the GetFrontendConfig method
message GetFrontendConfigResponse {
  FrontendConfig config = 1;
}

// FrontendConfig is the frontend configuration for the lab. Data here is used to populate the frontend UI,
// and is exposed publically.
message FrontendConfig {
  // Config is the configuration for the lab
  message Config {
    Modules modules = 1;
    EthereumConfig ethereum = 2;
  }

  // Modules is the configuration for the modules
  message Modules {
    BeaconChainTimingsModule beacon_chain_timings = 1;
    XatuPublicContributorsModule xatu_public_contributors = 2;
    BeaconModule beacon = 3;
  }

  // BeaconChainTimingsModule represents the beacon chain timings module configuration
  message BeaconChainTimingsModule {
    repeated string networks = 1;
    repeated TimeWindow time_windows = 2;

    string path_prefix = 3;

    bool enabled = 4;
  }

  // XatuPublicContributorsModule represents the Xatu public contributors module configuration
  message XatuPublicContributorsModule {
    repeated string networks = 1;
    repeated TimeWindow time_windows = 2;

    string path_prefix = 3;

    bool enabled = 4;
  }

  // BeaconModule represents the beacon module configuration
  message BeaconModule {
    bool enabled = 1;
    string description = 2;
    string path_prefix = 3;
    map<string, BeaconNetworkConfig> networks = 4;
  }

  // TimeWindow represents a time window configuration
  message TimeWindow {
    string file = 1;
    string step = 2;
    string label = 3;
    string range = 4;
  }

  // BeaconNetworkConfig represents beacon network-specific configuration
  message BeaconNetworkConfig {
    int32 head_lag_slots = 1;
    int32 backlog_days = 2;
  }

  // EthereumConfig represents Ethereum-specific configuration
  message EthereumConfig {
    map<string, Network> networks = 1;
  }

  // Network represents an Ethereum network configuration
  message Network {
    int64 genesis_time = 1;
    ForkConfig forks = 2;
  }

  // ForkConfig represents fork configurations
  message ForkConfig {
    ConsensusConfig consensus = 1;
  }

  // ConsensusConfig represents consensus layer fork configurations
  message ConsensusConfig {
    ForkDetails electra = 1;
  }

  // ForkDetails represents details about a specific fork
  message ForkDetails {
    int64 epoch = 1;
    map<string, string> min_client_versions = 2;
  }

  Config config = 1;
}

message GetConfigResponse {
  message ModuleConfig {
    bool enabled = 1;
    string description = 2;
    string path_prefix = 3;
    repeated string networks = 4;
    repeated FrontendConfig.TimeWindow time_windows = 5;
  }
  map<string, ModuleConfig> modules = 1;
  FrontendConfig.EthereumConfig ethereum = 2;
}
