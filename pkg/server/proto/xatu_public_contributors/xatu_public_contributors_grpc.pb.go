// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/server/proto/xatu_public_contributors/xatu_public_contributors.proto

package xatu_public_contributors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	XatuPublicContributorsService_GetSummary_FullMethodName     = "/xatu_public_contributors.XatuPublicContributorsService/GetSummary"
	XatuPublicContributorsService_GetCountryData_FullMethodName = "/xatu_public_contributors.XatuPublicContributorsService/GetCountryData"
	XatuPublicContributorsService_GetUserData_FullMethodName    = "/xatu_public_contributors.XatuPublicContributorsService/GetUserData"
	XatuPublicContributorsService_GetTopNetworks_FullMethodName = "/xatu_public_contributors.XatuPublicContributorsService/GetTopNetworks"
)

// XatuPublicContributorsServiceClient is the client API for XatuPublicContributorsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The xatu_public_contributors service definition
type XatuPublicContributorsServiceClient interface {
	// Get summary data
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error)
	// Get country data
	GetCountryData(ctx context.Context, in *GetCountryDataRequest, opts ...grpc.CallOption) (*GetCountryDataResponse, error)
	// Get user data
	GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error)
	// Get top networks
	GetTopNetworks(ctx context.Context, in *GetTopNetworksRequest, opts ...grpc.CallOption) (*GetTopNetworksResponse, error)
}

type xatuPublicContributorsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewXatuPublicContributorsServiceClient(cc grpc.ClientConnInterface) XatuPublicContributorsServiceClient {
	return &xatuPublicContributorsServiceClient{cc}
}

func (c *xatuPublicContributorsServiceClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, XatuPublicContributorsService_GetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xatuPublicContributorsServiceClient) GetCountryData(ctx context.Context, in *GetCountryDataRequest, opts ...grpc.CallOption) (*GetCountryDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCountryDataResponse)
	err := c.cc.Invoke(ctx, XatuPublicContributorsService_GetCountryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xatuPublicContributorsServiceClient) GetUserData(ctx context.Context, in *GetUserDataRequest, opts ...grpc.CallOption) (*GetUserDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDataResponse)
	err := c.cc.Invoke(ctx, XatuPublicContributorsService_GetUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xatuPublicContributorsServiceClient) GetTopNetworks(ctx context.Context, in *GetTopNetworksRequest, opts ...grpc.CallOption) (*GetTopNetworksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopNetworksResponse)
	err := c.cc.Invoke(ctx, XatuPublicContributorsService_GetTopNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XatuPublicContributorsServiceServer is the server API for XatuPublicContributorsService service.
// All implementations must embed UnimplementedXatuPublicContributorsServiceServer
// for forward compatibility.
//
// The xatu_public_contributors service definition
type XatuPublicContributorsServiceServer interface {
	// Get summary data
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	// Get country data
	GetCountryData(context.Context, *GetCountryDataRequest) (*GetCountryDataResponse, error)
	// Get user data
	GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error)
	// Get top networks
	GetTopNetworks(context.Context, *GetTopNetworksRequest) (*GetTopNetworksResponse, error)
	mustEmbedUnimplementedXatuPublicContributorsServiceServer()
}

// UnimplementedXatuPublicContributorsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedXatuPublicContributorsServiceServer struct{}

func (UnimplementedXatuPublicContributorsServiceServer) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedXatuPublicContributorsServiceServer) GetCountryData(context.Context, *GetCountryDataRequest) (*GetCountryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountryData not implemented")
}
func (UnimplementedXatuPublicContributorsServiceServer) GetUserData(context.Context, *GetUserDataRequest) (*GetUserDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserData not implemented")
}
func (UnimplementedXatuPublicContributorsServiceServer) GetTopNetworks(context.Context, *GetTopNetworksRequest) (*GetTopNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopNetworks not implemented")
}
func (UnimplementedXatuPublicContributorsServiceServer) mustEmbedUnimplementedXatuPublicContributorsServiceServer() {
}
func (UnimplementedXatuPublicContributorsServiceServer) testEmbeddedByValue() {}

// UnsafeXatuPublicContributorsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XatuPublicContributorsServiceServer will
// result in compilation errors.
type UnsafeXatuPublicContributorsServiceServer interface {
	mustEmbedUnimplementedXatuPublicContributorsServiceServer()
}

func RegisterXatuPublicContributorsServiceServer(s grpc.ServiceRegistrar, srv XatuPublicContributorsServiceServer) {
	// If the following call pancis, it indicates UnimplementedXatuPublicContributorsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&XatuPublicContributorsService_ServiceDesc, srv)
}

func _XatuPublicContributorsService_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XatuPublicContributorsServiceServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XatuPublicContributorsService_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XatuPublicContributorsServiceServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XatuPublicContributorsService_GetCountryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XatuPublicContributorsServiceServer).GetCountryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XatuPublicContributorsService_GetCountryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XatuPublicContributorsServiceServer).GetCountryData(ctx, req.(*GetCountryDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XatuPublicContributorsService_GetUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XatuPublicContributorsServiceServer).GetUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XatuPublicContributorsService_GetUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XatuPublicContributorsServiceServer).GetUserData(ctx, req.(*GetUserDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XatuPublicContributorsService_GetTopNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XatuPublicContributorsServiceServer).GetTopNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XatuPublicContributorsService_GetTopNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XatuPublicContributorsServiceServer).GetTopNetworks(ctx, req.(*GetTopNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XatuPublicContributorsService_ServiceDesc is the grpc.ServiceDesc for XatuPublicContributorsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XatuPublicContributorsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xatu_public_contributors.XatuPublicContributorsService",
	HandlerType: (*XatuPublicContributorsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummary",
			Handler:    _XatuPublicContributorsService_GetSummary_Handler,
		},
		{
			MethodName: "GetCountryData",
			Handler:    _XatuPublicContributorsService_GetCountryData_Handler,
		},
		{
			MethodName: "GetUserData",
			Handler:    _XatuPublicContributorsService_GetUserData_Handler,
		},
		{
			MethodName: "GetTopNetworks",
			Handler:    _XatuPublicContributorsService_GetTopNetworks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server/proto/xatu_public_contributors/xatu_public_contributors.proto",
}
