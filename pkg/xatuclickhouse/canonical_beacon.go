// Code generated by generate_query_methods.go; DO NOT EDIT.

package xatuclickhouse

import (
	"context"
	"time"

	"github.com/ethpandaops/lab/pkg/xatuclickhouse/models"
)

// CanonicalBeaconBlobSidecarParams defines parameters for querying canonical_beacon_blob_sidecar table
type CanonicalBeaconBlobSidecarParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconBlobSidecar queries the canonical_beacon_blob_sidecar table
func (x *XatuClickhouse) CanonicalBeaconBlobSidecar(
	ctx context.Context,
	params CanonicalBeaconBlobSidecarParams,
) ([]models.CanonicalBeaconBlobSidecar, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconBlobSidecar{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconBlobSidecar, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconBlobSidecar)
	}

	return typedResults, nil
}

// CanonicalBeaconBlockParams defines parameters for querying canonical_beacon_block table
type CanonicalBeaconBlockParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconBlock queries the canonical_beacon_block table
func (x *XatuClickhouse) CanonicalBeaconBlock(
	ctx context.Context,
	params CanonicalBeaconBlockParams,
) ([]models.CanonicalBeaconBlock, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconBlock{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconBlock, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconBlock)
	}

	return typedResults, nil
}

// CanonicalBeaconBlockAttesterSlashingParams defines parameters for querying canonical_beacon_block_attester_slashing table
type CanonicalBeaconBlockAttesterSlashingParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconBlockAttesterSlashing queries the canonical_beacon_block_attester_slashing table
func (x *XatuClickhouse) CanonicalBeaconBlockAttesterSlashing(
	ctx context.Context,
	params CanonicalBeaconBlockAttesterSlashingParams,
) ([]models.CanonicalBeaconBlockAttesterSlashing, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconBlockAttesterSlashing{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconBlockAttesterSlashing, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconBlockAttesterSlashing)
	}

	return typedResults, nil
}

// CanonicalBeaconBlockBlsToExecutionChangeParams defines parameters for querying canonical_beacon_block_bls_to_execution_change table
type CanonicalBeaconBlockBlsToExecutionChangeParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconBlockBlsToExecutionChange queries the canonical_beacon_block_bls_to_execution_change table
func (x *XatuClickhouse) CanonicalBeaconBlockBlsToExecutionChange(
	ctx context.Context,
	params CanonicalBeaconBlockBlsToExecutionChangeParams,
) ([]models.CanonicalBeaconBlockBlsToExecutionChange, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconBlockBlsToExecutionChange{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconBlockBlsToExecutionChange, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconBlockBlsToExecutionChange)
	}

	return typedResults, nil
}

// CanonicalBeaconBlockDepositParams defines parameters for querying canonical_beacon_block_deposit table
type CanonicalBeaconBlockDepositParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconBlockDeposit queries the canonical_beacon_block_deposit table
func (x *XatuClickhouse) CanonicalBeaconBlockDeposit(
	ctx context.Context,
	params CanonicalBeaconBlockDepositParams,
) ([]models.CanonicalBeaconBlockDeposit, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconBlockDeposit{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconBlockDeposit, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconBlockDeposit)
	}

	return typedResults, nil
}

// CanonicalBeaconBlockExecutionTransactionParams defines parameters for querying canonical_beacon_block_execution_transaction table
type CanonicalBeaconBlockExecutionTransactionParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconBlockExecutionTransaction queries the canonical_beacon_block_execution_transaction table
func (x *XatuClickhouse) CanonicalBeaconBlockExecutionTransaction(
	ctx context.Context,
	params CanonicalBeaconBlockExecutionTransactionParams,
) ([]models.CanonicalBeaconBlockExecutionTransaction, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconBlockExecutionTransaction{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconBlockExecutionTransaction, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconBlockExecutionTransaction)
	}

	return typedResults, nil
}

// CanonicalBeaconBlockProposerSlashingParams defines parameters for querying canonical_beacon_block_proposer_slashing table
type CanonicalBeaconBlockProposerSlashingParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconBlockProposerSlashing queries the canonical_beacon_block_proposer_slashing table
func (x *XatuClickhouse) CanonicalBeaconBlockProposerSlashing(
	ctx context.Context,
	params CanonicalBeaconBlockProposerSlashingParams,
) ([]models.CanonicalBeaconBlockProposerSlashing, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconBlockProposerSlashing{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconBlockProposerSlashing, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconBlockProposerSlashing)
	}

	return typedResults, nil
}

// CanonicalBeaconBlockVoluntaryExitParams defines parameters for querying canonical_beacon_block_voluntary_exit table
type CanonicalBeaconBlockVoluntaryExitParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconBlockVoluntaryExit queries the canonical_beacon_block_voluntary_exit table
func (x *XatuClickhouse) CanonicalBeaconBlockVoluntaryExit(
	ctx context.Context,
	params CanonicalBeaconBlockVoluntaryExitParams,
) ([]models.CanonicalBeaconBlockVoluntaryExit, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconBlockVoluntaryExit{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconBlockVoluntaryExit, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconBlockVoluntaryExit)
	}

	return typedResults, nil
}

// CanonicalBeaconBlockWithdrawalParams defines parameters for querying canonical_beacon_block_withdrawal table
type CanonicalBeaconBlockWithdrawalParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconBlockWithdrawal queries the canonical_beacon_block_withdrawal table
func (x *XatuClickhouse) CanonicalBeaconBlockWithdrawal(
	ctx context.Context,
	params CanonicalBeaconBlockWithdrawalParams,
) ([]models.CanonicalBeaconBlockWithdrawal, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconBlockWithdrawal{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconBlockWithdrawal, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconBlockWithdrawal)
	}

	return typedResults, nil
}

// CanonicalBeaconCommitteeParams defines parameters for querying canonical_beacon_committee table
type CanonicalBeaconCommitteeParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	CommitteeIndex *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconCommittee queries the canonical_beacon_committee table
func (x *XatuClickhouse) CanonicalBeaconCommittee(
	ctx context.Context,
	params CanonicalBeaconCommitteeParams,
) ([]models.CanonicalBeaconCommittee, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconCommittee{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconCommittee, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconCommittee)
	}

	return typedResults, nil
}

// CanonicalBeaconElaboratedAttestationParams defines parameters for querying canonical_beacon_elaborated_attestation table
type CanonicalBeaconElaboratedAttestationParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockSlot *uint32
	StartBlockSlot *uint32
	EndBlockSlot *uint32
	BlockSlotStartDateTime *time.Time
	StartBlockSlotStartDateTime *time.Time
	EndBlockSlotStartDateTime *time.Time
	BlockEpoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconElaboratedAttestation queries the canonical_beacon_elaborated_attestation table
func (x *XatuClickhouse) CanonicalBeaconElaboratedAttestation(
	ctx context.Context,
	params CanonicalBeaconElaboratedAttestationParams,
) ([]models.CanonicalBeaconElaboratedAttestation, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconElaboratedAttestation{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconElaboratedAttestation, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconElaboratedAttestation)
	}

	return typedResults, nil
}

// CanonicalBeaconProposerDutyParams defines parameters for querying canonical_beacon_proposer_duty table
type CanonicalBeaconProposerDutyParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	Epoch *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconProposerDuty queries the canonical_beacon_proposer_duty table
func (x *XatuClickhouse) CanonicalBeaconProposerDuty(
	ctx context.Context,
	params CanonicalBeaconProposerDutyParams,
) ([]models.CanonicalBeaconProposerDuty, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconProposerDuty{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconProposerDuty, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconProposerDuty)
	}

	return typedResults, nil
}

// CanonicalBeaconValidatorsParams defines parameters for querying canonical_beacon_validators table
type CanonicalBeaconValidatorsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Epoch *uint32
	StartEpoch *uint32
	EndEpoch *uint32
	EpochStartDateTime *time.Time
	StartEpochStartDateTime *time.Time
	EndEpochStartDateTime *time.Time
	Index *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconValidators queries the canonical_beacon_validators table
func (x *XatuClickhouse) CanonicalBeaconValidators(
	ctx context.Context,
	params CanonicalBeaconValidatorsParams,
) ([]models.CanonicalBeaconValidators, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconValidators{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconValidators, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconValidators)
	}

	return typedResults, nil
}

// CanonicalBeaconValidatorsPubkeysParams defines parameters for querying canonical_beacon_validators_pubkeys table
type CanonicalBeaconValidatorsPubkeysParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Version *uint32
	StartVersion *uint32
	EndVersion *uint32
	Epoch *uint32
	StartEpoch *uint32
	EndEpoch *uint32
	EpochStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// CanonicalBeaconValidatorsPubkeys queries the canonical_beacon_validators_pubkeys table
func (x *XatuClickhouse) CanonicalBeaconValidatorsPubkeys(
	ctx context.Context,
	params CanonicalBeaconValidatorsPubkeysParams,
) ([]models.CanonicalBeaconValidatorsPubkeys, error) {
	newModel := func() Model {
		return &models.CanonicalBeaconValidatorsPubkeys{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalBeaconValidatorsPubkeys, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalBeaconValidatorsPubkeys)
	}

	return typedResults, nil
}

