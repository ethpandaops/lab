// Code generated by generate_query_methods.go; DO NOT EDIT.

package xatuclickhouse

import (
	"context"
	"time"

	"github.com/ethpandaops/lab/pkg/xatuclickhouse/models"
)

// CanonicalExecutionAddressAppearancesParams defines parameters for querying canonical_execution_address_appearances table
type CanonicalExecutionAddressAppearancesParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionHash *string
	InternalIndex *uint32
	StartInternalIndex *uint32
	EndInternalIndex *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionAddressAppearances queries the canonical_execution_address_appearances table
func (x *XatuClickhouse) CanonicalExecutionAddressAppearances(
	ctx context.Context,
	params CanonicalExecutionAddressAppearancesParams,
) ([]models.CanonicalExecutionAddressAppearances, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionAddressAppearances{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionAddressAppearances, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionAddressAppearances)
	}

	return typedResults, nil
}

// CanonicalExecutionBalanceDiffsParams defines parameters for querying canonical_execution_balance_diffs table
type CanonicalExecutionBalanceDiffsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionIndex *uint64
	StartTransactionIndex *uint64
	EndTransactionIndex *uint64
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionBalanceDiffs queries the canonical_execution_balance_diffs table
func (x *XatuClickhouse) CanonicalExecutionBalanceDiffs(
	ctx context.Context,
	params CanonicalExecutionBalanceDiffsParams,
) ([]models.CanonicalExecutionBalanceDiffs, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionBalanceDiffs{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionBalanceDiffs, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionBalanceDiffs)
	}

	return typedResults, nil
}

// CanonicalExecutionBalanceReadsParams defines parameters for querying canonical_execution_balance_reads table
type CanonicalExecutionBalanceReadsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionIndex *uint64
	StartTransactionIndex *uint64
	EndTransactionIndex *uint64
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionBalanceReads queries the canonical_execution_balance_reads table
func (x *XatuClickhouse) CanonicalExecutionBalanceReads(
	ctx context.Context,
	params CanonicalExecutionBalanceReadsParams,
) ([]models.CanonicalExecutionBalanceReads, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionBalanceReads{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionBalanceReads, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionBalanceReads)
	}

	return typedResults, nil
}

// CanonicalExecutionBlockParams defines parameters for querying canonical_execution_block table
type CanonicalExecutionBlockParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockDateTime *time.Time
	StartBlockDateTime *time.Time
	EndBlockDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	BlockHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionBlock queries the canonical_execution_block table
func (x *XatuClickhouse) CanonicalExecutionBlock(
	ctx context.Context,
	params CanonicalExecutionBlockParams,
) ([]models.CanonicalExecutionBlock, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionBlock{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionBlock, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionBlock)
	}

	return typedResults, nil
}

// CanonicalExecutionContractsParams defines parameters for querying canonical_execution_contracts table
type CanonicalExecutionContractsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint32
	StartBlockNumber *uint32
	EndBlockNumber *uint32
	TransactionHash *string
	InternalIndex *uint32
	StartInternalIndex *uint32
	EndInternalIndex *uint32
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionContracts queries the canonical_execution_contracts table
func (x *XatuClickhouse) CanonicalExecutionContracts(
	ctx context.Context,
	params CanonicalExecutionContractsParams,
) ([]models.CanonicalExecutionContracts, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionContracts{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionContracts, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionContracts)
	}

	return typedResults, nil
}

// CanonicalExecutionErc20TransfersParams defines parameters for querying canonical_execution_erc20_transfers table
type CanonicalExecutionErc20TransfersParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionIndex *uint64
	StartTransactionIndex *uint64
	EndTransactionIndex *uint64
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionErc20Transfers queries the canonical_execution_erc20_transfers table
func (x *XatuClickhouse) CanonicalExecutionErc20Transfers(
	ctx context.Context,
	params CanonicalExecutionErc20TransfersParams,
) ([]models.CanonicalExecutionErc20Transfers, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionErc20Transfers{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionErc20Transfers, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionErc20Transfers)
	}

	return typedResults, nil
}

// CanonicalExecutionErc721TransfersParams defines parameters for querying canonical_execution_erc721_transfers table
type CanonicalExecutionErc721TransfersParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionIndex *uint64
	StartTransactionIndex *uint64
	EndTransactionIndex *uint64
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionErc721Transfers queries the canonical_execution_erc721_transfers table
func (x *XatuClickhouse) CanonicalExecutionErc721Transfers(
	ctx context.Context,
	params CanonicalExecutionErc721TransfersParams,
) ([]models.CanonicalExecutionErc721Transfers, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionErc721Transfers{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionErc721Transfers, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionErc721Transfers)
	}

	return typedResults, nil
}

// CanonicalExecutionFourByteCountsParams defines parameters for querying canonical_execution_four_byte_counts table
type CanonicalExecutionFourByteCountsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionIndex *uint64
	StartTransactionIndex *uint64
	EndTransactionIndex *uint64
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionFourByteCounts queries the canonical_execution_four_byte_counts table
func (x *XatuClickhouse) CanonicalExecutionFourByteCounts(
	ctx context.Context,
	params CanonicalExecutionFourByteCountsParams,
) ([]models.CanonicalExecutionFourByteCounts, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionFourByteCounts{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionFourByteCounts, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionFourByteCounts)
	}

	return typedResults, nil
}

// CanonicalExecutionLogsParams defines parameters for querying canonical_execution_logs table
type CanonicalExecutionLogsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint32
	StartBlockNumber *uint32
	EndBlockNumber *uint32
	TransactionIndex *uint32
	StartTransactionIndex *uint32
	EndTransactionIndex *uint32
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionLogs queries the canonical_execution_logs table
func (x *XatuClickhouse) CanonicalExecutionLogs(
	ctx context.Context,
	params CanonicalExecutionLogsParams,
) ([]models.CanonicalExecutionLogs, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionLogs{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionLogs, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionLogs)
	}

	return typedResults, nil
}

// CanonicalExecutionNativeTransfersParams defines parameters for querying canonical_execution_native_transfers table
type CanonicalExecutionNativeTransfersParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionIndex *uint64
	StartTransactionIndex *uint64
	EndTransactionIndex *uint64
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionNativeTransfers queries the canonical_execution_native_transfers table
func (x *XatuClickhouse) CanonicalExecutionNativeTransfers(
	ctx context.Context,
	params CanonicalExecutionNativeTransfersParams,
) ([]models.CanonicalExecutionNativeTransfers, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionNativeTransfers{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionNativeTransfers, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionNativeTransfers)
	}

	return typedResults, nil
}

// CanonicalExecutionNonceDiffsParams defines parameters for querying canonical_execution_nonce_diffs table
type CanonicalExecutionNonceDiffsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionIndex *uint64
	StartTransactionIndex *uint64
	EndTransactionIndex *uint64
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionNonceDiffs queries the canonical_execution_nonce_diffs table
func (x *XatuClickhouse) CanonicalExecutionNonceDiffs(
	ctx context.Context,
	params CanonicalExecutionNonceDiffsParams,
) ([]models.CanonicalExecutionNonceDiffs, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionNonceDiffs{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionNonceDiffs, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionNonceDiffs)
	}

	return typedResults, nil
}

// CanonicalExecutionNonceReadsParams defines parameters for querying canonical_execution_nonce_reads table
type CanonicalExecutionNonceReadsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionIndex *uint64
	StartTransactionIndex *uint64
	EndTransactionIndex *uint64
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionNonceReads queries the canonical_execution_nonce_reads table
func (x *XatuClickhouse) CanonicalExecutionNonceReads(
	ctx context.Context,
	params CanonicalExecutionNonceReadsParams,
) ([]models.CanonicalExecutionNonceReads, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionNonceReads{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionNonceReads, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionNonceReads)
	}

	return typedResults, nil
}

// CanonicalExecutionStorageDiffsParams defines parameters for querying canonical_execution_storage_diffs table
type CanonicalExecutionStorageDiffsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint32
	StartBlockNumber *uint32
	EndBlockNumber *uint32
	TransactionIndex *uint32
	StartTransactionIndex *uint32
	EndTransactionIndex *uint32
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionStorageDiffs queries the canonical_execution_storage_diffs table
func (x *XatuClickhouse) CanonicalExecutionStorageDiffs(
	ctx context.Context,
	params CanonicalExecutionStorageDiffsParams,
) ([]models.CanonicalExecutionStorageDiffs, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionStorageDiffs{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionStorageDiffs, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionStorageDiffs)
	}

	return typedResults, nil
}

// CanonicalExecutionStorageReadsParams defines parameters for querying canonical_execution_storage_reads table
type CanonicalExecutionStorageReadsParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint32
	StartBlockNumber *uint32
	EndBlockNumber *uint32
	TransactionIndex *uint32
	StartTransactionIndex *uint32
	EndTransactionIndex *uint32
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionStorageReads queries the canonical_execution_storage_reads table
func (x *XatuClickhouse) CanonicalExecutionStorageReads(
	ctx context.Context,
	params CanonicalExecutionStorageReadsParams,
) ([]models.CanonicalExecutionStorageReads, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionStorageReads{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionStorageReads, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionStorageReads)
	}

	return typedResults, nil
}

// CanonicalExecutionTracesParams defines parameters for querying canonical_execution_traces table
type CanonicalExecutionTracesParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint32
	StartBlockNumber *uint32
	EndBlockNumber *uint32
	TransactionIndex *uint32
	StartTransactionIndex *uint32
	EndTransactionIndex *uint32
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionTraces queries the canonical_execution_traces table
func (x *XatuClickhouse) CanonicalExecutionTraces(
	ctx context.Context,
	params CanonicalExecutionTracesParams,
) ([]models.CanonicalExecutionTraces, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionTraces{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionTraces, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionTraces)
	}

	return typedResults, nil
}

// CanonicalExecutionTransactionParams defines parameters for querying canonical_execution_transaction table
type CanonicalExecutionTransactionParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	BlockNumber *uint64
	StartBlockNumber *uint64
	EndBlockNumber *uint64
	TransactionIndex *uint64
	StartTransactionIndex *uint64
	EndTransactionIndex *uint64
	TransactionHash *string
	Limit  *uint64
	Offset *uint64
}

// CanonicalExecutionTransaction queries the canonical_execution_transaction table
func (x *XatuClickhouse) CanonicalExecutionTransaction(
	ctx context.Context,
	params CanonicalExecutionTransactionParams,
) ([]models.CanonicalExecutionTransaction, error) {
	newModel := func() Model {
		return &models.CanonicalExecutionTransaction{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.CanonicalExecutionTransaction, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.CanonicalExecutionTransaction)
	}

	return typedResults, nil
}

