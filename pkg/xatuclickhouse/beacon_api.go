// Code generated by generate_query_methods.go; DO NOT EDIT.

package xatuclickhouse

import (
	"context"
	"time"

	"github.com/ethpandaops/lab/pkg/xatuclickhouse/models"
)

// BeaconApiEthV1BeaconCommitteeParams defines parameters for querying beacon_api_eth_v1_beacon_committee table
type BeaconApiEthV1BeaconCommitteeParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1BeaconCommittee queries the beacon_api_eth_v1_beacon_committee table
func (x *XatuClickhouse) BeaconApiEthV1BeaconCommittee(
	ctx context.Context,
	params BeaconApiEthV1BeaconCommitteeParams,
) ([]models.BeaconApiEthV1BeaconCommittee, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1BeaconCommittee{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1BeaconCommittee, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1BeaconCommittee)
	}

	return typedResults, nil
}

// BeaconApiEthV1EventsAttestationParams defines parameters for querying beacon_api_eth_v1_events_attestation table
type BeaconApiEthV1EventsAttestationParams struct {
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	StartSlotStartDateTime *time.Time
	EndSlotStartDateTime *time.Time
	PropagationSlotStartDiff *uint32
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1EventsAttestation queries the beacon_api_eth_v1_events_attestation table
func (x *XatuClickhouse) BeaconApiEthV1EventsAttestation(
	ctx context.Context,
	params BeaconApiEthV1EventsAttestationParams,
) ([]models.BeaconApiEthV1EventsAttestation, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1EventsAttestation{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1EventsAttestation, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1EventsAttestation)
	}

	return typedResults, nil
}

// BeaconApiEthV1EventsBlobSidecarParams defines parameters for querying beacon_api_eth_v1_events_blob_sidecar table
type BeaconApiEthV1EventsBlobSidecarParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1EventsBlobSidecar queries the beacon_api_eth_v1_events_blob_sidecar table
func (x *XatuClickhouse) BeaconApiEthV1EventsBlobSidecar(
	ctx context.Context,
	params BeaconApiEthV1EventsBlobSidecarParams,
) ([]models.BeaconApiEthV1EventsBlobSidecar, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1EventsBlobSidecar{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1EventsBlobSidecar, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1EventsBlobSidecar)
	}

	return typedResults, nil
}

// BeaconApiEthV1EventsBlockParams defines parameters for querying beacon_api_eth_v1_events_block table
type BeaconApiEthV1EventsBlockParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1EventsBlock queries the beacon_api_eth_v1_events_block table
func (x *XatuClickhouse) BeaconApiEthV1EventsBlock(
	ctx context.Context,
	params BeaconApiEthV1EventsBlockParams,
) ([]models.BeaconApiEthV1EventsBlock, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1EventsBlock{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1EventsBlock, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1EventsBlock)
	}

	return typedResults, nil
}

// BeaconApiEthV1EventsChainReorgParams defines parameters for querying beacon_api_eth_v1_events_chain_reorg table
type BeaconApiEthV1EventsChainReorgParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1EventsChainReorg queries the beacon_api_eth_v1_events_chain_reorg table
func (x *XatuClickhouse) BeaconApiEthV1EventsChainReorg(
	ctx context.Context,
	params BeaconApiEthV1EventsChainReorgParams,
) ([]models.BeaconApiEthV1EventsChainReorg, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1EventsChainReorg{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1EventsChainReorg, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1EventsChainReorg)
	}

	return typedResults, nil
}

// BeaconApiEthV1EventsContributionAndProofParams defines parameters for querying beacon_api_eth_v1_events_contribution_and_proof table
type BeaconApiEthV1EventsContributionAndProofParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	AggregatorIndex *uint32
	StartAggregatorIndex *uint32
	EndAggregatorIndex *uint32
	ContributionSlot *uint32
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1EventsContributionAndProof queries the beacon_api_eth_v1_events_contribution_and_proof table
func (x *XatuClickhouse) BeaconApiEthV1EventsContributionAndProof(
	ctx context.Context,
	params BeaconApiEthV1EventsContributionAndProofParams,
) ([]models.BeaconApiEthV1EventsContributionAndProof, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1EventsContributionAndProof{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1EventsContributionAndProof, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1EventsContributionAndProof)
	}

	return typedResults, nil
}

// BeaconApiEthV1EventsFinalizedCheckpointParams defines parameters for querying beacon_api_eth_v1_events_finalized_checkpoint table
type BeaconApiEthV1EventsFinalizedCheckpointParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Block *string
	State *string
	Epoch *uint32
	StartEpoch *uint32
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1EventsFinalizedCheckpoint queries the beacon_api_eth_v1_events_finalized_checkpoint table
func (x *XatuClickhouse) BeaconApiEthV1EventsFinalizedCheckpoint(
	ctx context.Context,
	params BeaconApiEthV1EventsFinalizedCheckpointParams,
) ([]models.BeaconApiEthV1EventsFinalizedCheckpoint, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1EventsFinalizedCheckpoint{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1EventsFinalizedCheckpoint, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1EventsFinalizedCheckpoint)
	}

	return typedResults, nil
}

// BeaconApiEthV1EventsHeadParams defines parameters for querying beacon_api_eth_v1_events_head table
type BeaconApiEthV1EventsHeadParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1EventsHead queries the beacon_api_eth_v1_events_head table
func (x *XatuClickhouse) BeaconApiEthV1EventsHead(
	ctx context.Context,
	params BeaconApiEthV1EventsHeadParams,
) ([]models.BeaconApiEthV1EventsHead, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1EventsHead{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1EventsHead, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1EventsHead)
	}

	return typedResults, nil
}

// BeaconApiEthV1EventsVoluntaryExitParams defines parameters for querying beacon_api_eth_v1_events_voluntary_exit table
type BeaconApiEthV1EventsVoluntaryExitParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Epoch *uint32
	StartEpoch *uint32
	EndEpoch *uint32
	EpochStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1EventsVoluntaryExit queries the beacon_api_eth_v1_events_voluntary_exit table
func (x *XatuClickhouse) BeaconApiEthV1EventsVoluntaryExit(
	ctx context.Context,
	params BeaconApiEthV1EventsVoluntaryExitParams,
) ([]models.BeaconApiEthV1EventsVoluntaryExit, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1EventsVoluntaryExit{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1EventsVoluntaryExit, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1EventsVoluntaryExit)
	}

	return typedResults, nil
}

// BeaconApiEthV1ProposerDutyParams defines parameters for querying beacon_api_eth_v1_proposer_duty table
type BeaconApiEthV1ProposerDutyParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1ProposerDuty queries the beacon_api_eth_v1_proposer_duty table
func (x *XatuClickhouse) BeaconApiEthV1ProposerDuty(
	ctx context.Context,
	params BeaconApiEthV1ProposerDutyParams,
) ([]models.BeaconApiEthV1ProposerDuty, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1ProposerDuty{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1ProposerDuty, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1ProposerDuty)
	}

	return typedResults, nil
}

// BeaconApiEthV1ValidatorAttestationDataParams defines parameters for querying beacon_api_eth_v1_validator_attestation_data table
type BeaconApiEthV1ValidatorAttestationDataParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV1ValidatorAttestationData queries the beacon_api_eth_v1_validator_attestation_data table
func (x *XatuClickhouse) BeaconApiEthV1ValidatorAttestationData(
	ctx context.Context,
	params BeaconApiEthV1ValidatorAttestationDataParams,
) ([]models.BeaconApiEthV1ValidatorAttestationData, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV1ValidatorAttestationData{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV1ValidatorAttestationData, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV1ValidatorAttestationData)
	}

	return typedResults, nil
}

// BeaconApiEthV2BeaconBlockParams defines parameters for querying beacon_api_eth_v2_beacon_block table
type BeaconApiEthV2BeaconBlockParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV2BeaconBlock queries the beacon_api_eth_v2_beacon_block table
func (x *XatuClickhouse) BeaconApiEthV2BeaconBlock(
	ctx context.Context,
	params BeaconApiEthV2BeaconBlockParams,
) ([]models.BeaconApiEthV2BeaconBlock, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV2BeaconBlock{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV2BeaconBlock, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV2BeaconBlock)
	}

	return typedResults, nil
}

// BeaconApiEthV3ValidatorBlockParams defines parameters for querying beacon_api_eth_v3_validator_block table
type BeaconApiEthV3ValidatorBlockParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// BeaconApiEthV3ValidatorBlock queries the beacon_api_eth_v3_validator_block table
func (x *XatuClickhouse) BeaconApiEthV3ValidatorBlock(
	ctx context.Context,
	params BeaconApiEthV3ValidatorBlockParams,
) ([]models.BeaconApiEthV3ValidatorBlock, error) {
	newModel := func() Model {
		return &models.BeaconApiEthV3ValidatorBlock{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.BeaconApiEthV3ValidatorBlock, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.BeaconApiEthV3ValidatorBlock)
	}

	return typedResults, nil
}

