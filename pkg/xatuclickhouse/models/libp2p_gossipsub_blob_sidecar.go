// Package models contains auto-generated Go structs for Xatu ClickHouse tables.
// DO NOT EDIT - Generated by generate_xatu_clickhouse_models.sh
package models

import (
    "time"
)

// Libp2pGossipsubBlobSidecar represents a row from the libp2p_gossipsub_blob_sidecar table.
type Libp2pGossipsubBlobSidecar struct {
    UpdatedDateTime    time.Time    `db:"updated_date_time" json:"updated_date_time"`
    Version    uint32    `db:"version" json:"version"`
    EventDateTime    time.Time    `db:"event_date_time" json:"event_date_time"`
    Slot    uint32    `db:"slot" json:"slot"`
    SlotStartDateTime    time.Time    `db:"slot_start_date_time" json:"slot_start_date_time"`
    Epoch    uint32    `db:"epoch" json:"epoch"`
    EpochStartDateTime    time.Time    `db:"epoch_start_date_time" json:"epoch_start_date_time"`
    WallclockSlot    uint32    `db:"wallclock_slot" json:"wallclock_slot"`
    WallclockSlotStartDateTime    time.Time    `db:"wallclock_slot_start_date_time" json:"wallclock_slot_start_date_time"`
    WallclockEpoch    uint32    `db:"wallclock_epoch" json:"wallclock_epoch"`
    WallclockEpochStartDateTime    time.Time    `db:"wallclock_epoch_start_date_time" json:"wallclock_epoch_start_date_time"`
    PropagationSlotStartDiff    uint32    `db:"propagation_slot_start_diff" json:"propagation_slot_start_diff"`
    ProposerIndex    uint32    `db:"proposer_index" json:"proposer_index"`
    BlobIndex    uint32    `db:"blob_index" json:"blob_index"`
    ParentRoot    string    `db:"parent_root" json:"parent_root"`
    StateRoot    string    `db:"state_root" json:"state_root"`
    PeerIdUniqueKey    int64    `db:"peer_id_unique_key" json:"peer_id_unique_key"`
    MessageId    string    `db:"message_id" json:"message_id"`
    MessageSize    uint32    `db:"message_size" json:"message_size"`
    TopicLayer    string    `db:"topic_layer" json:"topic_layer"`
    TopicForkDigestValue    string    `db:"topic_fork_digest_value" json:"topic_fork_digest_value"`
    TopicName    string    `db:"topic_name" json:"topic_name"`
    TopicEncoding    string    `db:"topic_encoding" json:"topic_encoding"`
    MetaClientName    string    `db:"meta_client_name" json:"meta_client_name"`
    MetaClientId    string    `db:"meta_client_id" json:"meta_client_id"`
    MetaClientVersion    string    `db:"meta_client_version" json:"meta_client_version"`
    MetaClientImplementation    string    `db:"meta_client_implementation" json:"meta_client_implementation"`
    MetaClientOs    string    `db:"meta_client_os" json:"meta_client_os"`
    MetaClientIp    *string    `db:"meta_client_ip" json:"meta_client_ip"`
    MetaClientGeoCity    string    `db:"meta_client_geo_city" json:"meta_client_geo_city"`
    MetaClientGeoCountry    string    `db:"meta_client_geo_country" json:"meta_client_geo_country"`
    MetaClientGeoCountryCode    string    `db:"meta_client_geo_country_code" json:"meta_client_geo_country_code"`
    MetaClientGeoContinentCode    string    `db:"meta_client_geo_continent_code" json:"meta_client_geo_continent_code"`
    MetaClientGeoLongitude    *string    `db:"meta_client_geo_longitude" json:"meta_client_geo_longitude"`
    MetaClientGeoLatitude    *string    `db:"meta_client_geo_latitude" json:"meta_client_geo_latitude"`
    MetaClientGeoAutonomousSystemNumber    *string    `db:"meta_client_geo_autonomous_system_number" json:"meta_client_geo_autonomous_system_number"`
    MetaClientGeoAutonomousSystemOrganization    *string    `db:"meta_client_geo_autonomous_system_organization" json:"meta_client_geo_autonomous_system_organization"`
    MetaNetworkId    int32    `db:"meta_network_id" json:"meta_network_id"`
    MetaNetworkName    string    `db:"meta_network_name" json:"meta_network_name"`
}

// TableName returns the table name for Libp2pGossipsubBlobSidecar.
func (m *Libp2pGossipsubBlobSidecar) TableName() string {
    return "libp2p_gossipsub_blob_sidecar"
}

// Libp2pGossipsubBlobSidecarParams represents query parameters for the libp2p_gossipsub_blob_sidecar table.
type Libp2pGossipsubBlobSidecarParams struct {
    // Common query parameters
    Limit  *uint64
    Offset *uint64

    // Table-specific parameters based on columns
    // Add specific query parameters here as needed
}
