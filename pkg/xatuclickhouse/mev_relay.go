// Code generated by generate_query_methods.go; DO NOT EDIT.

package xatuclickhouse

import (
	"context"
	"time"

	"github.com/ethpandaops/lab/pkg/xatuclickhouse/models"
)

// MevRelayBidTraceParams defines parameters for querying mev_relay_bid_trace table
type MevRelayBidTraceParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// MevRelayBidTrace queries the mev_relay_bid_trace table
func (x *XatuClickhouse) MevRelayBidTrace(
	ctx context.Context,
	params MevRelayBidTraceParams,
) ([]models.MevRelayBidTrace, error) {
	newModel := func() Model {
		return &models.MevRelayBidTrace{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.MevRelayBidTrace, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.MevRelayBidTrace)
	}

	return typedResults, nil
}

// MevRelayProposerPayloadDeliveredParams defines parameters for querying mev_relay_proposer_payload_delivered table
type MevRelayProposerPayloadDeliveredParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	StartSlot *uint32
	EndSlot *uint32
	SlotStartDateTime *time.Time
	Limit  *uint64
	Offset *uint64
}

// MevRelayProposerPayloadDelivered queries the mev_relay_proposer_payload_delivered table
func (x *XatuClickhouse) MevRelayProposerPayloadDelivered(
	ctx context.Context,
	params MevRelayProposerPayloadDeliveredParams,
) ([]models.MevRelayProposerPayloadDelivered, error) {
	newModel := func() Model {
		return &models.MevRelayProposerPayloadDelivered{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.MevRelayProposerPayloadDelivered, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.MevRelayProposerPayloadDelivered)
	}

	return typedResults, nil
}

// MevRelayValidatorRegistrationParams defines parameters for querying mev_relay_validator_registration table
type MevRelayValidatorRegistrationParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Timestamp *int64
	StartTimestamp *int64
	EndTimestamp *int64
	RelayName *string
	Limit  *uint64
	Offset *uint64
}

// MevRelayValidatorRegistration queries the mev_relay_validator_registration table
func (x *XatuClickhouse) MevRelayValidatorRegistration(
	ctx context.Context,
	params MevRelayValidatorRegistrationParams,
) ([]models.MevRelayValidatorRegistration, error) {
	newModel := func() Model {
		return &models.MevRelayValidatorRegistration{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.MevRelayValidatorRegistration, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.MevRelayValidatorRegistration)
	}

	return typedResults, nil
}

