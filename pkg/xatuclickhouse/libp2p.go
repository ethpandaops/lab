// Code generated by generate_query_methods.go; DO NOT EDIT.

package xatuclickhouse

import (
	"context"
	"time"

	"github.com/ethpandaops/lab/pkg/xatuclickhouse/models"
)

// Libp2pGossipsubBeaconAttestationParams defines parameters for querying libp2p_gossipsub_beacon_attestation table
type Libp2pGossipsubBeaconAttestationParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Version *uint32
	StartVersion *uint32
	EndVersion *uint32
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	Limit  *uint64
	Offset *uint64
}

// Libp2pGossipsubBeaconAttestation queries the libp2p_gossipsub_beacon_attestation table
func (x *XatuClickhouse) Libp2pGossipsubBeaconAttestation(
	ctx context.Context,
	params Libp2pGossipsubBeaconAttestationParams,
) ([]models.Libp2pGossipsubBeaconAttestation, error) {
	newModel := func() Model {
		return &models.Libp2pGossipsubBeaconAttestation{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.Libp2pGossipsubBeaconAttestation, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.Libp2pGossipsubBeaconAttestation)
	}

	return typedResults, nil
}

// Libp2pGossipsubBeaconBlockParams defines parameters for querying libp2p_gossipsub_beacon_block table
type Libp2pGossipsubBeaconBlockParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Version *uint32
	StartVersion *uint32
	EndVersion *uint32
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	Limit  *uint64
	Offset *uint64
}

// Libp2pGossipsubBeaconBlock queries the libp2p_gossipsub_beacon_block table
func (x *XatuClickhouse) Libp2pGossipsubBeaconBlock(
	ctx context.Context,
	params Libp2pGossipsubBeaconBlockParams,
) ([]models.Libp2pGossipsubBeaconBlock, error) {
	newModel := func() Model {
		return &models.Libp2pGossipsubBeaconBlock{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.Libp2pGossipsubBeaconBlock, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.Libp2pGossipsubBeaconBlock)
	}

	return typedResults, nil
}

// Libp2pGossipsubBlobSidecarParams defines parameters for querying libp2p_gossipsub_blob_sidecar table
type Libp2pGossipsubBlobSidecarParams struct {
	UpdatedDateTime *time.Time
	StartUpdatedDateTime *time.Time
	EndUpdatedDateTime *time.Time
	Version *uint32
	StartVersion *uint32
	EndVersion *uint32
	EventDateTime *time.Time
	StartEventDateTime *time.Time
	EndEventDateTime *time.Time
	Slot *uint32
	Limit  *uint64
	Offset *uint64
}

// Libp2pGossipsubBlobSidecar queries the libp2p_gossipsub_blob_sidecar table
func (x *XatuClickhouse) Libp2pGossipsubBlobSidecar(
	ctx context.Context,
	params Libp2pGossipsubBlobSidecarParams,
) ([]models.Libp2pGossipsubBlobSidecar, error) {
	newModel := func() Model {
		return &models.Libp2pGossipsubBlobSidecar{}
	}

	results, err := x.QueryWithModel(ctx, newModel, params)
	if err != nil {
		return nil, err
	}

	typedResults := make([]models.Libp2pGossipsubBlobSidecar, len(results))
	for i, result := range results {
		typedResults[i] = *result.(*models.Libp2pGossipsubBlobSidecar)
	}

	return typedResults, nil
}

