// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pkg/api/proto/lab_api.proto

package apipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LabAPI_GetStatus_FullMethodName  = "/api.LabAPI/GetStatus"
	LabAPI_GetSummary_FullMethodName = "/api.LabAPI/GetSummary"
)

// LabAPIClient is the client API for LabAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabAPIClient interface {
	// Example RPC to get status
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// Example RPC to get summary
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error)
}

type labAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLabAPIClient(cc grpc.ClientConnInterface) LabAPIClient {
	return &labAPIClient{cc}
}

func (c *labAPIClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, LabAPI_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labAPIClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, LabAPI_GetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabAPIServer is the server API for LabAPI service.
// All implementations must embed UnimplementedLabAPIServer
// for forward compatibility.
type LabAPIServer interface {
	// Example RPC to get status
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// Example RPC to get summary
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	mustEmbedUnimplementedLabAPIServer()
}

// UnimplementedLabAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLabAPIServer struct{}

func (UnimplementedLabAPIServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedLabAPIServer) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedLabAPIServer) mustEmbedUnimplementedLabAPIServer() {}
func (UnimplementedLabAPIServer) testEmbeddedByValue()                {}

// UnsafeLabAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabAPIServer will
// result in compilation errors.
type UnsafeLabAPIServer interface {
	mustEmbedUnimplementedLabAPIServer()
}

func RegisterLabAPIServer(s grpc.ServiceRegistrar, srv LabAPIServer) {
	// If the following call pancis, it indicates UnimplementedLabAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LabAPI_ServiceDesc, srv)
}

func _LabAPI_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabAPIServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabAPI_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabAPIServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabAPI_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabAPIServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabAPI_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabAPIServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabAPI_ServiceDesc is the grpc.ServiceDesc for LabAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.LabAPI",
	HandlerType: (*LabAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _LabAPI_GetStatus_Handler,
		},
		{
			MethodName: "GetSummary",
			Handler:    _LabAPI_GetSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/proto/lab_api.proto",
}
