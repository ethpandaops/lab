name: Go Test Report

on:
  workflow_run:
    workflows: [Go Test, Go Cross-Platform Test]
    types:
      - completed
  schedule:
    - cron: '0 6 * * 1' # Run every Monday at 6:00 UTC

permissions:
  contents: read
  security-events: write
  actions: read
  checks: write

jobs:
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    
    steps:
      - name: Download Artifacts
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            
            const testResults = allArtifacts.data.artifacts.filter(artifact => 
              artifact.name.includes('test-results') || 
              artifact.name.includes('coverage')
            );
            
            for (const artifact of testResults) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip'
              });
              
              const fs = require('fs');
              fs.writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
              console.log(`Downloaded ${artifact.name}.zip`);
            }
      
      - name: Extract Test Results
        run: |
          mkdir -p test-results
          for zip in *.zip; do
            if [ -f "$zip" ]; then
              unzip -d test-results "$zip"
              echo "Extracted $zip"
            fi
          done
      
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@3585e9575db828022551b4231f165eb59a0e74e3 # v5.6.2
        if: always()
        with:
          report_paths: 'test-results/**/*.xml'
          check_name: 'Go Test Results'
          fail_on_failure: false
      
      - name: Summarize Test Results
        if: always()
        run: |
          echo "# Go Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "## Test Outcomes" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "test-results" ]; then
            TOTAL_TESTS=$(grep -r "tests=" test-results | sed 's/.*tests="\([0-9]*\)".*/\1/' | awk '{s+=$1} END {print s}')
            FAILURES=$(grep -r "failures=" test-results | sed 's/.*failures="\([0-9]*\)".*/\1/' | awk '{s+=$1} END {print s}')
            SKIPPED=$(grep -r "skipped=" test-results | sed 's/.*skipped="\([0-9]*\)".*/\1/' | awk '{s+=$1} END {print s}')
            
            echo "* Total tests: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
            echo "* Failures: $FAILURES" >> $GITHUB_STEP_SUMMARY
            echo "* Skipped: $SKIPPED" >> $GITHUB_STEP_SUMMARY
            
            if [ "$FAILURES" -gt 0 ]; then
              echo "## Failed Tests" >> $GITHUB_STEP_SUMMARY
              grep -r "<failure" test-results --include="*.xml" | sed 's/.*<failure.*message="\([^"]*\)".*/- \1/' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No test results found" >> $GITHUB_STEP_SUMMARY
          fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.workflow_run.event == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        
      - name: Dependency Review
        uses: actions/dependency-review-action@89c73830747a68fcfdecb3b682ff934fc8c3abf1 # v4
        with:
          base-ref: ${{ github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0].base.ref || 'master' }}
          head-ref: ${{ github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.pull_requests[0].head.ref || 'HEAD' }}
          fail-on-severity: critical
          
  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: '1.24.x'
          check-latest: true
      
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest
        
      - name: Run govulncheck
        run: |
          cd backend
          $HOME/go/bin/govulncheck ./...
        
      - name: Run govulncheck with SARIF output
        run: |
          cd backend
          $HOME/go/bin/govulncheck -sarif ./... > govulncheck.sarif
        
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@51f77329afa6477de8c49fc9c7046c15b9a4e79d # v3.29.5
        with:
          sarif_file: backend/govulncheck.sarif
          category: govulncheck 