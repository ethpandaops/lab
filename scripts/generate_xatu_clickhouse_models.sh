#!/bin/bash
set -e

# Directory settings
OUTPUT_DIR="pkg/xatuclickhouse/models"
PACKAGE_NAME="models"

# External resources
CONFIG_URL="https://raw.githubusercontent.com/ethpandaops/xatu-data/master/config.yaml"
SCHEMA_RAW_URL="https://raw.githubusercontent.com/ethpandaops/xatu-data/master/schema/clickhouse/default"

echo "Setting up for xatuclickhouse model generation..."

# Check if required commands are available
for cmd in curl; do
    if ! command -v $cmd &> /dev/null; then
        echo "$cmd is required but not installed. Please install it and try again."
        exit 1
    fi
done

# Ensure output directory exists and is clean
mkdir -p "$OUTPUT_DIR"
rm -f "$OUTPUT_DIR"/*.go
touch "$OUTPUT_DIR"/.gitkeep

# Fetch config.yaml and extract table names
echo "Fetching table config from GitHub..."
CONFIG=$(curl -s "$CONFIG_URL")
TABLES=$(echo "$CONFIG" | grep -o 'name: [a-zA-Z0-9_]*' | sed 's/name: //' | grep -v "_local" | sort | uniq)

if [ -z "$TABLES" ]; then
    echo "No tables found in config.yaml"
    exit 1
fi

# Get a limited subset for testing (uncomment to limit)
# TABLES=$(echo "$TABLES" | head -3)

echo "Will generate models for these tables:"
echo "$TABLES"

# Function to convert snake_case to CamelCase
snake_to_camel() {
    echo "$1" | awk -F'_' '{
        result = "";
        for (i = 1; i <= NF; i++) {
            word = $i;
            if (word == "") continue;
            word = toupper(substr(word, 1, 1)) substr(word, 2);
            result = result word;
        }
        print result;
    }'
}

# Generate models for each table
for TABLE in $TABLES; do
    echo "Processing table: $TABLE"
    
    # Create the SQL schema URL
    SCHEMA_URL="$SCHEMA_RAW_URL/$TABLE.sql"
    
    echo "Fetching schema from: $SCHEMA_URL"
    
    # Fetch the SQL schema
    CREATE_TABLE=$(curl -s "$SCHEMA_URL")
    
    if [ -z "$CREATE_TABLE" ] || [[ "$CREATE_TABLE" == *"404: Not Found"* ]]; then
        echo "Failed to fetch schema for $TABLE, skipping..."
        continue
    fi
    
    # Convert table name to camel case for Go struct
    STRUCT_NAME=$(snake_to_camel "$TABLE")
    
    # Generate Go struct model based on schema
    echo "Generating model for $TABLE..."
    
    # Parse column definitions from CREATE TABLE statement
    COLUMNS=$(echo "$CREATE_TABLE" | grep -o '`[^`]*`[^,]*' | sed 's/`//g')
    
    # Generate Go struct file
    cat > "$OUTPUT_DIR/${TABLE}.go" << EOF
// Package models contains auto-generated Go structs for Xatu ClickHouse tables.
// DO NOT EDIT - Generated by generate_xatu_clickhouse_models.sh
package $PACKAGE_NAME

import (
    "time"
)

// $STRUCT_NAME represents a row from the $TABLE table.
type $STRUCT_NAME struct {
EOF
    
    # Process each column
    echo "$COLUMNS" | while IFS= read -r line; do
        if [ -z "$line" ]; then continue; fi
        
        COL_NAME=$(echo "$line" | awk '{print $1}')
        COL_TYPE=$(echo "$line" | awk '{print $2}' | sed 's/(.*//')
        
        # Convert column name to camel case for Go field
        FIELD_NAME=$(snake_to_camel "$COL_NAME")
        
        # Map ClickHouse type to Go type
        GO_TYPE="string"
        case "$COL_TYPE" in
            DateTime*|Date*)
                GO_TYPE="time.Time"
                ;;
            UInt8|UInt16|UInt32)
                GO_TYPE="uint32"
                ;;
            UInt64)
                GO_TYPE="uint64"
                ;;
            UInt128|UInt256)
                GO_TYPE="string"
                ;;
            Int8|Int16|Int32)
                GO_TYPE="int32"
                ;;
            Int64)
                GO_TYPE="int64"
                ;;
            Float32|Float64)
                GO_TYPE="float64"
                ;;
            Bool|Boolean)
                GO_TYPE="bool"
                ;;
            Array*)
                GO_TYPE="[]string"
                ;;
            Map*)
                GO_TYPE="map[string]string"
                ;;
            FixedString*)
                GO_TYPE="string"
                ;;
            Nullable*)
                # Extract the inner type
                INNER_TYPE=$(echo "$COL_TYPE" | sed -E 's/Nullable\((.*)\)/\1/')
                case "$INNER_TYPE" in
                    UInt*|Int*)
                        GO_TYPE="*int64"
                        ;;
                    Float*)
                        GO_TYPE="*float64"
                        ;;
                    FixedString*)
                        GO_TYPE="*string"
                        ;;
                    *)
                        GO_TYPE="*string"
                        ;;
                esac
                ;;
        esac
        
        # Add field to struct
        echo "    $FIELD_NAME    $GO_TYPE    \`db:\"$COL_NAME\" json:\"$COL_NAME\"\`" >> "$OUTPUT_DIR/${TABLE}.go"
    done
    
    # Close the struct and add helper methods
    cat >> "$OUTPUT_DIR/${TABLE}.go" << EOF
}

// TableName returns the table name for $STRUCT_NAME.
func (m *$STRUCT_NAME) TableName() string {
    return "$TABLE"
}

// ${STRUCT_NAME}Params represents query parameters for the $TABLE table.
type ${STRUCT_NAME}Params struct {
    // Common query parameters
    Limit  *uint64
    Offset *uint64

    // Table-specific parameters based on columns
    // Add specific query parameters here as needed
}
EOF

    echo "Generated model for $TABLE"
done


# Generate codegen for query methods
echo "Generating codegen for query methods..."
if [ -f "pkg/xatuclickhouse/codegen/generate.sh" ]; then
    sh pkg/xatuclickhouse/codegen/generate.sh
else
    echo "Codegen script not found at pkg/xatuclickhouse/codegen/generate.sh - skipping query method generation"
fi

echo "Done! Generated Go structs for Xatu ClickHouse tables in $OUTPUT_DIR" 