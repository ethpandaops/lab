syntax = "proto3";

package config;

option go_package = "github.com/ethpandaops/lab/backend/pkg/server/proto/config";

// ConfigService provides configuration for the lab application.
// This replaces the legacy GetConfig from the lab service.
service ConfigService {
  // GetConfig returns the complete frontend configuration including networks and modules.
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);
  // GetExperimentConfig returns a single experiment's configuration with data availability.
  rpc GetExperimentConfig(GetExperimentConfigRequest) returns (GetExperimentConfigResponse);
}

// GetConfigRequest is empty for now but allows future expansion
message GetConfigRequest {}

// GetConfigResponse contains the complete configuration
message GetConfigResponse {
  // The main configuration object
  FrontendConfig config = 1;
}

// FrontendConfig represents the complete frontend configuration
message FrontendConfig {
  // Ethereum configuration including networks
  EthereumConfig ethereum = 1;
  // Module configurations
  ModulesConfig modules = 2;
  // Experiments configuration
  ExperimentsConfig experiments = 3;
}

// EthereumConfig contains Ethereum-related configuration
message EthereumConfig {
  // Map of network name to network configuration
  map<string, NetworkConfig> networks = 1;
}

// NetworkConfig represents configuration for a single network
message NetworkConfig {
  // Network name
  string name = 1;
  // Network status
  string status = 2;
  // Chain ID
  int64 chain_id = 3;
  // Description
  string description = 4;
  // Genesis time as Unix timestamp
  int64 genesis_time = 5;
  // Service URLs
  map<string, string> service_urls = 6;
  // Fork information
  ForkConfig forks = 7;
  // Last updated timestamp
  string last_updated = 8;
}

// ForkConfig contains fork information
message ForkConfig {
  // Consensus layer forks
  ConsensusForks consensus = 1;
}

// ConsensusForks contains consensus layer fork information
message ConsensusForks {
  // Electra fork info
  ForkInfo electra = 1;
}

// ForkInfo contains information about a specific fork
message ForkInfo {
  // Epoch when the fork activates
  int64 epoch = 1;
  // Minimum client versions
  map<string, string> min_client_versions = 2;
}

// ModulesConfig contains all module configurations
message ModulesConfig {
  // Beacon chain timings module
  BeaconChainTimingsModule beacon_chain_timings = 1;
  // Beacon module
  BeaconModule beacon = 3;
}

// BeaconChainTimingsModule configuration
message BeaconChainTimingsModule {
  // List of networks this module supports
  repeated string networks = 1;
  // Time windows configuration
  repeated TimeWindow time_windows = 2;
  // Path prefix for data files
  string path_prefix = 3;
}

// BeaconModule configuration
message BeaconModule {
  // Whether the module is enabled
  bool enabled = 1;
  // Description
  string description = 2;
  // Path prefix for data files
  string path_prefix = 3;
  // Per-network configuration
  map<string, BeaconNetworkConfig> networks = 4;
}

// BeaconNetworkConfig contains beacon-specific network configuration
message BeaconNetworkConfig {
  // Head lag slots
  int32 head_lag_slots = 1;
  // Backlog days
  int32 backlog_days = 2;
}

// TimeWindow represents a time window configuration
message TimeWindow {
  // File identifier
  string file = 1;
  // Step interval
  string step = 2;
  // Time range
  string range = 3;
  // Display label
  string label = 4;
}

// ExperimentsConfig contains all experiments configuration
message ExperimentsConfig {
  // List of available experiments
  repeated ExperimentConfig experiments = 1;
}

// ExperimentConfig represents a single experiment
message ExperimentConfig {
  // Unique identifier for the experiment
  string id = 1;
  // Whether this experiment is enabled
  bool enabled = 2;
  // Networks this experiment supports
  repeated string networks = 3;
  // Data availability per network
  map<string, ExperimentDataAvailability> data_availability = 4;
}

// ExperimentDataAvailability contains data availability information for an experiment on a specific network
message ExperimentDataAvailability {
  // Unix timestamp (seconds) of the earliest available data
  int64 available_from_timestamp = 1;
  // Unix timestamp (seconds) of the latest available data
  int64 available_until_timestamp = 2;
  // Earliest available slot number
  uint64 min_slot = 3;
  // Latest available slot number
  uint64 max_slot = 4;
  // Safe slot for "live" view (head - 2 slots)
  uint64 safe_slot = 5;
  // The current head slot of the network
  uint64 head_slot = 6;
  // Indicates if data is available (overlapping interval exists)
  bool has_data = 7;
}

// GetExperimentConfigRequest defines the request for getting a single experiment's configuration.
message GetExperimentConfigRequest {
  // The experiment ID to get configuration for
  string experiment_id = 1;
}

// GetExperimentConfigResponse returns a single experiment's full configuration with data availability.
message GetExperimentConfigResponse {
  // The experiment configuration with data availability
  ExperimentConfig experiment = 1;
}