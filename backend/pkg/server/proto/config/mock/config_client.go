// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/lab/backend/pkg/server/proto/config (interfaces: ConfigServiceClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination config_client.go github.com/ethpandaops/lab/backend/pkg/server/proto/config ConfigServiceClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	config "github.com/ethpandaops/lab/backend/pkg/server/proto/config"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockConfigServiceClient is a mock of ConfigServiceClient interface.
type MockConfigServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockConfigServiceClientMockRecorder
	isgomock struct{}
}

// MockConfigServiceClientMockRecorder is the mock recorder for MockConfigServiceClient.
type MockConfigServiceClientMockRecorder struct {
	mock *MockConfigServiceClient
}

// NewMockConfigServiceClient creates a new mock instance.
func NewMockConfigServiceClient(ctrl *gomock.Controller) *MockConfigServiceClient {
	mock := &MockConfigServiceClient{ctrl: ctrl}
	mock.recorder = &MockConfigServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigServiceClient) EXPECT() *MockConfigServiceClientMockRecorder {
	return m.recorder
}

// GetConfig mocks base method.
func (m *MockConfigServiceClient) GetConfig(ctx context.Context, in *config.GetConfigRequest, opts ...grpc.CallOption) (*config.GetConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfig", varargs...)
	ret0, _ := ret[0].(*config.GetConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigServiceClientMockRecorder) GetConfig(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigServiceClient)(nil).GetConfig), varargs...)
}

// GetExperimentConfig mocks base method.
func (m *MockConfigServiceClient) GetExperimentConfig(ctx context.Context, in *config.GetExperimentConfigRequest, opts ...grpc.CallOption) (*config.GetExperimentConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperimentConfig", varargs...)
	ret0, _ := ret[0].(*config.GetExperimentConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperimentConfig indicates an expected call of GetExperimentConfig.
func (mr *MockConfigServiceClientMockRecorder) GetExperimentConfig(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperimentConfig", reflect.TypeOf((*MockConfigServiceClient)(nil).GetExperimentConfig), varargs...)
}

// GetNetworkExperimentConfig mocks base method.
func (m *MockConfigServiceClient) GetNetworkExperimentConfig(ctx context.Context, in *config.GetNetworkExperimentConfigRequest, opts ...grpc.CallOption) (*config.GetExperimentConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNetworkExperimentConfig", varargs...)
	ret0, _ := ret[0].(*config.GetExperimentConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkExperimentConfig indicates an expected call of GetNetworkExperimentConfig.
func (mr *MockConfigServiceClientMockRecorder) GetNetworkExperimentConfig(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkExperimentConfig", reflect.TypeOf((*MockConfigServiceClient)(nil).GetNetworkExperimentConfig), varargs...)
}
