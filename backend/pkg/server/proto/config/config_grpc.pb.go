// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: backend/pkg/server/proto/config/config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ConfigService_GetConfig_FullMethodName                  = "/config.ConfigService/GetConfig"
	ConfigService_GetExperimentConfig_FullMethodName        = "/config.ConfigService/GetExperimentConfig"
	ConfigService_GetNetworkExperimentConfig_FullMethodName = "/config.ConfigService/GetNetworkExperimentConfig"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ConfigService provides configuration for the lab application.
// This replaces the legacy GetConfig from the lab service.
type ConfigServiceClient interface {
	// GetConfig returns the complete frontend configuration including networks and modules.
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error)
	// GetExperimentConfig returns a single experiment's configuration with data availability.
	GetExperimentConfig(ctx context.Context, in *GetExperimentConfigRequest, opts ...grpc.CallOption) (*GetExperimentConfigResponse, error)
	// GetNetworkExperimentConfig returns a single experiment's configuration with data availability for a specific network.
	GetNetworkExperimentConfig(ctx context.Context, in *GetNetworkExperimentConfigRequest, opts ...grpc.CallOption) (*GetExperimentConfigResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetExperimentConfig(ctx context.Context, in *GetExperimentConfigRequest, opts ...grpc.CallOption) (*GetExperimentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExperimentConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetExperimentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetNetworkExperimentConfig(ctx context.Context, in *GetNetworkExperimentConfigRequest, opts ...grpc.CallOption) (*GetExperimentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExperimentConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetNetworkExperimentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility
//
// ConfigService provides configuration for the lab application.
// This replaces the legacy GetConfig from the lab service.
type ConfigServiceServer interface {
	// GetConfig returns the complete frontend configuration including networks and modules.
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error)
	// GetExperimentConfig returns a single experiment's configuration with data availability.
	GetExperimentConfig(context.Context, *GetExperimentConfigRequest) (*GetExperimentConfigResponse, error)
	// GetNetworkExperimentConfig returns a single experiment's configuration with data availability for a specific network.
	GetNetworkExperimentConfig(context.Context, *GetNetworkExperimentConfigRequest) (*GetExperimentConfigResponse, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetExperimentConfig(context.Context, *GetExperimentConfigRequest) (*GetExperimentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetNetworkExperimentConfig(context.Context, *GetNetworkExperimentConfigRequest) (*GetExperimentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkExperimentConfig not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetExperimentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetExperimentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetExperimentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetExperimentConfig(ctx, req.(*GetExperimentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetNetworkExperimentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkExperimentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetNetworkExperimentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetNetworkExperimentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetNetworkExperimentConfig(ctx, req.(*GetNetworkExperimentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _ConfigService_GetConfig_Handler,
		},
		{
			MethodName: "GetExperimentConfig",
			Handler:    _ConfigService_GetExperimentConfig_Handler,
		},
		{
			MethodName: "GetNetworkExperimentConfig",
			Handler:    _ConfigService_GetNetworkExperimentConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/pkg/server/proto/config/config.proto",
}
