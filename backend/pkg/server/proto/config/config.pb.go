// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: backend/pkg/server/proto/config/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetConfigRequest is empty for now but allows future expansion
type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{0}
}

// GetConfigResponse contains the complete configuration
type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The main configuration object
	Config *FrontendConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *GetConfigResponse) GetConfig() *FrontendConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// FrontendConfig represents the complete frontend configuration
type FrontendConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ethereum configuration including networks
	Ethereum *EthereumConfig `protobuf:"bytes,1,opt,name=ethereum,proto3" json:"ethereum,omitempty"`
	// Module configurations
	Modules *ModulesConfig `protobuf:"bytes,2,opt,name=modules,proto3" json:"modules,omitempty"`
	// Experiments configuration
	Experiments *ExperimentsConfig `protobuf:"bytes,3,opt,name=experiments,proto3" json:"experiments,omitempty"`
}

func (x *FrontendConfig) Reset() {
	*x = FrontendConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrontendConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrontendConfig) ProtoMessage() {}

func (x *FrontendConfig) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrontendConfig.ProtoReflect.Descriptor instead.
func (*FrontendConfig) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *FrontendConfig) GetEthereum() *EthereumConfig {
	if x != nil {
		return x.Ethereum
	}
	return nil
}

func (x *FrontendConfig) GetModules() *ModulesConfig {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *FrontendConfig) GetExperiments() *ExperimentsConfig {
	if x != nil {
		return x.Experiments
	}
	return nil
}

// EthereumConfig contains Ethereum-related configuration
type EthereumConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of network name to network configuration
	Networks map[string]*NetworkConfig `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EthereumConfig) Reset() {
	*x = EthereumConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthereumConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthereumConfig) ProtoMessage() {}

func (x *EthereumConfig) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthereumConfig.ProtoReflect.Descriptor instead.
func (*EthereumConfig) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *EthereumConfig) GetNetworks() map[string]*NetworkConfig {
	if x != nil {
		return x.Networks
	}
	return nil
}

// NetworkConfig represents configuration for a single network
type NetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Network status
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Chain ID
	ChainId int64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Genesis time as Unix timestamp
	GenesisTime int64 `protobuf:"varint,5,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	// Service URLs
	ServiceUrls map[string]string `protobuf:"bytes,6,rep,name=service_urls,json=serviceUrls,proto3" json:"service_urls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Fork information
	Forks *ForkConfig `protobuf:"bytes,7,opt,name=forks,proto3" json:"forks,omitempty"`
	// Last updated timestamp
	LastUpdated string `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
}

func (x *NetworkConfig) Reset() {
	*x = NetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkConfig) ProtoMessage() {}

func (x *NetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkConfig.ProtoReflect.Descriptor instead.
func (*NetworkConfig) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *NetworkConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkConfig) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *NetworkConfig) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *NetworkConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NetworkConfig) GetGenesisTime() int64 {
	if x != nil {
		return x.GenesisTime
	}
	return 0
}

func (x *NetworkConfig) GetServiceUrls() map[string]string {
	if x != nil {
		return x.ServiceUrls
	}
	return nil
}

func (x *NetworkConfig) GetForks() *ForkConfig {
	if x != nil {
		return x.Forks
	}
	return nil
}

func (x *NetworkConfig) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

// ForkConfig contains fork information
type ForkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Consensus layer forks
	Consensus *ConsensusForks `protobuf:"bytes,1,opt,name=consensus,proto3" json:"consensus,omitempty"`
}

func (x *ForkConfig) Reset() {
	*x = ForkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkConfig) ProtoMessage() {}

func (x *ForkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkConfig.ProtoReflect.Descriptor instead.
func (*ForkConfig) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *ForkConfig) GetConsensus() *ConsensusForks {
	if x != nil {
		return x.Consensus
	}
	return nil
}

// ConsensusForks contains consensus layer fork information
type ConsensusForks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Electra fork info
	Electra *ForkInfo `protobuf:"bytes,1,opt,name=electra,proto3" json:"electra,omitempty"`
}

func (x *ConsensusForks) Reset() {
	*x = ConsensusForks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusForks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusForks) ProtoMessage() {}

func (x *ConsensusForks) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusForks.ProtoReflect.Descriptor instead.
func (*ConsensusForks) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *ConsensusForks) GetElectra() *ForkInfo {
	if x != nil {
		return x.Electra
	}
	return nil
}

// ForkInfo contains information about a specific fork
type ForkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch when the fork activates
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Minimum client versions
	MinClientVersions map[string]string `protobuf:"bytes,2,rep,name=min_client_versions,json=minClientVersions,proto3" json:"min_client_versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ForkInfo) Reset() {
	*x = ForkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkInfo) ProtoMessage() {}

func (x *ForkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkInfo.ProtoReflect.Descriptor instead.
func (*ForkInfo) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *ForkInfo) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ForkInfo) GetMinClientVersions() map[string]string {
	if x != nil {
		return x.MinClientVersions
	}
	return nil
}

// ModulesConfig contains all module configurations
type ModulesConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Beacon chain timings module
	BeaconChainTimings *BeaconChainTimingsModule `protobuf:"bytes,1,opt,name=beacon_chain_timings,json=beaconChainTimings,proto3" json:"beacon_chain_timings,omitempty"`
	// Beacon module
	Beacon *BeaconModule `protobuf:"bytes,3,opt,name=beacon,proto3" json:"beacon,omitempty"`
}

func (x *ModulesConfig) Reset() {
	*x = ModulesConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModulesConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModulesConfig) ProtoMessage() {}

func (x *ModulesConfig) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModulesConfig.ProtoReflect.Descriptor instead.
func (*ModulesConfig) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *ModulesConfig) GetBeaconChainTimings() *BeaconChainTimingsModule {
	if x != nil {
		return x.BeaconChainTimings
	}
	return nil
}

func (x *ModulesConfig) GetBeacon() *BeaconModule {
	if x != nil {
		return x.Beacon
	}
	return nil
}

// BeaconChainTimingsModule configuration
type BeaconChainTimingsModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of networks this module supports
	Networks []string `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	// Time windows configuration
	TimeWindows []*TimeWindow `protobuf:"bytes,2,rep,name=time_windows,json=timeWindows,proto3" json:"time_windows,omitempty"`
	// Path prefix for data files
	PathPrefix string `protobuf:"bytes,3,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
}

func (x *BeaconChainTimingsModule) Reset() {
	*x = BeaconChainTimingsModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconChainTimingsModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconChainTimingsModule) ProtoMessage() {}

func (x *BeaconChainTimingsModule) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconChainTimingsModule.ProtoReflect.Descriptor instead.
func (*BeaconChainTimingsModule) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *BeaconChainTimingsModule) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *BeaconChainTimingsModule) GetTimeWindows() []*TimeWindow {
	if x != nil {
		return x.TimeWindows
	}
	return nil
}

func (x *BeaconChainTimingsModule) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

// BeaconModule configuration
type BeaconModule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the module is enabled
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Path prefix for data files
	PathPrefix string `protobuf:"bytes,3,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	// Per-network configuration
	Networks map[string]*BeaconNetworkConfig `protobuf:"bytes,4,rep,name=networks,proto3" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BeaconModule) Reset() {
	*x = BeaconModule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconModule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconModule) ProtoMessage() {}

func (x *BeaconModule) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconModule.ProtoReflect.Descriptor instead.
func (*BeaconModule) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *BeaconModule) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BeaconModule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BeaconModule) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *BeaconModule) GetNetworks() map[string]*BeaconNetworkConfig {
	if x != nil {
		return x.Networks
	}
	return nil
}

// BeaconNetworkConfig contains beacon-specific network configuration
type BeaconNetworkConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Head lag slots
	HeadLagSlots int32 `protobuf:"varint,1,opt,name=head_lag_slots,json=headLagSlots,proto3" json:"head_lag_slots,omitempty"`
	// Backlog days
	BacklogDays int32 `protobuf:"varint,2,opt,name=backlog_days,json=backlogDays,proto3" json:"backlog_days,omitempty"`
}

func (x *BeaconNetworkConfig) Reset() {
	*x = BeaconNetworkConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconNetworkConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconNetworkConfig) ProtoMessage() {}

func (x *BeaconNetworkConfig) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconNetworkConfig.ProtoReflect.Descriptor instead.
func (*BeaconNetworkConfig) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *BeaconNetworkConfig) GetHeadLagSlots() int32 {
	if x != nil {
		return x.HeadLagSlots
	}
	return 0
}

func (x *BeaconNetworkConfig) GetBacklogDays() int32 {
	if x != nil {
		return x.BacklogDays
	}
	return 0
}

// TimeWindow represents a time window configuration
type TimeWindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File identifier
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// Step interval
	Step string `protobuf:"bytes,2,opt,name=step,proto3" json:"step,omitempty"`
	// Time range
	Range string `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	// Display label
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *TimeWindow) Reset() {
	*x = TimeWindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeWindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeWindow) ProtoMessage() {}

func (x *TimeWindow) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeWindow.ProtoReflect.Descriptor instead.
func (*TimeWindow) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{12}
}

func (x *TimeWindow) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *TimeWindow) GetStep() string {
	if x != nil {
		return x.Step
	}
	return ""
}

func (x *TimeWindow) GetRange() string {
	if x != nil {
		return x.Range
	}
	return ""
}

func (x *TimeWindow) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// ExperimentsConfig contains all experiments configuration
type ExperimentsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of available experiments
	Experiments []*ExperimentConfig `protobuf:"bytes,1,rep,name=experiments,proto3" json:"experiments,omitempty"`
}

func (x *ExperimentsConfig) Reset() {
	*x = ExperimentsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentsConfig) ProtoMessage() {}

func (x *ExperimentsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentsConfig.ProtoReflect.Descriptor instead.
func (*ExperimentsConfig) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{13}
}

func (x *ExperimentsConfig) GetExperiments() []*ExperimentConfig {
	if x != nil {
		return x.Experiments
	}
	return nil
}

// ExperimentConfig represents a single experiment
type ExperimentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the experiment
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Whether this experiment is enabled
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Networks this experiment supports
	Networks []string `protobuf:"bytes,3,rep,name=networks,proto3" json:"networks,omitempty"`
	// Data availability per network
	DataAvailability map[string]*ExperimentDataAvailability `protobuf:"bytes,4,rep,name=data_availability,json=dataAvailability,proto3" json:"data_availability,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExperimentConfig) Reset() {
	*x = ExperimentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentConfig) ProtoMessage() {}

func (x *ExperimentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentConfig.ProtoReflect.Descriptor instead.
func (*ExperimentConfig) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{14}
}

func (x *ExperimentConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExperimentConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ExperimentConfig) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ExperimentConfig) GetDataAvailability() map[string]*ExperimentDataAvailability {
	if x != nil {
		return x.DataAvailability
	}
	return nil
}

// ExperimentDataAvailability contains data availability information for an experiment on a specific network
type ExperimentDataAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix timestamp (seconds) of the earliest available data
	AvailableFromTimestamp int64 `protobuf:"varint,1,opt,name=available_from_timestamp,json=availableFromTimestamp,proto3" json:"available_from_timestamp,omitempty"`
	// Unix timestamp (seconds) of the latest available data
	AvailableUntilTimestamp int64 `protobuf:"varint,2,opt,name=available_until_timestamp,json=availableUntilTimestamp,proto3" json:"available_until_timestamp,omitempty"`
	// Earliest available slot number
	MinSlot uint64 `protobuf:"varint,3,opt,name=min_slot,json=minSlot,proto3" json:"min_slot,omitempty"`
	// Latest available slot number
	MaxSlot uint64 `protobuf:"varint,4,opt,name=max_slot,json=maxSlot,proto3" json:"max_slot,omitempty"`
	// Safe slot for "live" view (head - 2 slots)
	SafeSlot uint64 `protobuf:"varint,5,opt,name=safe_slot,json=safeSlot,proto3" json:"safe_slot,omitempty"`
	// The current head slot of the network
	HeadSlot uint64 `protobuf:"varint,6,opt,name=head_slot,json=headSlot,proto3" json:"head_slot,omitempty"`
	// Indicates if data is available (overlapping interval exists)
	HasData bool `protobuf:"varint,7,opt,name=has_data,json=hasData,proto3" json:"has_data,omitempty"`
}

func (x *ExperimentDataAvailability) Reset() {
	*x = ExperimentDataAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentDataAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentDataAvailability) ProtoMessage() {}

func (x *ExperimentDataAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentDataAvailability.ProtoReflect.Descriptor instead.
func (*ExperimentDataAvailability) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{15}
}

func (x *ExperimentDataAvailability) GetAvailableFromTimestamp() int64 {
	if x != nil {
		return x.AvailableFromTimestamp
	}
	return 0
}

func (x *ExperimentDataAvailability) GetAvailableUntilTimestamp() int64 {
	if x != nil {
		return x.AvailableUntilTimestamp
	}
	return 0
}

func (x *ExperimentDataAvailability) GetMinSlot() uint64 {
	if x != nil {
		return x.MinSlot
	}
	return 0
}

func (x *ExperimentDataAvailability) GetMaxSlot() uint64 {
	if x != nil {
		return x.MaxSlot
	}
	return 0
}

func (x *ExperimentDataAvailability) GetSafeSlot() uint64 {
	if x != nil {
		return x.SafeSlot
	}
	return 0
}

func (x *ExperimentDataAvailability) GetHeadSlot() uint64 {
	if x != nil {
		return x.HeadSlot
	}
	return 0
}

func (x *ExperimentDataAvailability) GetHasData() bool {
	if x != nil {
		return x.HasData
	}
	return false
}

// GetExperimentConfigRequest defines the request for getting a single experiment's configuration.
type GetExperimentConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The experiment ID to get configuration for
	ExperimentId string `protobuf:"bytes,1,opt,name=experiment_id,json=experimentId,proto3" json:"experiment_id,omitempty"`
}

func (x *GetExperimentConfigRequest) Reset() {
	*x = GetExperimentConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentConfigRequest) ProtoMessage() {}

func (x *GetExperimentConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentConfigRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentConfigRequest) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{16}
}

func (x *GetExperimentConfigRequest) GetExperimentId() string {
	if x != nil {
		return x.ExperimentId
	}
	return ""
}

// GetExperimentConfigResponse returns a single experiment's full configuration with data availability.
type GetExperimentConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The experiment configuration with data availability
	Experiment *ExperimentConfig `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *GetExperimentConfigResponse) Reset() {
	*x = GetExperimentConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentConfigResponse) ProtoMessage() {}

func (x *GetExperimentConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_config_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentConfigResponse.ProtoReflect.Descriptor instead.
func (*GetExperimentConfigResponse) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_config_config_proto_rawDescGZIP(), []int{17}
}

func (x *GetExperimentConfigResponse) GetExperiment() *ExperimentConfig {
	if x != nil {
		return x.Experiment
	}
	return nil
}

var File_backend_pkg_server_proto_config_config_proto protoreflect.FileDescriptor

var file_backend_pkg_server_proto_config_config_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xb2, 0x01, 0x0a, 0x0e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x65, 0x74,
	0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x0e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x52, 0x0a, 0x0d, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x02,
	0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x42, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x61, 0x22, 0xbf, 0x01, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x57, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x14, 0x62, 0x65, 0x61,
	0x63, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x12, 0x62, 0x65, 0x61, 0x63, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a,
	0x06, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x06, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x18,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x73, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0x85, 0x02, 0x0a,
	0x0c, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3e, 0x0a, 0x08, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x58, 0x0a, 0x0d, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x13, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x6c, 0x61, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67,
	0x44, 0x61, 0x79, 0x73, 0x22, 0x60, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x4f, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x1a,
	0x67, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x1a, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x75,
	0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53,
	0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x61, 0x66, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x41, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x32, 0xb1, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x18, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f,
	0x70, 0x73, 0x2f, 0x6c, 0x61, 0x62, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_pkg_server_proto_config_config_proto_rawDescOnce sync.Once
	file_backend_pkg_server_proto_config_config_proto_rawDescData = file_backend_pkg_server_proto_config_config_proto_rawDesc
)

func file_backend_pkg_server_proto_config_config_proto_rawDescGZIP() []byte {
	file_backend_pkg_server_proto_config_config_proto_rawDescOnce.Do(func() {
		file_backend_pkg_server_proto_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_pkg_server_proto_config_config_proto_rawDescData)
	})
	return file_backend_pkg_server_proto_config_config_proto_rawDescData
}

var file_backend_pkg_server_proto_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_backend_pkg_server_proto_config_config_proto_goTypes = []any{
	(*GetConfigRequest)(nil),            // 0: config.GetConfigRequest
	(*GetConfigResponse)(nil),           // 1: config.GetConfigResponse
	(*FrontendConfig)(nil),              // 2: config.FrontendConfig
	(*EthereumConfig)(nil),              // 3: config.EthereumConfig
	(*NetworkConfig)(nil),               // 4: config.NetworkConfig
	(*ForkConfig)(nil),                  // 5: config.ForkConfig
	(*ConsensusForks)(nil),              // 6: config.ConsensusForks
	(*ForkInfo)(nil),                    // 7: config.ForkInfo
	(*ModulesConfig)(nil),               // 8: config.ModulesConfig
	(*BeaconChainTimingsModule)(nil),    // 9: config.BeaconChainTimingsModule
	(*BeaconModule)(nil),                // 10: config.BeaconModule
	(*BeaconNetworkConfig)(nil),         // 11: config.BeaconNetworkConfig
	(*TimeWindow)(nil),                  // 12: config.TimeWindow
	(*ExperimentsConfig)(nil),           // 13: config.ExperimentsConfig
	(*ExperimentConfig)(nil),            // 14: config.ExperimentConfig
	(*ExperimentDataAvailability)(nil),  // 15: config.ExperimentDataAvailability
	(*GetExperimentConfigRequest)(nil),  // 16: config.GetExperimentConfigRequest
	(*GetExperimentConfigResponse)(nil), // 17: config.GetExperimentConfigResponse
	nil,                                 // 18: config.EthereumConfig.NetworksEntry
	nil,                                 // 19: config.NetworkConfig.ServiceUrlsEntry
	nil,                                 // 20: config.ForkInfo.MinClientVersionsEntry
	nil,                                 // 21: config.BeaconModule.NetworksEntry
	nil,                                 // 22: config.ExperimentConfig.DataAvailabilityEntry
}
var file_backend_pkg_server_proto_config_config_proto_depIdxs = []int32{
	2,  // 0: config.GetConfigResponse.config:type_name -> config.FrontendConfig
	3,  // 1: config.FrontendConfig.ethereum:type_name -> config.EthereumConfig
	8,  // 2: config.FrontendConfig.modules:type_name -> config.ModulesConfig
	13, // 3: config.FrontendConfig.experiments:type_name -> config.ExperimentsConfig
	18, // 4: config.EthereumConfig.networks:type_name -> config.EthereumConfig.NetworksEntry
	19, // 5: config.NetworkConfig.service_urls:type_name -> config.NetworkConfig.ServiceUrlsEntry
	5,  // 6: config.NetworkConfig.forks:type_name -> config.ForkConfig
	6,  // 7: config.ForkConfig.consensus:type_name -> config.ConsensusForks
	7,  // 8: config.ConsensusForks.electra:type_name -> config.ForkInfo
	20, // 9: config.ForkInfo.min_client_versions:type_name -> config.ForkInfo.MinClientVersionsEntry
	9,  // 10: config.ModulesConfig.beacon_chain_timings:type_name -> config.BeaconChainTimingsModule
	10, // 11: config.ModulesConfig.beacon:type_name -> config.BeaconModule
	12, // 12: config.BeaconChainTimingsModule.time_windows:type_name -> config.TimeWindow
	21, // 13: config.BeaconModule.networks:type_name -> config.BeaconModule.NetworksEntry
	14, // 14: config.ExperimentsConfig.experiments:type_name -> config.ExperimentConfig
	22, // 15: config.ExperimentConfig.data_availability:type_name -> config.ExperimentConfig.DataAvailabilityEntry
	14, // 16: config.GetExperimentConfigResponse.experiment:type_name -> config.ExperimentConfig
	4,  // 17: config.EthereumConfig.NetworksEntry.value:type_name -> config.NetworkConfig
	11, // 18: config.BeaconModule.NetworksEntry.value:type_name -> config.BeaconNetworkConfig
	15, // 19: config.ExperimentConfig.DataAvailabilityEntry.value:type_name -> config.ExperimentDataAvailability
	0,  // 20: config.ConfigService.GetConfig:input_type -> config.GetConfigRequest
	16, // 21: config.ConfigService.GetExperimentConfig:input_type -> config.GetExperimentConfigRequest
	1,  // 22: config.ConfigService.GetConfig:output_type -> config.GetConfigResponse
	17, // 23: config.ConfigService.GetExperimentConfig:output_type -> config.GetExperimentConfigResponse
	22, // [22:24] is the sub-list for method output_type
	20, // [20:22] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_backend_pkg_server_proto_config_config_proto_init() }
func file_backend_pkg_server_proto_config_config_proto_init() {
	if File_backend_pkg_server_proto_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_pkg_server_proto_config_config_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FrontendConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*EthereumConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ForkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ConsensusForks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ForkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ModulesConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BeaconChainTimingsModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*BeaconModule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*BeaconNetworkConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TimeWindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ExperimentsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ExperimentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ExperimentDataAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*GetExperimentConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_config_config_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetExperimentConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_pkg_server_proto_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_pkg_server_proto_config_config_proto_goTypes,
		DependencyIndexes: file_backend_pkg_server_proto_config_config_proto_depIdxs,
		MessageInfos:      file_backend_pkg_server_proto_config_config_proto_msgTypes,
	}.Build()
	File_backend_pkg_server_proto_config_config_proto = out.File
	file_backend_pkg_server_proto_config_config_proto_rawDesc = nil
	file_backend_pkg_server_proto_config_config_proto_goTypes = nil
	file_backend_pkg_server_proto_config_config_proto_depIdxs = nil
}
