// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/pkg/server/proto/beacon_slots/beacon_slots.proto

package beacon_slotsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	beacon_slots "github.com/ethpandaops/lab/backend/pkg/server/proto/beacon_slots"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BeaconSlotsName is the fully-qualified name of the BeaconSlots service.
	BeaconSlotsName = "beacon_slots.BeaconSlots"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BeaconSlotsGetRecentLocallyBuiltBlocksProcedure is the fully-qualified name of the BeaconSlots's
	// GetRecentLocallyBuiltBlocks RPC.
	BeaconSlotsGetRecentLocallyBuiltBlocksProcedure = "/beacon_slots.BeaconSlots/GetRecentLocallyBuiltBlocks"
	// BeaconSlotsGetRecentValidatorBlocksProcedure is the fully-qualified name of the BeaconSlots's
	// GetRecentValidatorBlocks RPC.
	BeaconSlotsGetRecentValidatorBlocksProcedure = "/beacon_slots.BeaconSlots/GetRecentValidatorBlocks"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	beaconSlotsServiceDescriptor                           = beacon_slots.File_backend_pkg_server_proto_beacon_slots_beacon_slots_proto.Services().ByName("BeaconSlots")
	beaconSlotsGetRecentLocallyBuiltBlocksMethodDescriptor = beaconSlotsServiceDescriptor.Methods().ByName("GetRecentLocallyBuiltBlocks")
	beaconSlotsGetRecentValidatorBlocksMethodDescriptor    = beaconSlotsServiceDescriptor.Methods().ByName("GetRecentValidatorBlocks")
)

// BeaconSlotsClient is a client for the beacon_slots.BeaconSlots service.
type BeaconSlotsClient interface {
	GetRecentLocallyBuiltBlocks(context.Context, *connect.Request[beacon_slots.GetRecentLocallyBuiltBlocksRequest]) (*connect.Response[beacon_slots.GetRecentLocallyBuiltBlocksResponse], error)
	GetRecentValidatorBlocks(context.Context, *connect.Request[beacon_slots.GetRecentValidatorBlocksRequest]) (*connect.Response[beacon_slots.GetRecentValidatorBlocksResponse], error)
}

// NewBeaconSlotsClient constructs a client for the beacon_slots.BeaconSlots service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBeaconSlotsClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BeaconSlotsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &beaconSlotsClient{
		getRecentLocallyBuiltBlocks: connect.NewClient[beacon_slots.GetRecentLocallyBuiltBlocksRequest, beacon_slots.GetRecentLocallyBuiltBlocksResponse](
			httpClient,
			baseURL+BeaconSlotsGetRecentLocallyBuiltBlocksProcedure,
			connect.WithSchema(beaconSlotsGetRecentLocallyBuiltBlocksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRecentValidatorBlocks: connect.NewClient[beacon_slots.GetRecentValidatorBlocksRequest, beacon_slots.GetRecentValidatorBlocksResponse](
			httpClient,
			baseURL+BeaconSlotsGetRecentValidatorBlocksProcedure,
			connect.WithSchema(beaconSlotsGetRecentValidatorBlocksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// beaconSlotsClient implements BeaconSlotsClient.
type beaconSlotsClient struct {
	getRecentLocallyBuiltBlocks *connect.Client[beacon_slots.GetRecentLocallyBuiltBlocksRequest, beacon_slots.GetRecentLocallyBuiltBlocksResponse]
	getRecentValidatorBlocks    *connect.Client[beacon_slots.GetRecentValidatorBlocksRequest, beacon_slots.GetRecentValidatorBlocksResponse]
}

// GetRecentLocallyBuiltBlocks calls beacon_slots.BeaconSlots.GetRecentLocallyBuiltBlocks.
func (c *beaconSlotsClient) GetRecentLocallyBuiltBlocks(ctx context.Context, req *connect.Request[beacon_slots.GetRecentLocallyBuiltBlocksRequest]) (*connect.Response[beacon_slots.GetRecentLocallyBuiltBlocksResponse], error) {
	return c.getRecentLocallyBuiltBlocks.CallUnary(ctx, req)
}

// GetRecentValidatorBlocks calls beacon_slots.BeaconSlots.GetRecentValidatorBlocks.
func (c *beaconSlotsClient) GetRecentValidatorBlocks(ctx context.Context, req *connect.Request[beacon_slots.GetRecentValidatorBlocksRequest]) (*connect.Response[beacon_slots.GetRecentValidatorBlocksResponse], error) {
	return c.getRecentValidatorBlocks.CallUnary(ctx, req)
}

// BeaconSlotsHandler is an implementation of the beacon_slots.BeaconSlots service.
type BeaconSlotsHandler interface {
	GetRecentLocallyBuiltBlocks(context.Context, *connect.Request[beacon_slots.GetRecentLocallyBuiltBlocksRequest]) (*connect.Response[beacon_slots.GetRecentLocallyBuiltBlocksResponse], error)
	GetRecentValidatorBlocks(context.Context, *connect.Request[beacon_slots.GetRecentValidatorBlocksRequest]) (*connect.Response[beacon_slots.GetRecentValidatorBlocksResponse], error)
}

// NewBeaconSlotsHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBeaconSlotsHandler(svc BeaconSlotsHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	beaconSlotsGetRecentLocallyBuiltBlocksHandler := connect.NewUnaryHandler(
		BeaconSlotsGetRecentLocallyBuiltBlocksProcedure,
		svc.GetRecentLocallyBuiltBlocks,
		connect.WithSchema(beaconSlotsGetRecentLocallyBuiltBlocksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	beaconSlotsGetRecentValidatorBlocksHandler := connect.NewUnaryHandler(
		BeaconSlotsGetRecentValidatorBlocksProcedure,
		svc.GetRecentValidatorBlocks,
		connect.WithSchema(beaconSlotsGetRecentValidatorBlocksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/beacon_slots.BeaconSlots/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BeaconSlotsGetRecentLocallyBuiltBlocksProcedure:
			beaconSlotsGetRecentLocallyBuiltBlocksHandler.ServeHTTP(w, r)
		case BeaconSlotsGetRecentValidatorBlocksProcedure:
			beaconSlotsGetRecentValidatorBlocksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBeaconSlotsHandler returns CodeUnimplemented from all methods.
type UnimplementedBeaconSlotsHandler struct{}

func (UnimplementedBeaconSlotsHandler) GetRecentLocallyBuiltBlocks(context.Context, *connect.Request[beacon_slots.GetRecentLocallyBuiltBlocksRequest]) (*connect.Response[beacon_slots.GetRecentLocallyBuiltBlocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("beacon_slots.BeaconSlots.GetRecentLocallyBuiltBlocks is not implemented"))
}

func (UnimplementedBeaconSlotsHandler) GetRecentValidatorBlocks(context.Context, *connect.Request[beacon_slots.GetRecentValidatorBlocksRequest]) (*connect.Response[beacon_slots.GetRecentValidatorBlocksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("beacon_slots.BeaconSlots.GetRecentValidatorBlocks is not implemented"))
}
