// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: backend/pkg/server/proto/networks/networks.proto

package networks

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NetworksService_ListNetworks_FullMethodName = "/networks.NetworksService/ListNetworks"
	NetworksService_GetNetwork_FullMethodName   = "/networks.NetworksService/GetNetwork"
)

// NetworksServiceClient is the client API for NetworksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// NetworksService provides network discovery and metadata operations.
// It serves as the central registry for all supported Ethereum networks.
type NetworksServiceClient interface {
	// ListNetworks returns a list of all known networks with optional filtering.
	// Networks can be filtered to show only active networks.
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	// GetNetwork returns detailed information about a specific network.
	// Network lookup is case-insensitive.
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
}

type networksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworksServiceClient(cc grpc.ClientConnInterface) NetworksServiceClient {
	return &networksServiceClient{cc}
}

func (c *networksServiceClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, NetworksService_ListNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networksServiceClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNetworkResponse)
	err := c.cc.Invoke(ctx, NetworksService_GetNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworksServiceServer is the server API for NetworksService service.
// All implementations must embed UnimplementedNetworksServiceServer
// for forward compatibility
//
// NetworksService provides network discovery and metadata operations.
// It serves as the central registry for all supported Ethereum networks.
type NetworksServiceServer interface {
	// ListNetworks returns a list of all known networks with optional filtering.
	// Networks can be filtered to show only active networks.
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	// GetNetwork returns detailed information about a specific network.
	// Network lookup is case-insensitive.
	GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error)
	mustEmbedUnimplementedNetworksServiceServer()
}

// UnimplementedNetworksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworksServiceServer struct {
}

func (UnimplementedNetworksServiceServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedNetworksServiceServer) GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedNetworksServiceServer) mustEmbedUnimplementedNetworksServiceServer() {}

// UnsafeNetworksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworksServiceServer will
// result in compilation errors.
type UnsafeNetworksServiceServer interface {
	mustEmbedUnimplementedNetworksServiceServer()
}

func RegisterNetworksServiceServer(s grpc.ServiceRegistrar, srv NetworksServiceServer) {
	s.RegisterService(&NetworksService_ServiceDesc, srv)
}

func _NetworksService_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworksServiceServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworksService_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworksServiceServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworksService_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworksServiceServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworksService_GetNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworksServiceServer).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworksService_ServiceDesc is the grpc.ServiceDesc for NetworksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "networks.NetworksService",
	HandlerType: (*NetworksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetworks",
			Handler:    _NetworksService_ListNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _NetworksService_GetNetwork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/pkg/server/proto/networks/networks.proto",
}
