// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/pkg/server/proto/networks/networks.proto

package networksconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	networks "github.com/ethpandaops/lab/backend/pkg/server/proto/networks"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NetworksServiceName is the fully-qualified name of the NetworksService service.
	NetworksServiceName = "networks.NetworksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NetworksServiceListNetworksProcedure is the fully-qualified name of the NetworksService's
	// ListNetworks RPC.
	NetworksServiceListNetworksProcedure = "/networks.NetworksService/ListNetworks"
	// NetworksServiceGetNetworkProcedure is the fully-qualified name of the NetworksService's
	// GetNetwork RPC.
	NetworksServiceGetNetworkProcedure = "/networks.NetworksService/GetNetwork"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	networksServiceServiceDescriptor            = networks.File_backend_pkg_server_proto_networks_networks_proto.Services().ByName("NetworksService")
	networksServiceListNetworksMethodDescriptor = networksServiceServiceDescriptor.Methods().ByName("ListNetworks")
	networksServiceGetNetworkMethodDescriptor   = networksServiceServiceDescriptor.Methods().ByName("GetNetwork")
)

// NetworksServiceClient is a client for the networks.NetworksService service.
type NetworksServiceClient interface {
	// ListNetworks returns a list of all known networks with optional filtering.
	// Networks can be filtered to show only active networks.
	ListNetworks(context.Context, *connect.Request[networks.ListNetworksRequest]) (*connect.Response[networks.ListNetworksResponse], error)
	// GetNetwork returns detailed information about a specific network.
	// Network lookup is case-insensitive.
	GetNetwork(context.Context, *connect.Request[networks.GetNetworkRequest]) (*connect.Response[networks.GetNetworkResponse], error)
}

// NewNetworksServiceClient constructs a client for the networks.NetworksService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNetworksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NetworksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &networksServiceClient{
		listNetworks: connect.NewClient[networks.ListNetworksRequest, networks.ListNetworksResponse](
			httpClient,
			baseURL+NetworksServiceListNetworksProcedure,
			connect.WithSchema(networksServiceListNetworksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getNetwork: connect.NewClient[networks.GetNetworkRequest, networks.GetNetworkResponse](
			httpClient,
			baseURL+NetworksServiceGetNetworkProcedure,
			connect.WithSchema(networksServiceGetNetworkMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// networksServiceClient implements NetworksServiceClient.
type networksServiceClient struct {
	listNetworks *connect.Client[networks.ListNetworksRequest, networks.ListNetworksResponse]
	getNetwork   *connect.Client[networks.GetNetworkRequest, networks.GetNetworkResponse]
}

// ListNetworks calls networks.NetworksService.ListNetworks.
func (c *networksServiceClient) ListNetworks(ctx context.Context, req *connect.Request[networks.ListNetworksRequest]) (*connect.Response[networks.ListNetworksResponse], error) {
	return c.listNetworks.CallUnary(ctx, req)
}

// GetNetwork calls networks.NetworksService.GetNetwork.
func (c *networksServiceClient) GetNetwork(ctx context.Context, req *connect.Request[networks.GetNetworkRequest]) (*connect.Response[networks.GetNetworkResponse], error) {
	return c.getNetwork.CallUnary(ctx, req)
}

// NetworksServiceHandler is an implementation of the networks.NetworksService service.
type NetworksServiceHandler interface {
	// ListNetworks returns a list of all known networks with optional filtering.
	// Networks can be filtered to show only active networks.
	ListNetworks(context.Context, *connect.Request[networks.ListNetworksRequest]) (*connect.Response[networks.ListNetworksResponse], error)
	// GetNetwork returns detailed information about a specific network.
	// Network lookup is case-insensitive.
	GetNetwork(context.Context, *connect.Request[networks.GetNetworkRequest]) (*connect.Response[networks.GetNetworkResponse], error)
}

// NewNetworksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNetworksServiceHandler(svc NetworksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	networksServiceListNetworksHandler := connect.NewUnaryHandler(
		NetworksServiceListNetworksProcedure,
		svc.ListNetworks,
		connect.WithSchema(networksServiceListNetworksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	networksServiceGetNetworkHandler := connect.NewUnaryHandler(
		NetworksServiceGetNetworkProcedure,
		svc.GetNetwork,
		connect.WithSchema(networksServiceGetNetworkMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/networks.NetworksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NetworksServiceListNetworksProcedure:
			networksServiceListNetworksHandler.ServeHTTP(w, r)
		case NetworksServiceGetNetworkProcedure:
			networksServiceGetNetworkHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNetworksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNetworksServiceHandler struct{}

func (UnimplementedNetworksServiceHandler) ListNetworks(context.Context, *connect.Request[networks.ListNetworksRequest]) (*connect.Response[networks.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networks.NetworksService.ListNetworks is not implemented"))
}

func (UnimplementedNetworksServiceHandler) GetNetwork(context.Context, *connect.Request[networks.GetNetworkRequest]) (*connect.Response[networks.GetNetworkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("networks.NetworksService.GetNetwork is not implemented"))
}
