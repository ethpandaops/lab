syntax = "proto3";

package networks;

option go_package = "github.com/ethpandaops/lab/backend/pkg/server/proto/networks";

// This file defines the Networks service for network discovery and validation.
//
// Architecture:
// - The service uses cartographoor as the authoritative source for network metadata
// - Data is fetched from the ethPandaOps cartographoor endpoint and cached locally
// - Network lookups are case-insensitive for better user experience
// - The service provides both listing and individual network lookup capabilities
//
// Flow:
// 1. Cartographoor service fetches network data from remote API periodically
// 2. Data is stored in memory with thread-safe access
// 3. gRPC service queries the cached data for network information
// 4. Networks can be filtered by active status
// 5. All network names are validated against this authoritative list

// NetworksService provides network discovery and metadata operations.
// It serves as the central registry for all supported Ethereum networks.
service NetworksService {
  // ListNetworks returns a list of all known networks with optional filtering.
  // Networks can be filtered to show only active networks.
  rpc ListNetworks(ListNetworksRequest) returns (ListNetworksResponse);
  // GetNetwork returns detailed information about a specific network.
  // Network lookup is case-insensitive.
  rpc GetNetwork(GetNetworkRequest) returns (GetNetworkResponse);
}


// Network represents an Ethereum network with its metadata.
message Network {
  // Full network name (e.g., "mainnet", "sepolia", "fusaka-devnet-0").
  string name = 1;
  // Network status: "active", "inactive", or "unknown".
  string status = 2;
  // Ethereum chain ID for this network.
  int64 chain_id = 3;
  // ISO 8601 timestamp of when this network metadata was last updated.
  string last_updated = 4;
}

// ListNetworksRequest defines filters for listing networks.
message ListNetworksRequest {
  // If true, only return networks with status="active".
  bool active_only = 1;
}

// ListNetworksResponse contains the filtered list of networks and metadata.
message ListNetworksResponse {
  // List of networks matching the filter criteria.
  repeated Network networks = 1;
  // Metadata about the filtering operation.
  FilterMetadata filters = 2;
}

// FilterMetadata provides information about the filtering operation.
message FilterMetadata {
  // List of filters that were applied (e.g., ["active_only"]).
  repeated string applied_filters = 1;
  // Total number of networks before filtering.
  int32 total_count = 2;
  // Number of networks after filtering.
  int32 filtered_count = 3;
}

// GetNetworkRequest specifies which network to retrieve.
message GetNetworkRequest {
  // Name of the network to retrieve (case-insensitive).
  string network_name = 1;
}

// GetNetworkResponse contains the requested network information.
message GetNetworkResponse {
  // The requested network, or null if not found.
  Network network = 1;
}

// NetworksData represents the complete network data from cartographoor.
// This is used internally by the service to store the fetched data.
message NetworksData {
  // ISO 8601 timestamp of when this data was generated.
  string generated = 1;
  // Map of network name to network data.
  map<string, Network> networks = 2;
}

// RawNetworkData represents the raw network data from cartographoor JSON.
// Used for unmarshaling the cartographoor API response.
message RawNetworkData {
  // Network suffix name (e.g., "devnet-0" without prefix).
  string name = 1;
  // Network status: "active", "inactive", or "unknown".
  string status = 2;
  // ISO 8601 timestamp of last update.
  string last_updated = 3;
  // Ethereum chain ID.
  int64 chain_id = 4;
}

// CartographoorResponse represents the raw cartographoor API response.
// This matches the exact JSON structure from the API.
message CartographoorResponse {
  // ISO 8601 timestamp of when this data was generated.
  string generated = 1;
  // Map of full network name to raw network data.
  map<string, RawNetworkData> networks = 2;
}

