// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: backend/pkg/server/proto/networks/networks.proto

package networks

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Network represents an Ethereum network with its metadata.
type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Full network name (e.g., "mainnet", "sepolia", "fusaka-devnet-0").
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Network status: "active", "inactive", or "unknown".
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Ethereum chain ID for this network.
	ChainId int64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// ISO 8601 timestamp of when this network metadata was last updated.
	LastUpdated string `protobuf:"bytes,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Description of the network (for static networks).
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Genesis configuration (for static networks).
	GenesisConfig *GenesisConfig `protobuf:"bytes,6,opt,name=genesis_config,json=genesisConfig,proto3" json:"genesis_config,omitempty"`
	// Whether the network uses self-hosted DNS (for static networks).
	SelfHostedDns bool `protobuf:"varint,7,opt,name=self_hosted_dns,json=selfHostedDns,proto3" json:"self_hosted_dns,omitempty"`
	// Fork information (for static networks).
	Forks *Forks `protobuf:"bytes,8,opt,name=forks,proto3" json:"forks,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{0}
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Network) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Network) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *Network) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Network) GetGenesisConfig() *GenesisConfig {
	if x != nil {
		return x.GenesisConfig
	}
	return nil
}

func (x *Network) GetSelfHostedDns() bool {
	if x != nil {
		return x.SelfHostedDns
	}
	return false
}

func (x *Network) GetForks() *Forks {
	if x != nil {
		return x.Forks
	}
	return nil
}

// GenesisConfig contains the genesis configuration for a network.
type GenesisConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Genesis time as Unix timestamp.
	GenesisTime int64 `protobuf:"varint,1,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
}

func (x *GenesisConfig) Reset() {
	*x = GenesisConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisConfig) ProtoMessage() {}

func (x *GenesisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisConfig.ProtoReflect.Descriptor instead.
func (*GenesisConfig) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{1}
}

func (x *GenesisConfig) GetGenesisTime() int64 {
	if x != nil {
		return x.GenesisTime
	}
	return 0
}

// Forks contains fork information for a network.
type Forks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Consensus layer fork information.
	Consensus *ConsensusForks `protobuf:"bytes,1,opt,name=consensus,proto3" json:"consensus,omitempty"`
}

func (x *Forks) Reset() {
	*x = Forks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forks) ProtoMessage() {}

func (x *Forks) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forks.ProtoReflect.Descriptor instead.
func (*Forks) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{2}
}

func (x *Forks) GetConsensus() *ConsensusForks {
	if x != nil {
		return x.Consensus
	}
	return nil
}

// ConsensusForks contains consensus layer fork information.
type ConsensusForks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Electra fork information.
	Electra *ForkInfo `protobuf:"bytes,1,opt,name=electra,proto3" json:"electra,omitempty"`
}

func (x *ConsensusForks) Reset() {
	*x = ConsensusForks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusForks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusForks) ProtoMessage() {}

func (x *ConsensusForks) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusForks.ProtoReflect.Descriptor instead.
func (*ConsensusForks) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{3}
}

func (x *ConsensusForks) GetElectra() *ForkInfo {
	if x != nil {
		return x.Electra
	}
	return nil
}

// ForkInfo contains information about a specific fork.
type ForkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch when the fork activates.
	Epoch int64 `protobuf:"varint,1,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Minimum client versions required for the fork.
	MinClientVersions map[string]string `protobuf:"bytes,2,rep,name=min_client_versions,json=minClientVersions,proto3" json:"min_client_versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ForkInfo) Reset() {
	*x = ForkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkInfo) ProtoMessage() {}

func (x *ForkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkInfo.ProtoReflect.Descriptor instead.
func (*ForkInfo) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{4}
}

func (x *ForkInfo) GetEpoch() int64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *ForkInfo) GetMinClientVersions() map[string]string {
	if x != nil {
		return x.MinClientVersions
	}
	return nil
}

// ListNetworksRequest defines filters for listing networks.
type ListNetworksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, only return networks with status="active".
	ActiveOnly bool `protobuf:"varint,1,opt,name=active_only,json=activeOnly,proto3" json:"active_only,omitempty"`
}

func (x *ListNetworksRequest) Reset() {
	*x = ListNetworksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksRequest) ProtoMessage() {}

func (x *ListNetworksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksRequest.ProtoReflect.Descriptor instead.
func (*ListNetworksRequest) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{5}
}

func (x *ListNetworksRequest) GetActiveOnly() bool {
	if x != nil {
		return x.ActiveOnly
	}
	return false
}

// ListNetworksResponse contains the filtered list of networks and metadata.
type ListNetworksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of networks matching the filter criteria.
	Networks []*Network `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	// Metadata about the filtering operation.
	Filters *FilterMetadata `protobuf:"bytes,2,opt,name=filters,proto3" json:"filters,omitempty"`
}

func (x *ListNetworksResponse) Reset() {
	*x = ListNetworksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworksResponse) ProtoMessage() {}

func (x *ListNetworksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworksResponse.ProtoReflect.Descriptor instead.
func (*ListNetworksResponse) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{6}
}

func (x *ListNetworksResponse) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ListNetworksResponse) GetFilters() *FilterMetadata {
	if x != nil {
		return x.Filters
	}
	return nil
}

// FilterMetadata provides information about the filtering operation.
type FilterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of filters that were applied (e.g., ["active_only"]).
	AppliedFilters []string `protobuf:"bytes,1,rep,name=applied_filters,json=appliedFilters,proto3" json:"applied_filters,omitempty"`
	// Total number of networks before filtering.
	TotalCount int32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// Number of networks after filtering.
	FilteredCount int32 `protobuf:"varint,3,opt,name=filtered_count,json=filteredCount,proto3" json:"filtered_count,omitempty"`
}

func (x *FilterMetadata) Reset() {
	*x = FilterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterMetadata) ProtoMessage() {}

func (x *FilterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterMetadata.ProtoReflect.Descriptor instead.
func (*FilterMetadata) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{7}
}

func (x *FilterMetadata) GetAppliedFilters() []string {
	if x != nil {
		return x.AppliedFilters
	}
	return nil
}

func (x *FilterMetadata) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *FilterMetadata) GetFilteredCount() int32 {
	if x != nil {
		return x.FilteredCount
	}
	return 0
}

// GetNetworkRequest specifies which network to retrieve.
type GetNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the network to retrieve (case-insensitive).
	NetworkName string `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
}

func (x *GetNetworkRequest) Reset() {
	*x = GetNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkRequest) ProtoMessage() {}

func (x *GetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{8}
}

func (x *GetNetworkRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

// GetNetworkResponse contains the requested network information.
type GetNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The requested network, or null if not found.
	Network *Network `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *GetNetworkResponse) Reset() {
	*x = GetNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkResponse) ProtoMessage() {}

func (x *GetNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkResponse) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{9}
}

func (x *GetNetworkResponse) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

// NetworksData represents the complete network data from cartographoor.
// This is used internally by the service to store the fetched data.
type NetworksData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 8601 timestamp of when this data was generated.
	Generated string `protobuf:"bytes,1,opt,name=generated,proto3" json:"generated,omitempty"`
	// Map of network name to network data.
	Networks map[string]*Network `protobuf:"bytes,2,rep,name=networks,proto3" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NetworksData) Reset() {
	*x = NetworksData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworksData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworksData) ProtoMessage() {}

func (x *NetworksData) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworksData.ProtoReflect.Descriptor instead.
func (*NetworksData) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{10}
}

func (x *NetworksData) GetGenerated() string {
	if x != nil {
		return x.Generated
	}
	return ""
}

func (x *NetworksData) GetNetworks() map[string]*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

// RawNetworkData represents the raw network data from cartographoor JSON.
// Used for unmarshaling the cartographoor API response.
type RawNetworkData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Network suffix name (e.g., "devnet-0" without prefix).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Network status: "active", "inactive", or "unknown".
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// ISO 8601 timestamp of last update.
	LastUpdated string `protobuf:"bytes,3,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Ethereum chain ID.
	ChainId int64 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Description of the network (for static networks).
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Genesis configuration (for static networks).
	GenesisConfig *GenesisConfig `protobuf:"bytes,6,opt,name=genesis_config,json=genesisConfig,proto3" json:"genesis_config,omitempty"`
	// Whether the network uses self-hosted DNS (for static networks).
	SelfHostedDns bool `protobuf:"varint,7,opt,name=self_hosted_dns,json=selfHostedDns,proto3" json:"self_hosted_dns,omitempty"`
	// Fork information (for static networks).
	Forks *Forks `protobuf:"bytes,8,opt,name=forks,proto3" json:"forks,omitempty"`
}

func (x *RawNetworkData) Reset() {
	*x = RawNetworkData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawNetworkData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawNetworkData) ProtoMessage() {}

func (x *RawNetworkData) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawNetworkData.ProtoReflect.Descriptor instead.
func (*RawNetworkData) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{11}
}

func (x *RawNetworkData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RawNetworkData) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RawNetworkData) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *RawNetworkData) GetChainId() int64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *RawNetworkData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RawNetworkData) GetGenesisConfig() *GenesisConfig {
	if x != nil {
		return x.GenesisConfig
	}
	return nil
}

func (x *RawNetworkData) GetSelfHostedDns() bool {
	if x != nil {
		return x.SelfHostedDns
	}
	return false
}

func (x *RawNetworkData) GetForks() *Forks {
	if x != nil {
		return x.Forks
	}
	return nil
}

// CartographoorResponse represents the raw cartographoor API response.
// This matches the exact JSON structure from the API.
type CartographoorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 8601 timestamp of when this data was generated.
	Generated string `protobuf:"bytes,1,opt,name=generated,proto3" json:"generated,omitempty"`
	// Map of full network name to raw network data.
	Networks map[string]*RawNetworkData `protobuf:"bytes,2,rep,name=networks,proto3" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CartographoorResponse) Reset() {
	*x = CartographoorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CartographoorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartographoorResponse) ProtoMessage() {}

func (x *CartographoorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_networks_networks_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartographoorResponse.ProtoReflect.Descriptor instead.
func (*CartographoorResponse) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP(), []int{12}
}

func (x *CartographoorResponse) GetGenerated() string {
	if x != nil {
		return x.Generated
	}
	return ""
}

func (x *CartographoorResponse) GetNetworks() map[string]*RawNetworkData {
	if x != nil {
		return x.Networks
	}
	return nil
}

var File_backend_pkg_server_proto_networks_networks_proto protoreflect.FileDescriptor

var file_backend_pkg_server_proto_networks_networks_proto_rawDesc = []byte{
	0x0a, 0x30, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0xa4, 0x02, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x05, 0x66, 0x6f,
	0x72, 0x6b, 0x73, 0x22, 0x32, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x6b, 0x73,
	0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x22, 0x3e, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x61, 0x22, 0xc1, 0x01, 0x0a, 0x08, 0x46, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x59, 0x0a, 0x13, 0x6d,
	0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4d, 0x69, 0x6e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x4d, 0x69, 0x6e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x79, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x81, 0x01, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x36, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xbe,
	0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a,
	0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a,
	0x4e, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xab, 0x02, 0x0a, 0x0e, 0x52, 0x61, 0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6e,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0xd7, 0x01,
	0x0a, 0x15, 0x43, 0x61, 0x72, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x6f, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x6f, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x1a, 0x55, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x52, 0x61,
	0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa9, 0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x6c, 0x61,
	0x62, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_pkg_server_proto_networks_networks_proto_rawDescOnce sync.Once
	file_backend_pkg_server_proto_networks_networks_proto_rawDescData = file_backend_pkg_server_proto_networks_networks_proto_rawDesc
)

func file_backend_pkg_server_proto_networks_networks_proto_rawDescGZIP() []byte {
	file_backend_pkg_server_proto_networks_networks_proto_rawDescOnce.Do(func() {
		file_backend_pkg_server_proto_networks_networks_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_pkg_server_proto_networks_networks_proto_rawDescData)
	})
	return file_backend_pkg_server_proto_networks_networks_proto_rawDescData
}

var file_backend_pkg_server_proto_networks_networks_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_backend_pkg_server_proto_networks_networks_proto_goTypes = []any{
	(*Network)(nil),               // 0: networks.Network
	(*GenesisConfig)(nil),         // 1: networks.GenesisConfig
	(*Forks)(nil),                 // 2: networks.Forks
	(*ConsensusForks)(nil),        // 3: networks.ConsensusForks
	(*ForkInfo)(nil),              // 4: networks.ForkInfo
	(*ListNetworksRequest)(nil),   // 5: networks.ListNetworksRequest
	(*ListNetworksResponse)(nil),  // 6: networks.ListNetworksResponse
	(*FilterMetadata)(nil),        // 7: networks.FilterMetadata
	(*GetNetworkRequest)(nil),     // 8: networks.GetNetworkRequest
	(*GetNetworkResponse)(nil),    // 9: networks.GetNetworkResponse
	(*NetworksData)(nil),          // 10: networks.NetworksData
	(*RawNetworkData)(nil),        // 11: networks.RawNetworkData
	(*CartographoorResponse)(nil), // 12: networks.CartographoorResponse
	nil,                           // 13: networks.ForkInfo.MinClientVersionsEntry
	nil,                           // 14: networks.NetworksData.NetworksEntry
	nil,                           // 15: networks.CartographoorResponse.NetworksEntry
}
var file_backend_pkg_server_proto_networks_networks_proto_depIdxs = []int32{
	1,  // 0: networks.Network.genesis_config:type_name -> networks.GenesisConfig
	2,  // 1: networks.Network.forks:type_name -> networks.Forks
	3,  // 2: networks.Forks.consensus:type_name -> networks.ConsensusForks
	4,  // 3: networks.ConsensusForks.electra:type_name -> networks.ForkInfo
	13, // 4: networks.ForkInfo.min_client_versions:type_name -> networks.ForkInfo.MinClientVersionsEntry
	0,  // 5: networks.ListNetworksResponse.networks:type_name -> networks.Network
	7,  // 6: networks.ListNetworksResponse.filters:type_name -> networks.FilterMetadata
	0,  // 7: networks.GetNetworkResponse.network:type_name -> networks.Network
	14, // 8: networks.NetworksData.networks:type_name -> networks.NetworksData.NetworksEntry
	1,  // 9: networks.RawNetworkData.genesis_config:type_name -> networks.GenesisConfig
	2,  // 10: networks.RawNetworkData.forks:type_name -> networks.Forks
	15, // 11: networks.CartographoorResponse.networks:type_name -> networks.CartographoorResponse.NetworksEntry
	0,  // 12: networks.NetworksData.NetworksEntry.value:type_name -> networks.Network
	11, // 13: networks.CartographoorResponse.NetworksEntry.value:type_name -> networks.RawNetworkData
	5,  // 14: networks.NetworksService.ListNetworks:input_type -> networks.ListNetworksRequest
	8,  // 15: networks.NetworksService.GetNetwork:input_type -> networks.GetNetworkRequest
	6,  // 16: networks.NetworksService.ListNetworks:output_type -> networks.ListNetworksResponse
	9,  // 17: networks.NetworksService.GetNetwork:output_type -> networks.GetNetworkResponse
	16, // [16:18] is the sub-list for method output_type
	14, // [14:16] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_backend_pkg_server_proto_networks_networks_proto_init() }
func file_backend_pkg_server_proto_networks_networks_proto_init() {
	if File_backend_pkg_server_proto_networks_networks_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GenesisConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Forks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ConsensusForks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ForkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListNetworksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListNetworksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FilterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*GetNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*NetworksData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RawNetworkData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_networks_networks_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CartographoorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_pkg_server_proto_networks_networks_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_pkg_server_proto_networks_networks_proto_goTypes,
		DependencyIndexes: file_backend_pkg_server_proto_networks_networks_proto_depIdxs,
		MessageInfos:      file_backend_pkg_server_proto_networks_networks_proto_msgTypes,
	}.Build()
	File_backend_pkg_server_proto_networks_networks_proto = out.File
	file_backend_pkg_server_proto_networks_networks_proto_rawDesc = nil
	file_backend_pkg_server_proto_networks_networks_proto_goTypes = nil
	file_backend_pkg_server_proto_networks_networks_proto_depIdxs = nil
}
