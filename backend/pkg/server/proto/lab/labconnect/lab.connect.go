// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/pkg/server/proto/lab/lab.proto

package labconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	lab "github.com/ethpandaops/lab/backend/pkg/proto/lab"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LabServiceName is the fully-qualified name of the LabService service.
	LabServiceName = "lab.LabService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LabServiceGetFrontendConfigProcedure is the fully-qualified name of the LabService's
	// GetFrontendConfig RPC.
	LabServiceGetFrontendConfigProcedure = "/lab.LabService/GetFrontendConfig"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	labServiceServiceDescriptor                 = lab.File_backend_pkg_server_proto_lab_lab_proto.Services().ByName("LabService")
	labServiceGetFrontendConfigMethodDescriptor = labServiceServiceDescriptor.Methods().ByName("GetFrontendConfig")
)

// LabServiceClient is a client for the lab.LabService service.
type LabServiceClient interface {
	// Get configuration for a specific network
	GetFrontendConfig(context.Context, *connect.Request[lab.GetFrontendConfigRequest]) (*connect.Response[lab.GetFrontendConfigResponse], error)
}

// NewLabServiceClient constructs a client for the lab.LabService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLabServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LabServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &labServiceClient{
		getFrontendConfig: connect.NewClient[lab.GetFrontendConfigRequest, lab.GetFrontendConfigResponse](
			httpClient,
			baseURL+LabServiceGetFrontendConfigProcedure,
			connect.WithSchema(labServiceGetFrontendConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// labServiceClient implements LabServiceClient.
type labServiceClient struct {
	getFrontendConfig *connect.Client[lab.GetFrontendConfigRequest, lab.GetFrontendConfigResponse]
}

// GetFrontendConfig calls lab.LabService.GetFrontendConfig.
func (c *labServiceClient) GetFrontendConfig(ctx context.Context, req *connect.Request[lab.GetFrontendConfigRequest]) (*connect.Response[lab.GetFrontendConfigResponse], error) {
	return c.getFrontendConfig.CallUnary(ctx, req)
}

// LabServiceHandler is an implementation of the lab.LabService service.
type LabServiceHandler interface {
	// Get configuration for a specific network
	GetFrontendConfig(context.Context, *connect.Request[lab.GetFrontendConfigRequest]) (*connect.Response[lab.GetFrontendConfigResponse], error)
}

// NewLabServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLabServiceHandler(svc LabServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	labServiceGetFrontendConfigHandler := connect.NewUnaryHandler(
		LabServiceGetFrontendConfigProcedure,
		svc.GetFrontendConfig,
		connect.WithSchema(labServiceGetFrontendConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/lab.LabService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LabServiceGetFrontendConfigProcedure:
			labServiceGetFrontendConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLabServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLabServiceHandler struct{}

func (UnimplementedLabServiceHandler) GetFrontendConfig(context.Context, *connect.Request[lab.GetFrontendConfigRequest]) (*connect.Response[lab.GetFrontendConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("lab.LabService.GetFrontendConfig is not implemented"))
}
