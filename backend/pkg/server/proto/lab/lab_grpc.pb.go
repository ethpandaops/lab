// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: backend/pkg/server/proto/lab/lab.proto

package lab

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LabService_GetFrontendConfig_FullMethodName = "/lab.LabService/GetFrontendConfig"
)

// LabServiceClient is the client API for LabService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definitions
type LabServiceClient interface {
	// Get configuration for a specific network
	GetFrontendConfig(ctx context.Context, in *GetFrontendConfigRequest, opts ...grpc.CallOption) (*GetFrontendConfigResponse, error)
}

type labServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLabServiceClient(cc grpc.ClientConnInterface) LabServiceClient {
	return &labServiceClient{cc}
}

func (c *labServiceClient) GetFrontendConfig(ctx context.Context, in *GetFrontendConfigRequest, opts ...grpc.CallOption) (*GetFrontendConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFrontendConfigResponse)
	err := c.cc.Invoke(ctx, LabService_GetFrontendConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabServiceServer is the server API for LabService service.
// All implementations must embed UnimplementedLabServiceServer
// for forward compatibility
//
// Service definitions
type LabServiceServer interface {
	// Get configuration for a specific network
	GetFrontendConfig(context.Context, *GetFrontendConfigRequest) (*GetFrontendConfigResponse, error)
	mustEmbedUnimplementedLabServiceServer()
}

// UnimplementedLabServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLabServiceServer struct {
}

func (UnimplementedLabServiceServer) GetFrontendConfig(context.Context, *GetFrontendConfigRequest) (*GetFrontendConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrontendConfig not implemented")
}
func (UnimplementedLabServiceServer) mustEmbedUnimplementedLabServiceServer() {}

// UnsafeLabServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabServiceServer will
// result in compilation errors.
type UnsafeLabServiceServer interface {
	mustEmbedUnimplementedLabServiceServer()
}

func RegisterLabServiceServer(s grpc.ServiceRegistrar, srv LabServiceServer) {
	s.RegisterService(&LabService_ServiceDesc, srv)
}

func _LabService_GetFrontendConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFrontendConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabServiceServer).GetFrontendConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabService_GetFrontendConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabServiceServer).GetFrontendConfig(ctx, req.(*GetFrontendConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabService_ServiceDesc is the grpc.ServiceDesc for LabService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lab.LabService",
	HandlerType: (*LabServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFrontendConfig",
			Handler:    _LabService_GetFrontendConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/pkg/server/proto/lab/lab.proto",
}
