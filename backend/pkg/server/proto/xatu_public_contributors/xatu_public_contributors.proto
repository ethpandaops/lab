syntax = "proto3";

package xatu_public_contributors;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/ethpandaops/lab/backend/pkg/proto/xatu_public_contributors";


// The xatu_public_contributors service definition
service XatuPublicContributorsService {

} 

// Time window configuration (mirrors Python config structure)
message TimeWindow {
  string file = 1;  // e.g., "1h", "24h"
  string step = 2;  // e.g., "5m", "1h" - duration string
  string range = 3; // e.g., "-1h", "-24h" - duration string
  string label = 4; // e.g., "Last Hour", "Last 24 Hours"
}

// Configuration for the xatu_public_contributors service
message Config {
  bool enabled = 1;
  string redis_key_prefix = 2;
  repeated string networks = 3;
  int64 backfill_hours = 4;
  repeated TimeWindow time_windows = 5; // Added time windows
  string interval = 6; // Added overall processing interval duration string e.g. "15m"
}

// State tracking for contributors service
message ContributorsState {
  string network = 1;
  map<string, ProcessorState> processors = 2;
}

// State for a specific processor
message ProcessorState {
  google.protobuf.Timestamp last_processed = 1;
  map<string, google.protobuf.Timestamp> last_processed_windows = 2;
}

// Count of nodes with total and public node counts
message NodeCountStats {
  int32 total_nodes = 1; 
  int32 public_nodes = 2;
}

// Network statistics
message NetworkStats {
  string network = 1;
  int32 total_nodes = 2;
  int32 total_public_nodes = 3; 
  map<string, NodeCountStats> countries = 4;
  map<string, NodeCountStats> continents = 5;
  map<string, NodeCountStats> cities = 6;
  map<string, NodeCountStats> consensus_implementations = 7;
}

// Summary data for dashboard
message SummaryData {
  int64 updated_at = 1;
  map<string, NetworkStats> networks = 2;
}

// Data point for a country
message CountryDataPoint {
  int64 time = 1;  // Unix timestamp
  repeated CountryCount countries = 2;
}

// Country with node count
message CountryCount {
  string name = 1;  // Country name
  int32 value = 2;  // Node count
}

// Data point representing a user's node count at a specific time (for Users processor)
message UserDataPoint {
  string name = 1;  // Extracted username
  int32 nodes = 2; // Distinct node count for this user in the time slot
}

// Represents a collection of user data points for a specific timestamp (for Users processor)
message UsersTimePoint {
  int64 time = 1; // Unix timestamp
  repeated UserDataPoint users = 2;
}

// Detailed information about a single node/client (for User Summaries processor)
message NodeDetail {
  string network = 1;
  string client_name = 2; // Full meta_client_name
  string consensus_client = 3;
  string consensus_version = 4;
  string country = 5;
  string city = 6;
  string continent = 7;
  int64 latest_slot = 8;
  int64 latest_slot_start_date_time = 9; // Unix timestamp
  string client_implementation = 10;
  string client_version = 11;
}

// Summary data for a single user (for User Summaries processor)
message UserSummary {
  string name = 1; // Extracted username
  int32 node_count = 2;
  repeated NodeDetail nodes = 3;
  int64 updated_at = 4; // Unix timestamp of when the summary was generated
}

// Global summary listing all contributors (for User Summaries processor)
message GlobalUserSummary {
  repeated UserSummary contributors = 1;
  int64 updated_at = 2; // Unix timestamp of when the summary was generated
}

// Top networks by node count
message TopNetworks {
  repeated NetworkStats networks = 1;
}

// Request to get summary data
message GetSummaryRequest {
  string network = 1;
}

// Response containing summary data
message GetSummaryResponse {
  SummaryData summary = 1;
}

// Request to get country data
message GetCountryDataRequest {
  string network = 1;
  // Optional time range parameters could be added here
}

// Response containing country data
message GetCountryDataResponse {
  repeated CountryDataPoint data_points = 1;
}

// Request to get user data (for Users processor time series)
message GetUsersDataRequest {
  string network = 1;
  string window = 2; // e.g., "1h", "24h"
}

// Response containing user data (for Users processor time series)
message GetUsersDataResponse {
  repeated UsersTimePoint data_points = 1;
}

// Request to get user summary (for User Summaries processor)
message GetUserSummaryRequest {
  string username = 1; // Specific user to fetch
}

// Response containing user summary (for User Summaries processor)
message GetUserSummaryResponse {
  UserSummary user_summary = 1;
}

// Request to get the global user summary list (for User Summaries processor)
message GetGlobalUserSummaryRequest {}

// Response containing the global user summary list (for User Summaries processor)
message GetGlobalUserSummaryResponse {
  GlobalUserSummary summary = 1;
}

// Request to get top networks
message GetTopNetworksRequest {
  int32 limit = 1; // Number of top networks to return
}

// Response containing top networks
message GetTopNetworksResponse {
  TopNetworks top_networks = 1;
}