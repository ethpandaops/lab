// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt (interfaces: XatuCBTClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination xatu_cbt_client.go github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt XatuCBTClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	xatu_cbt "github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt"
	clickhouse "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockXatuCBTClient is a mock of XatuCBTClient interface.
type MockXatuCBTClient struct {
	ctrl     *gomock.Controller
	recorder *MockXatuCBTClientMockRecorder
	isgomock struct{}
}

// MockXatuCBTClientMockRecorder is the mock recorder for MockXatuCBTClient.
type MockXatuCBTClientMockRecorder struct {
	mock *MockXatuCBTClient
}

// NewMockXatuCBTClient creates a new mock instance.
func NewMockXatuCBTClient(ctrl *gomock.Controller) *MockXatuCBTClient {
	mock := &MockXatuCBTClient{ctrl: ctrl}
	mock.recorder = &MockXatuCBTClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXatuCBTClient) EXPECT() *MockXatuCBTClientMockRecorder {
	return m.recorder
}

// GetDataAvailability mocks base method.
func (m *MockXatuCBTClient) GetDataAvailability(ctx context.Context, in *xatu_cbt.GetDataAvailabilityRequest, opts ...grpc.CallOption) (*xatu_cbt.GetDataAvailabilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataAvailability", varargs...)
	ret0, _ := ret[0].(*xatu_cbt.GetDataAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataAvailability indicates an expected call of GetDataAvailability.
func (mr *MockXatuCBTClientMockRecorder) GetDataAvailability(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataAvailability", reflect.TypeOf((*MockXatuCBTClient)(nil).GetDataAvailability), varargs...)
}

// ListFctAttestationCorrectnessHead mocks base method.
func (m *MockXatuCBTClient) ListFctAttestationCorrectnessHead(ctx context.Context, in *clickhouse.ListFctAttestationCorrectnessHeadRequest, opts ...grpc.CallOption) (*clickhouse.ListFctAttestationCorrectnessHeadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAttestationCorrectnessHead", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAttestationCorrectnessHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAttestationCorrectnessHead indicates an expected call of ListFctAttestationCorrectnessHead.
func (mr *MockXatuCBTClientMockRecorder) ListFctAttestationCorrectnessHead(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAttestationCorrectnessHead", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAttestationCorrectnessHead), varargs...)
}

// ListFctAttestationFirstSeenChunked50Ms mocks base method.
func (m *MockXatuCBTClient) ListFctAttestationFirstSeenChunked50Ms(ctx context.Context, in *clickhouse.ListFctAttestationFirstSeenChunked50MsRequest, opts ...grpc.CallOption) (*clickhouse.ListFctAttestationFirstSeenChunked50MsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAttestationFirstSeenChunked50Ms", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAttestationFirstSeenChunked50MsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAttestationFirstSeenChunked50Ms indicates an expected call of ListFctAttestationFirstSeenChunked50Ms.
func (mr *MockXatuCBTClientMockRecorder) ListFctAttestationFirstSeenChunked50Ms(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAttestationFirstSeenChunked50Ms", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAttestationFirstSeenChunked50Ms), varargs...)
}

// ListFctBlockBlobCountHead mocks base method.
func (m *MockXatuCBTClient) ListFctBlockBlobCountHead(ctx context.Context, in *clickhouse.ListFctBlockBlobCountHeadRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockBlobCountHeadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockBlobCountHead", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockBlobCountHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockBlobCountHead indicates an expected call of ListFctBlockBlobCountHead.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockBlobCountHead(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockBlobCountHead", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockBlobCountHead), varargs...)
}

// ListFctBlockBlobFirstSeenByNode mocks base method.
func (m *MockXatuCBTClient) ListFctBlockBlobFirstSeenByNode(ctx context.Context, in *clickhouse.ListFctBlockBlobFirstSeenByNodeRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockBlobFirstSeenByNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockBlobFirstSeenByNode", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockBlobFirstSeenByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockBlobFirstSeenByNode indicates an expected call of ListFctBlockBlobFirstSeenByNode.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockBlobFirstSeenByNode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockBlobFirstSeenByNode", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockBlobFirstSeenByNode), varargs...)
}

// ListFctBlockFirstSeenByNode mocks base method.
func (m *MockXatuCBTClient) ListFctBlockFirstSeenByNode(ctx context.Context, in *clickhouse.ListFctBlockFirstSeenByNodeRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockFirstSeenByNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockFirstSeenByNode", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockFirstSeenByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockFirstSeenByNode indicates an expected call of ListFctBlockFirstSeenByNode.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockFirstSeenByNode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockFirstSeenByNode", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockFirstSeenByNode), varargs...)
}

// ListFctBlockHead mocks base method.
func (m *MockXatuCBTClient) ListFctBlockHead(ctx context.Context, in *clickhouse.ListFctBlockHeadRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockHeadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockHead", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockHead indicates an expected call of ListFctBlockHead.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockHead(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockHead", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockHead), varargs...)
}

// ListFctBlockMevHead mocks base method.
func (m *MockXatuCBTClient) ListFctBlockMevHead(ctx context.Context, in *clickhouse.ListFctBlockMevHeadRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockMevHeadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockMevHead", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockMevHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockMevHead indicates an expected call of ListFctBlockMevHead.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockMevHead(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockMevHead", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockMevHead), varargs...)
}

// ListFctBlockProposerEntity mocks base method.
func (m *MockXatuCBTClient) ListFctBlockProposerEntity(ctx context.Context, in *clickhouse.ListFctBlockProposerEntityRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockProposerEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockProposerEntity", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockProposerEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockProposerEntity indicates an expected call of ListFctBlockProposerEntity.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockProposerEntity(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockProposerEntity", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockProposerEntity), varargs...)
}

// ListFctMevBidCountByBuilder mocks base method.
func (m *MockXatuCBTClient) ListFctMevBidCountByBuilder(ctx context.Context, in *clickhouse.ListFctMevBidCountByBuilderRequest, opts ...grpc.CallOption) (*clickhouse.ListFctMevBidCountByBuilderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctMevBidCountByBuilder", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctMevBidCountByBuilderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctMevBidCountByBuilder indicates an expected call of ListFctMevBidCountByBuilder.
func (mr *MockXatuCBTClientMockRecorder) ListFctMevBidCountByBuilder(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctMevBidCountByBuilder", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctMevBidCountByBuilder), varargs...)
}

// ListFctMevBidCountByRelay mocks base method.
func (m *MockXatuCBTClient) ListFctMevBidCountByRelay(ctx context.Context, in *clickhouse.ListFctMevBidCountByRelayRequest, opts ...grpc.CallOption) (*clickhouse.ListFctMevBidCountByRelayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctMevBidCountByRelay", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctMevBidCountByRelayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctMevBidCountByRelay indicates an expected call of ListFctMevBidCountByRelay.
func (mr *MockXatuCBTClientMockRecorder) ListFctMevBidCountByRelay(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctMevBidCountByRelay", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctMevBidCountByRelay), varargs...)
}

// ListFctMevBidByBuilder mocks base method.
func (m *MockXatuCBTClient) ListFctMevBidByBuilder(ctx context.Context, in *clickhouse.ListFctMevBidByBuilderRequest, opts ...grpc.CallOption) (*clickhouse.ListFctMevBidByBuilderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctMevBidByBuilder", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctMevBidByBuilderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctMevBidByBuilder indicates an expected call of ListFctMevBidByBuilder.
func (mr *MockXatuCBTClientMockRecorder) ListFctMevBidByBuilder(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctMevBidByBuilder", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctMevBidByBuilder), varargs...)
}

// ListFctNodeActiveLast24H mocks base method.
func (m *MockXatuCBTClient) ListFctNodeActiveLast24H(ctx context.Context, in *clickhouse.ListFctNodeActiveLast24HRequest, opts ...grpc.CallOption) (*clickhouse.ListFctNodeActiveLast24HResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctNodeActiveLast24H", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctNodeActiveLast24HResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctNodeActiveLast24H indicates an expected call of ListFctNodeActiveLast24H.
func (mr *MockXatuCBTClientMockRecorder) ListFctNodeActiveLast24H(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctNodeActiveLast24H", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctNodeActiveLast24H), varargs...)
}
