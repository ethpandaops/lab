// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/proto/xatu_cbt/xatu_cbt_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=pkg/server/proto/xatu_cbt/xatu_cbt_grpc.pb.go -destination=pkg/server/proto/xatu_cbt/mock/xatu_cbt_client.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	xatu_cbt "github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt"
	clickhouse "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockXatuCBTClient is a mock of XatuCBTClient interface.
type MockXatuCBTClient struct {
	ctrl     *gomock.Controller
	recorder *MockXatuCBTClientMockRecorder
	isgomock struct{}
}

// MockXatuCBTClientMockRecorder is the mock recorder for MockXatuCBTClient.
type MockXatuCBTClientMockRecorder struct {
	mock *MockXatuCBTClient
}

// NewMockXatuCBTClient creates a new mock instance.
func NewMockXatuCBTClient(ctrl *gomock.Controller) *MockXatuCBTClient {
	mock := &MockXatuCBTClient{ctrl: ctrl}
	mock.recorder = &MockXatuCBTClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXatuCBTClient) EXPECT() *MockXatuCBTClientMockRecorder {
	return m.recorder
}

// GetDataAvailability mocks base method.
func (m *MockXatuCBTClient) GetDataAvailability(ctx context.Context, in *xatu_cbt.GetDataAvailabilityRequest, opts ...grpc.CallOption) (*xatu_cbt.GetDataAvailabilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataAvailability", varargs...)
	ret0, _ := ret[0].(*xatu_cbt.GetDataAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataAvailability indicates an expected call of GetDataAvailability.
func (mr *MockXatuCBTClientMockRecorder) GetDataAvailability(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataAvailability", reflect.TypeOf((*MockXatuCBTClient)(nil).GetDataAvailability), varargs...)
}

// GetFctAddressAccessTotal mocks base method.
func (m *MockXatuCBTClient) GetFctAddressAccessTotal(ctx context.Context, in *clickhouse.GetFctAddressAccessTotalRequest, opts ...grpc.CallOption) (*clickhouse.GetFctAddressAccessTotalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFctAddressAccessTotal", varargs...)
	ret0, _ := ret[0].(*clickhouse.GetFctAddressAccessTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFctAddressAccessTotal indicates an expected call of GetFctAddressAccessTotal.
func (mr *MockXatuCBTClientMockRecorder) GetFctAddressAccessTotal(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFctAddressAccessTotal", reflect.TypeOf((*MockXatuCBTClient)(nil).GetFctAddressAccessTotal), varargs...)
}

// GetFctAddressStorageSlotTotal mocks base method.
func (m *MockXatuCBTClient) GetFctAddressStorageSlotTotal(ctx context.Context, in *clickhouse.GetFctAddressStorageSlotTotalRequest, opts ...grpc.CallOption) (*clickhouse.GetFctAddressStorageSlotTotalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFctAddressStorageSlotTotal", varargs...)
	ret0, _ := ret[0].(*clickhouse.GetFctAddressStorageSlotTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFctAddressStorageSlotTotal indicates an expected call of GetFctAddressStorageSlotTotal.
func (mr *MockXatuCBTClientMockRecorder) GetFctAddressStorageSlotTotal(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFctAddressStorageSlotTotal", reflect.TypeOf((*MockXatuCBTClient)(nil).GetFctAddressStorageSlotTotal), varargs...)
}

// ListFctAddressAccessChunked10000 mocks base method.
func (m *MockXatuCBTClient) ListFctAddressAccessChunked10000(ctx context.Context, in *clickhouse.ListFctAddressAccessChunked10000Request, opts ...grpc.CallOption) (*clickhouse.ListFctAddressAccessChunked10000Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAddressAccessChunked10000", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressAccessChunked10000Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressAccessChunked10000 indicates an expected call of ListFctAddressAccessChunked10000.
func (mr *MockXatuCBTClientMockRecorder) ListFctAddressAccessChunked10000(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressAccessChunked10000", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAddressAccessChunked10000), varargs...)
}

// ListFctAddressAccessTotal mocks base method.
func (m *MockXatuCBTClient) ListFctAddressAccessTotal(ctx context.Context, in *clickhouse.ListFctAddressAccessTotalRequest, opts ...grpc.CallOption) (*clickhouse.ListFctAddressAccessTotalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAddressAccessTotal", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressAccessTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressAccessTotal indicates an expected call of ListFctAddressAccessTotal.
func (mr *MockXatuCBTClientMockRecorder) ListFctAddressAccessTotal(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressAccessTotal", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAddressAccessTotal), varargs...)
}

// ListFctAddressStorageSlotChunked10000 mocks base method.
func (m *MockXatuCBTClient) ListFctAddressStorageSlotChunked10000(ctx context.Context, in *clickhouse.ListFctAddressStorageSlotChunked10000Request, opts ...grpc.CallOption) (*clickhouse.ListFctAddressStorageSlotChunked10000Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAddressStorageSlotChunked10000", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressStorageSlotChunked10000Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressStorageSlotChunked10000 indicates an expected call of ListFctAddressStorageSlotChunked10000.
func (mr *MockXatuCBTClientMockRecorder) ListFctAddressStorageSlotChunked10000(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressStorageSlotChunked10000", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAddressStorageSlotChunked10000), varargs...)
}

// ListFctAddressStorageSlotExpiredTop100ByContract mocks base method.
func (m *MockXatuCBTClient) ListFctAddressStorageSlotExpiredTop100ByContract(ctx context.Context, in *clickhouse.ListFctAddressStorageSlotExpiredTop100ByContractRequest, opts ...grpc.CallOption) (*clickhouse.ListFctAddressStorageSlotExpiredTop100ByContractResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAddressStorageSlotExpiredTop100ByContract", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressStorageSlotExpiredTop100ByContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressStorageSlotExpiredTop100ByContract indicates an expected call of ListFctAddressStorageSlotExpiredTop100ByContract.
func (mr *MockXatuCBTClientMockRecorder) ListFctAddressStorageSlotExpiredTop100ByContract(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressStorageSlotExpiredTop100ByContract", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAddressStorageSlotExpiredTop100ByContract), varargs...)
}

// ListFctAddressStorageSlotTop100ByContract mocks base method.
func (m *MockXatuCBTClient) ListFctAddressStorageSlotTop100ByContract(ctx context.Context, in *clickhouse.ListFctAddressStorageSlotTop100ByContractRequest, opts ...grpc.CallOption) (*clickhouse.ListFctAddressStorageSlotTop100ByContractResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAddressStorageSlotTop100ByContract", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressStorageSlotTop100ByContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressStorageSlotTop100ByContract indicates an expected call of ListFctAddressStorageSlotTop100ByContract.
func (mr *MockXatuCBTClientMockRecorder) ListFctAddressStorageSlotTop100ByContract(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressStorageSlotTop100ByContract", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAddressStorageSlotTop100ByContract), varargs...)
}

// ListFctAddressStorageSlotTotal mocks base method.
func (m *MockXatuCBTClient) ListFctAddressStorageSlotTotal(ctx context.Context, in *clickhouse.ListFctAddressStorageSlotTotalRequest, opts ...grpc.CallOption) (*clickhouse.ListFctAddressStorageSlotTotalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAddressStorageSlotTotal", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressStorageSlotTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressStorageSlotTotal indicates an expected call of ListFctAddressStorageSlotTotal.
func (mr *MockXatuCBTClientMockRecorder) ListFctAddressStorageSlotTotal(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressStorageSlotTotal", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAddressStorageSlotTotal), varargs...)
}

// ListFctAttestationCorrectnessHead mocks base method.
func (m *MockXatuCBTClient) ListFctAttestationCorrectnessHead(ctx context.Context, in *clickhouse.ListFctAttestationCorrectnessHeadRequest, opts ...grpc.CallOption) (*clickhouse.ListFctAttestationCorrectnessHeadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAttestationCorrectnessHead", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAttestationCorrectnessHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAttestationCorrectnessHead indicates an expected call of ListFctAttestationCorrectnessHead.
func (mr *MockXatuCBTClientMockRecorder) ListFctAttestationCorrectnessHead(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAttestationCorrectnessHead", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAttestationCorrectnessHead), varargs...)
}

// ListFctAttestationFirstSeenChunked50Ms mocks base method.
func (m *MockXatuCBTClient) ListFctAttestationFirstSeenChunked50Ms(ctx context.Context, in *clickhouse.ListFctAttestationFirstSeenChunked50MsRequest, opts ...grpc.CallOption) (*clickhouse.ListFctAttestationFirstSeenChunked50MsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctAttestationFirstSeenChunked50Ms", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctAttestationFirstSeenChunked50MsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAttestationFirstSeenChunked50Ms indicates an expected call of ListFctAttestationFirstSeenChunked50Ms.
func (mr *MockXatuCBTClientMockRecorder) ListFctAttestationFirstSeenChunked50Ms(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAttestationFirstSeenChunked50Ms", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctAttestationFirstSeenChunked50Ms), varargs...)
}

// ListFctBlockBlobCountHead mocks base method.
func (m *MockXatuCBTClient) ListFctBlockBlobCountHead(ctx context.Context, in *clickhouse.ListFctBlockBlobCountHeadRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockBlobCountHeadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockBlobCountHead", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockBlobCountHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockBlobCountHead indicates an expected call of ListFctBlockBlobCountHead.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockBlobCountHead(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockBlobCountHead", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockBlobCountHead), varargs...)
}

// ListFctBlockBlobFirstSeenByNode mocks base method.
func (m *MockXatuCBTClient) ListFctBlockBlobFirstSeenByNode(ctx context.Context, in *clickhouse.ListFctBlockBlobFirstSeenByNodeRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockBlobFirstSeenByNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockBlobFirstSeenByNode", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockBlobFirstSeenByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockBlobFirstSeenByNode indicates an expected call of ListFctBlockBlobFirstSeenByNode.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockBlobFirstSeenByNode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockBlobFirstSeenByNode", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockBlobFirstSeenByNode), varargs...)
}

// ListFctBlockFirstSeenByNode mocks base method.
func (m *MockXatuCBTClient) ListFctBlockFirstSeenByNode(ctx context.Context, in *clickhouse.ListFctBlockFirstSeenByNodeRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockFirstSeenByNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockFirstSeenByNode", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockFirstSeenByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockFirstSeenByNode indicates an expected call of ListFctBlockFirstSeenByNode.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockFirstSeenByNode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockFirstSeenByNode", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockFirstSeenByNode), varargs...)
}

// ListFctBlockHead mocks base method.
func (m *MockXatuCBTClient) ListFctBlockHead(ctx context.Context, in *clickhouse.ListFctBlockHeadRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockHeadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockHead", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockHead indicates an expected call of ListFctBlockHead.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockHead(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockHead", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockHead), varargs...)
}

// ListFctBlockMevHead mocks base method.
func (m *MockXatuCBTClient) ListFctBlockMevHead(ctx context.Context, in *clickhouse.ListFctBlockMevHeadRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockMevHeadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockMevHead", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockMevHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockMevHead indicates an expected call of ListFctBlockMevHead.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockMevHead(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockMevHead", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockMevHead), varargs...)
}

// ListFctBlockProposerEntity mocks base method.
func (m *MockXatuCBTClient) ListFctBlockProposerEntity(ctx context.Context, in *clickhouse.ListFctBlockProposerEntityRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockProposerEntityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockProposerEntity", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockProposerEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockProposerEntity indicates an expected call of ListFctBlockProposerEntity.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockProposerEntity(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockProposerEntity", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockProposerEntity), varargs...)
}

// ListFctMevBidCountByBuilder mocks base method.
func (m *MockXatuCBTClient) ListFctMevBidCountByBuilder(ctx context.Context, in *clickhouse.ListFctMevBidCountByBuilderRequest, opts ...grpc.CallOption) (*clickhouse.ListFctMevBidCountByBuilderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctMevBidCountByBuilder", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctMevBidCountByBuilderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctMevBidCountByBuilder indicates an expected call of ListFctMevBidCountByBuilder.
func (mr *MockXatuCBTClientMockRecorder) ListFctMevBidCountByBuilder(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctMevBidCountByBuilder", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctMevBidCountByBuilder), varargs...)
}

// ListFctMevBidCountByRelay mocks base method.
func (m *MockXatuCBTClient) ListFctMevBidCountByRelay(ctx context.Context, in *clickhouse.ListFctMevBidCountByRelayRequest, opts ...grpc.CallOption) (*clickhouse.ListFctMevBidCountByRelayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctMevBidCountByRelay", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctMevBidCountByRelayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctMevBidCountByRelay indicates an expected call of ListFctMevBidCountByRelay.
func (mr *MockXatuCBTClientMockRecorder) ListFctMevBidCountByRelay(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctMevBidCountByRelay", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctMevBidCountByRelay), varargs...)
}

// ListFctMevBidHighestValueByBuilderChunked50Ms mocks base method.
func (m *MockXatuCBTClient) ListFctMevBidHighestValueByBuilderChunked50Ms(ctx context.Context, in *clickhouse.ListFctMevBidHighestValueByBuilderChunked50MsRequest, opts ...grpc.CallOption) (*clickhouse.ListFctMevBidHighestValueByBuilderChunked50MsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctMevBidHighestValueByBuilderChunked50Ms", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctMevBidHighestValueByBuilderChunked50MsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctMevBidHighestValueByBuilderChunked50Ms indicates an expected call of ListFctMevBidHighestValueByBuilderChunked50Ms.
func (mr *MockXatuCBTClientMockRecorder) ListFctMevBidHighestValueByBuilderChunked50Ms(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctMevBidHighestValueByBuilderChunked50Ms", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctMevBidHighestValueByBuilderChunked50Ms), varargs...)
}

// ListFctNodeActiveLast24H mocks base method.
func (m *MockXatuCBTClient) ListFctNodeActiveLast24H(ctx context.Context, in *clickhouse.ListFctNodeActiveLast24HRequest, opts ...grpc.CallOption) (*clickhouse.ListFctNodeActiveLast24HResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctNodeActiveLast24H", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctNodeActiveLast24HResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctNodeActiveLast24H indicates an expected call of ListFctNodeActiveLast24H.
func (mr *MockXatuCBTClientMockRecorder) ListFctNodeActiveLast24H(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctNodeActiveLast24H", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctNodeActiveLast24H), varargs...)
}

// ListFctPreparedBlock mocks base method.
func (m *MockXatuCBTClient) ListFctPreparedBlock(ctx context.Context, in *clickhouse.ListFctPreparedBlockRequest, opts ...grpc.CallOption) (*clickhouse.ListFctPreparedBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctPreparedBlock", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctPreparedBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctPreparedBlock indicates an expected call of ListFctPreparedBlock.
func (mr *MockXatuCBTClientMockRecorder) ListFctPreparedBlock(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctPreparedBlock", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctPreparedBlock), varargs...)
}

// MockXatuCBTServer is a mock of XatuCBTServer interface.
type MockXatuCBTServer struct {
	ctrl     *gomock.Controller
	recorder *MockXatuCBTServerMockRecorder
	isgomock struct{}
}

// MockXatuCBTServerMockRecorder is the mock recorder for MockXatuCBTServer.
type MockXatuCBTServerMockRecorder struct {
	mock *MockXatuCBTServer
}

// NewMockXatuCBTServer creates a new mock instance.
func NewMockXatuCBTServer(ctrl *gomock.Controller) *MockXatuCBTServer {
	mock := &MockXatuCBTServer{ctrl: ctrl}
	mock.recorder = &MockXatuCBTServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXatuCBTServer) EXPECT() *MockXatuCBTServerMockRecorder {
	return m.recorder
}

// GetDataAvailability mocks base method.
func (m *MockXatuCBTServer) GetDataAvailability(arg0 context.Context, arg1 *xatu_cbt.GetDataAvailabilityRequest) (*xatu_cbt.GetDataAvailabilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataAvailability", arg0, arg1)
	ret0, _ := ret[0].(*xatu_cbt.GetDataAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataAvailability indicates an expected call of GetDataAvailability.
func (mr *MockXatuCBTServerMockRecorder) GetDataAvailability(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataAvailability", reflect.TypeOf((*MockXatuCBTServer)(nil).GetDataAvailability), arg0, arg1)
}

// GetFctAddressAccessTotal mocks base method.
func (m *MockXatuCBTServer) GetFctAddressAccessTotal(arg0 context.Context, arg1 *clickhouse.GetFctAddressAccessTotalRequest) (*clickhouse.GetFctAddressAccessTotalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFctAddressAccessTotal", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.GetFctAddressAccessTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFctAddressAccessTotal indicates an expected call of GetFctAddressAccessTotal.
func (mr *MockXatuCBTServerMockRecorder) GetFctAddressAccessTotal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFctAddressAccessTotal", reflect.TypeOf((*MockXatuCBTServer)(nil).GetFctAddressAccessTotal), arg0, arg1)
}

// GetFctAddressStorageSlotTotal mocks base method.
func (m *MockXatuCBTServer) GetFctAddressStorageSlotTotal(arg0 context.Context, arg1 *clickhouse.GetFctAddressStorageSlotTotalRequest) (*clickhouse.GetFctAddressStorageSlotTotalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFctAddressStorageSlotTotal", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.GetFctAddressStorageSlotTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFctAddressStorageSlotTotal indicates an expected call of GetFctAddressStorageSlotTotal.
func (mr *MockXatuCBTServerMockRecorder) GetFctAddressStorageSlotTotal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFctAddressStorageSlotTotal", reflect.TypeOf((*MockXatuCBTServer)(nil).GetFctAddressStorageSlotTotal), arg0, arg1)
}

// ListFctAddressAccessChunked10000 mocks base method.
func (m *MockXatuCBTServer) ListFctAddressAccessChunked10000(arg0 context.Context, arg1 *clickhouse.ListFctAddressAccessChunked10000Request) (*clickhouse.ListFctAddressAccessChunked10000Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctAddressAccessChunked10000", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressAccessChunked10000Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressAccessChunked10000 indicates an expected call of ListFctAddressAccessChunked10000.
func (mr *MockXatuCBTServerMockRecorder) ListFctAddressAccessChunked10000(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressAccessChunked10000", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctAddressAccessChunked10000), arg0, arg1)
}

// ListFctAddressAccessTotal mocks base method.
func (m *MockXatuCBTServer) ListFctAddressAccessTotal(arg0 context.Context, arg1 *clickhouse.ListFctAddressAccessTotalRequest) (*clickhouse.ListFctAddressAccessTotalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctAddressAccessTotal", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressAccessTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressAccessTotal indicates an expected call of ListFctAddressAccessTotal.
func (mr *MockXatuCBTServerMockRecorder) ListFctAddressAccessTotal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressAccessTotal", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctAddressAccessTotal), arg0, arg1)
}

// ListFctAddressStorageSlotChunked10000 mocks base method.
func (m *MockXatuCBTServer) ListFctAddressStorageSlotChunked10000(arg0 context.Context, arg1 *clickhouse.ListFctAddressStorageSlotChunked10000Request) (*clickhouse.ListFctAddressStorageSlotChunked10000Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctAddressStorageSlotChunked10000", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressStorageSlotChunked10000Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressStorageSlotChunked10000 indicates an expected call of ListFctAddressStorageSlotChunked10000.
func (mr *MockXatuCBTServerMockRecorder) ListFctAddressStorageSlotChunked10000(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressStorageSlotChunked10000", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctAddressStorageSlotChunked10000), arg0, arg1)
}

// ListFctAddressStorageSlotExpiredTop100ByContract mocks base method.
func (m *MockXatuCBTServer) ListFctAddressStorageSlotExpiredTop100ByContract(arg0 context.Context, arg1 *clickhouse.ListFctAddressStorageSlotExpiredTop100ByContractRequest) (*clickhouse.ListFctAddressStorageSlotExpiredTop100ByContractResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctAddressStorageSlotExpiredTop100ByContract", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressStorageSlotExpiredTop100ByContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressStorageSlotExpiredTop100ByContract indicates an expected call of ListFctAddressStorageSlotExpiredTop100ByContract.
func (mr *MockXatuCBTServerMockRecorder) ListFctAddressStorageSlotExpiredTop100ByContract(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressStorageSlotExpiredTop100ByContract", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctAddressStorageSlotExpiredTop100ByContract), arg0, arg1)
}

// ListFctAddressStorageSlotTop100ByContract mocks base method.
func (m *MockXatuCBTServer) ListFctAddressStorageSlotTop100ByContract(arg0 context.Context, arg1 *clickhouse.ListFctAddressStorageSlotTop100ByContractRequest) (*clickhouse.ListFctAddressStorageSlotTop100ByContractResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctAddressStorageSlotTop100ByContract", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressStorageSlotTop100ByContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressStorageSlotTop100ByContract indicates an expected call of ListFctAddressStorageSlotTop100ByContract.
func (mr *MockXatuCBTServerMockRecorder) ListFctAddressStorageSlotTop100ByContract(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressStorageSlotTop100ByContract", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctAddressStorageSlotTop100ByContract), arg0, arg1)
}

// ListFctAddressStorageSlotTotal mocks base method.
func (m *MockXatuCBTServer) ListFctAddressStorageSlotTotal(arg0 context.Context, arg1 *clickhouse.ListFctAddressStorageSlotTotalRequest) (*clickhouse.ListFctAddressStorageSlotTotalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctAddressStorageSlotTotal", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctAddressStorageSlotTotalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAddressStorageSlotTotal indicates an expected call of ListFctAddressStorageSlotTotal.
func (mr *MockXatuCBTServerMockRecorder) ListFctAddressStorageSlotTotal(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAddressStorageSlotTotal", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctAddressStorageSlotTotal), arg0, arg1)
}

// ListFctAttestationCorrectnessHead mocks base method.
func (m *MockXatuCBTServer) ListFctAttestationCorrectnessHead(arg0 context.Context, arg1 *clickhouse.ListFctAttestationCorrectnessHeadRequest) (*clickhouse.ListFctAttestationCorrectnessHeadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctAttestationCorrectnessHead", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctAttestationCorrectnessHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAttestationCorrectnessHead indicates an expected call of ListFctAttestationCorrectnessHead.
func (mr *MockXatuCBTServerMockRecorder) ListFctAttestationCorrectnessHead(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAttestationCorrectnessHead", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctAttestationCorrectnessHead), arg0, arg1)
}

// ListFctAttestationFirstSeenChunked50Ms mocks base method.
func (m *MockXatuCBTServer) ListFctAttestationFirstSeenChunked50Ms(arg0 context.Context, arg1 *clickhouse.ListFctAttestationFirstSeenChunked50MsRequest) (*clickhouse.ListFctAttestationFirstSeenChunked50MsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctAttestationFirstSeenChunked50Ms", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctAttestationFirstSeenChunked50MsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctAttestationFirstSeenChunked50Ms indicates an expected call of ListFctAttestationFirstSeenChunked50Ms.
func (mr *MockXatuCBTServerMockRecorder) ListFctAttestationFirstSeenChunked50Ms(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctAttestationFirstSeenChunked50Ms", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctAttestationFirstSeenChunked50Ms), arg0, arg1)
}

// ListFctBlockBlobCountHead mocks base method.
func (m *MockXatuCBTServer) ListFctBlockBlobCountHead(arg0 context.Context, arg1 *clickhouse.ListFctBlockBlobCountHeadRequest) (*clickhouse.ListFctBlockBlobCountHeadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctBlockBlobCountHead", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockBlobCountHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockBlobCountHead indicates an expected call of ListFctBlockBlobCountHead.
func (mr *MockXatuCBTServerMockRecorder) ListFctBlockBlobCountHead(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockBlobCountHead", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctBlockBlobCountHead), arg0, arg1)
}

// ListFctBlockBlobFirstSeenByNode mocks base method.
func (m *MockXatuCBTServer) ListFctBlockBlobFirstSeenByNode(arg0 context.Context, arg1 *clickhouse.ListFctBlockBlobFirstSeenByNodeRequest) (*clickhouse.ListFctBlockBlobFirstSeenByNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctBlockBlobFirstSeenByNode", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockBlobFirstSeenByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockBlobFirstSeenByNode indicates an expected call of ListFctBlockBlobFirstSeenByNode.
func (mr *MockXatuCBTServerMockRecorder) ListFctBlockBlobFirstSeenByNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockBlobFirstSeenByNode", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctBlockBlobFirstSeenByNode), arg0, arg1)
}

// ListFctBlockFirstSeenByNode mocks base method.
func (m *MockXatuCBTServer) ListFctBlockFirstSeenByNode(arg0 context.Context, arg1 *clickhouse.ListFctBlockFirstSeenByNodeRequest) (*clickhouse.ListFctBlockFirstSeenByNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctBlockFirstSeenByNode", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockFirstSeenByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockFirstSeenByNode indicates an expected call of ListFctBlockFirstSeenByNode.
func (mr *MockXatuCBTServerMockRecorder) ListFctBlockFirstSeenByNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockFirstSeenByNode", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctBlockFirstSeenByNode), arg0, arg1)
}

// ListFctBlockHead mocks base method.
func (m *MockXatuCBTServer) ListFctBlockHead(arg0 context.Context, arg1 *clickhouse.ListFctBlockHeadRequest) (*clickhouse.ListFctBlockHeadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctBlockHead", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockHead indicates an expected call of ListFctBlockHead.
func (mr *MockXatuCBTServerMockRecorder) ListFctBlockHead(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockHead", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctBlockHead), arg0, arg1)
}

// ListFctBlockMevHead mocks base method.
func (m *MockXatuCBTServer) ListFctBlockMevHead(arg0 context.Context, arg1 *clickhouse.ListFctBlockMevHeadRequest) (*clickhouse.ListFctBlockMevHeadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctBlockMevHead", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockMevHeadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockMevHead indicates an expected call of ListFctBlockMevHead.
func (mr *MockXatuCBTServerMockRecorder) ListFctBlockMevHead(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockMevHead", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctBlockMevHead), arg0, arg1)
}

// ListFctBlockProposerEntity mocks base method.
func (m *MockXatuCBTServer) ListFctBlockProposerEntity(arg0 context.Context, arg1 *clickhouse.ListFctBlockProposerEntityRequest) (*clickhouse.ListFctBlockProposerEntityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctBlockProposerEntity", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockProposerEntityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockProposerEntity indicates an expected call of ListFctBlockProposerEntity.
func (mr *MockXatuCBTServerMockRecorder) ListFctBlockProposerEntity(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockProposerEntity", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctBlockProposerEntity), arg0, arg1)
}

// ListFctMevBidCountByBuilder mocks base method.
func (m *MockXatuCBTServer) ListFctMevBidCountByBuilder(arg0 context.Context, arg1 *clickhouse.ListFctMevBidCountByBuilderRequest) (*clickhouse.ListFctMevBidCountByBuilderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctMevBidCountByBuilder", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctMevBidCountByBuilderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctMevBidCountByBuilder indicates an expected call of ListFctMevBidCountByBuilder.
func (mr *MockXatuCBTServerMockRecorder) ListFctMevBidCountByBuilder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctMevBidCountByBuilder", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctMevBidCountByBuilder), arg0, arg1)
}

// ListFctMevBidCountByRelay mocks base method.
func (m *MockXatuCBTServer) ListFctMevBidCountByRelay(arg0 context.Context, arg1 *clickhouse.ListFctMevBidCountByRelayRequest) (*clickhouse.ListFctMevBidCountByRelayResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctMevBidCountByRelay", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctMevBidCountByRelayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctMevBidCountByRelay indicates an expected call of ListFctMevBidCountByRelay.
func (mr *MockXatuCBTServerMockRecorder) ListFctMevBidCountByRelay(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctMevBidCountByRelay", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctMevBidCountByRelay), arg0, arg1)
}

// ListFctMevBidHighestValueByBuilderChunked50Ms mocks base method.
func (m *MockXatuCBTServer) ListFctMevBidHighestValueByBuilderChunked50Ms(arg0 context.Context, arg1 *clickhouse.ListFctMevBidHighestValueByBuilderChunked50MsRequest) (*clickhouse.ListFctMevBidHighestValueByBuilderChunked50MsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctMevBidHighestValueByBuilderChunked50Ms", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctMevBidHighestValueByBuilderChunked50MsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctMevBidHighestValueByBuilderChunked50Ms indicates an expected call of ListFctMevBidHighestValueByBuilderChunked50Ms.
func (mr *MockXatuCBTServerMockRecorder) ListFctMevBidHighestValueByBuilderChunked50Ms(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctMevBidHighestValueByBuilderChunked50Ms", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctMevBidHighestValueByBuilderChunked50Ms), arg0, arg1)
}

// ListFctNodeActiveLast24H mocks base method.
func (m *MockXatuCBTServer) ListFctNodeActiveLast24H(arg0 context.Context, arg1 *clickhouse.ListFctNodeActiveLast24HRequest) (*clickhouse.ListFctNodeActiveLast24HResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctNodeActiveLast24H", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctNodeActiveLast24HResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctNodeActiveLast24H indicates an expected call of ListFctNodeActiveLast24H.
func (mr *MockXatuCBTServerMockRecorder) ListFctNodeActiveLast24H(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctNodeActiveLast24H", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctNodeActiveLast24H), arg0, arg1)
}

// ListFctPreparedBlock mocks base method.
func (m *MockXatuCBTServer) ListFctPreparedBlock(arg0 context.Context, arg1 *clickhouse.ListFctPreparedBlockRequest) (*clickhouse.ListFctPreparedBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFctPreparedBlock", arg0, arg1)
	ret0, _ := ret[0].(*clickhouse.ListFctPreparedBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctPreparedBlock indicates an expected call of ListFctPreparedBlock.
func (mr *MockXatuCBTServerMockRecorder) ListFctPreparedBlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctPreparedBlock", reflect.TypeOf((*MockXatuCBTServer)(nil).ListFctPreparedBlock), arg0, arg1)
}

// mustEmbedUnimplementedXatuCBTServer mocks base method.
func (m *MockXatuCBTServer) mustEmbedUnimplementedXatuCBTServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedXatuCBTServer")
}

// mustEmbedUnimplementedXatuCBTServer indicates an expected call of mustEmbedUnimplementedXatuCBTServer.
func (mr *MockXatuCBTServerMockRecorder) mustEmbedUnimplementedXatuCBTServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedXatuCBTServer", reflect.TypeOf((*MockXatuCBTServer)(nil).mustEmbedUnimplementedXatuCBTServer))
}

// MockUnsafeXatuCBTServer is a mock of UnsafeXatuCBTServer interface.
type MockUnsafeXatuCBTServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeXatuCBTServerMockRecorder
	isgomock struct{}
}

// MockUnsafeXatuCBTServerMockRecorder is the mock recorder for MockUnsafeXatuCBTServer.
type MockUnsafeXatuCBTServerMockRecorder struct {
	mock *MockUnsafeXatuCBTServer
}

// NewMockUnsafeXatuCBTServer creates a new mock instance.
func NewMockUnsafeXatuCBTServer(ctrl *gomock.Controller) *MockUnsafeXatuCBTServer {
	mock := &MockUnsafeXatuCBTServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeXatuCBTServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeXatuCBTServer) EXPECT() *MockUnsafeXatuCBTServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedXatuCBTServer mocks base method.
func (m *MockUnsafeXatuCBTServer) mustEmbedUnimplementedXatuCBTServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedXatuCBTServer")
}

// mustEmbedUnimplementedXatuCBTServer indicates an expected call of mustEmbedUnimplementedXatuCBTServer.
func (mr *MockUnsafeXatuCBTServerMockRecorder) mustEmbedUnimplementedXatuCBTServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedXatuCBTServer", reflect.TypeOf((*MockUnsafeXatuCBTServer)(nil).mustEmbedUnimplementedXatuCBTServer))
}
