// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt (interfaces: XatuCBTClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination xatu_cbt_client.go github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt XatuCBTClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	xatu_cbt "github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt"
	clickhouse "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockXatuCBTClient is a mock of XatuCBTClient interface.
type MockXatuCBTClient struct {
	ctrl     *gomock.Controller
	recorder *MockXatuCBTClientMockRecorder
	isgomock struct{}
}

// MockXatuCBTClientMockRecorder is the mock recorder for MockXatuCBTClient.
type MockXatuCBTClientMockRecorder struct {
	mock *MockXatuCBTClient
}

// NewMockXatuCBTClient creates a new mock instance.
func NewMockXatuCBTClient(ctrl *gomock.Controller) *MockXatuCBTClient {
	mock := &MockXatuCBTClient{ctrl: ctrl}
	mock.recorder = &MockXatuCBTClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXatuCBTClient) EXPECT() *MockXatuCBTClientMockRecorder {
	return m.recorder
}

// GetDataAvailability mocks base method.
func (m *MockXatuCBTClient) GetDataAvailability(ctx context.Context, in *xatu_cbt.GetDataAvailabilityRequest, opts ...grpc.CallOption) (*xatu_cbt.GetDataAvailabilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDataAvailability", varargs...)
	ret0, _ := ret[0].(*xatu_cbt.GetDataAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataAvailability indicates an expected call of GetDataAvailability.
func (mr *MockXatuCBTClientMockRecorder) GetDataAvailability(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataAvailability", reflect.TypeOf((*MockXatuCBTClient)(nil).GetDataAvailability), varargs...)
}

// ListFctBlockFirstSeenByNode mocks base method.
func (m *MockXatuCBTClient) ListFctBlockFirstSeenByNode(ctx context.Context, in *clickhouse.ListFctBlockFirstSeenByNodeRequest, opts ...grpc.CallOption) (*clickhouse.ListFctBlockFirstSeenByNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctBlockFirstSeenByNode", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctBlockFirstSeenByNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctBlockFirstSeenByNode indicates an expected call of ListFctBlockFirstSeenByNode.
func (mr *MockXatuCBTClientMockRecorder) ListFctBlockFirstSeenByNode(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctBlockFirstSeenByNode", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctBlockFirstSeenByNode), varargs...)
}

// ListFctNodeActiveLast24H mocks base method.
func (m *MockXatuCBTClient) ListFctNodeActiveLast24H(ctx context.Context, in *clickhouse.ListFctNodeActiveLast24HRequest, opts ...grpc.CallOption) (*clickhouse.ListFctNodeActiveLast24HResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFctNodeActiveLast24H", varargs...)
	ret0, _ := ret[0].(*clickhouse.ListFctNodeActiveLast24HResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFctNodeActiveLast24H indicates an expected call of ListFctNodeActiveLast24H.
func (mr *MockXatuCBTClientMockRecorder) ListFctNodeActiveLast24H(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFctNodeActiveLast24H", reflect.TypeOf((*MockXatuCBTClient)(nil).ListFctNodeActiveLast24H), varargs...)
}
