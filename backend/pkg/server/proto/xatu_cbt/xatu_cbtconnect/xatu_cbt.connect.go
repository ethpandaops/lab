// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/pkg/server/proto/xatu_cbt/xatu_cbt.proto

package xatu_cbtconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	xatu_cbt "github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// XatuCBTName is the fully-qualified name of the XatuCBT service.
	XatuCBTName = "xatu_cbt.XatuCBT"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// XatuCBTListNetworksProcedure is the fully-qualified name of the XatuCBT's ListNetworks RPC.
	XatuCBTListNetworksProcedure = "/xatu_cbt.XatuCBT/ListNetworks"
	// XatuCBTListXatuNodesProcedure is the fully-qualified name of the XatuCBT's ListXatuNodes RPC.
	XatuCBTListXatuNodesProcedure = "/xatu_cbt.XatuCBT/ListXatuNodes"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	xatuCBTServiceDescriptor             = xatu_cbt.File_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto.Services().ByName("XatuCBT")
	xatuCBTListNetworksMethodDescriptor  = xatuCBTServiceDescriptor.Methods().ByName("ListNetworks")
	xatuCBTListXatuNodesMethodDescriptor = xatuCBTServiceDescriptor.Methods().ByName("ListXatuNodes")
)

// XatuCBTClient is a client for the xatu_cbt.XatuCBT service.
type XatuCBTClient interface {
	ListNetworks(context.Context, *connect.Request[xatu_cbt.ListNetworksRequest]) (*connect.Response[xatu_cbt.ListNetworksResponse], error)
	ListXatuNodes(context.Context, *connect.Request[xatu_cbt.ListXatuNodesRequest]) (*connect.Response[xatu_cbt.ListXatuNodesResponse], error)
}

// NewXatuCBTClient constructs a client for the xatu_cbt.XatuCBT service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewXatuCBTClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) XatuCBTClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &xatuCBTClient{
		listNetworks: connect.NewClient[xatu_cbt.ListNetworksRequest, xatu_cbt.ListNetworksResponse](
			httpClient,
			baseURL+XatuCBTListNetworksProcedure,
			connect.WithSchema(xatuCBTListNetworksMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listXatuNodes: connect.NewClient[xatu_cbt.ListXatuNodesRequest, xatu_cbt.ListXatuNodesResponse](
			httpClient,
			baseURL+XatuCBTListXatuNodesProcedure,
			connect.WithSchema(xatuCBTListXatuNodesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// xatuCBTClient implements XatuCBTClient.
type xatuCBTClient struct {
	listNetworks  *connect.Client[xatu_cbt.ListNetworksRequest, xatu_cbt.ListNetworksResponse]
	listXatuNodes *connect.Client[xatu_cbt.ListXatuNodesRequest, xatu_cbt.ListXatuNodesResponse]
}

// ListNetworks calls xatu_cbt.XatuCBT.ListNetworks.
func (c *xatuCBTClient) ListNetworks(ctx context.Context, req *connect.Request[xatu_cbt.ListNetworksRequest]) (*connect.Response[xatu_cbt.ListNetworksResponse], error) {
	return c.listNetworks.CallUnary(ctx, req)
}

// ListXatuNodes calls xatu_cbt.XatuCBT.ListXatuNodes.
func (c *xatuCBTClient) ListXatuNodes(ctx context.Context, req *connect.Request[xatu_cbt.ListXatuNodesRequest]) (*connect.Response[xatu_cbt.ListXatuNodesResponse], error) {
	return c.listXatuNodes.CallUnary(ctx, req)
}

// XatuCBTHandler is an implementation of the xatu_cbt.XatuCBT service.
type XatuCBTHandler interface {
	ListNetworks(context.Context, *connect.Request[xatu_cbt.ListNetworksRequest]) (*connect.Response[xatu_cbt.ListNetworksResponse], error)
	ListXatuNodes(context.Context, *connect.Request[xatu_cbt.ListXatuNodesRequest]) (*connect.Response[xatu_cbt.ListXatuNodesResponse], error)
}

// NewXatuCBTHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewXatuCBTHandler(svc XatuCBTHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	xatuCBTListNetworksHandler := connect.NewUnaryHandler(
		XatuCBTListNetworksProcedure,
		svc.ListNetworks,
		connect.WithSchema(xatuCBTListNetworksMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListXatuNodesHandler := connect.NewUnaryHandler(
		XatuCBTListXatuNodesProcedure,
		svc.ListXatuNodes,
		connect.WithSchema(xatuCBTListXatuNodesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/xatu_cbt.XatuCBT/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case XatuCBTListNetworksProcedure:
			xatuCBTListNetworksHandler.ServeHTTP(w, r)
		case XatuCBTListXatuNodesProcedure:
			xatuCBTListXatuNodesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedXatuCBTHandler returns CodeUnimplemented from all methods.
type UnimplementedXatuCBTHandler struct{}

func (UnimplementedXatuCBTHandler) ListNetworks(context.Context, *connect.Request[xatu_cbt.ListNetworksRequest]) (*connect.Response[xatu_cbt.ListNetworksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListNetworks is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListXatuNodes(context.Context, *connect.Request[xatu_cbt.ListXatuNodesRequest]) (*connect.Response[xatu_cbt.ListXatuNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListXatuNodes is not implemented"))
}
