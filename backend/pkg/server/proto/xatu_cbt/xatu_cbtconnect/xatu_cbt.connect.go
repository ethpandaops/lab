// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/pkg/server/proto/xatu_cbt/xatu_cbt.proto

package xatu_cbtconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	xatu_cbt "github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt"
	clickhouse "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// XatuCBTName is the fully-qualified name of the XatuCBT service.
	XatuCBTName = "xatu_cbt.XatuCBT"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// XatuCBTListFctNodeActiveLast24HProcedure is the fully-qualified name of the XatuCBT's
	// ListFctNodeActiveLast24h RPC.
	XatuCBTListFctNodeActiveLast24HProcedure = "/xatu_cbt.XatuCBT/ListFctNodeActiveLast24h"
	// XatuCBTListFctBlockFirstSeenByNodeProcedure is the fully-qualified name of the XatuCBT's
	// ListFctBlockFirstSeenByNode RPC.
	XatuCBTListFctBlockFirstSeenByNodeProcedure = "/xatu_cbt.XatuCBT/ListFctBlockFirstSeenByNode"
	// XatuCBTListFctBlockBlobFirstSeenByNodeProcedure is the fully-qualified name of the XatuCBT's
	// ListFctBlockBlobFirstSeenByNode RPC.
	XatuCBTListFctBlockBlobFirstSeenByNodeProcedure = "/xatu_cbt.XatuCBT/ListFctBlockBlobFirstSeenByNode"
	// XatuCBTListFctAttestationFirstSeenChunked50MsProcedure is the fully-qualified name of the
	// XatuCBT's ListFctAttestationFirstSeenChunked50ms RPC.
	XatuCBTListFctAttestationFirstSeenChunked50MsProcedure = "/xatu_cbt.XatuCBT/ListFctAttestationFirstSeenChunked50ms"
	// XatuCBTListFctAttestationCorrectnessHeadProcedure is the fully-qualified name of the XatuCBT's
	// ListFctAttestationCorrectnessHead RPC.
	XatuCBTListFctAttestationCorrectnessHeadProcedure = "/xatu_cbt.XatuCBT/ListFctAttestationCorrectnessHead"
	// XatuCBTListFctMevBidCountByRelayProcedure is the fully-qualified name of the XatuCBT's
	// ListFctMevBidCountByRelay RPC.
	XatuCBTListFctMevBidCountByRelayProcedure = "/xatu_cbt.XatuCBT/ListFctMevBidCountByRelay"
	// XatuCBTListFctMevBidValueByBuilderProcedure is the fully-qualified name of the XatuCBT's
	// ListFctMevBidValueByBuilder RPC.
	XatuCBTListFctMevBidValueByBuilderProcedure = "/xatu_cbt.XatuCBT/ListFctMevBidValueByBuilder"
	// XatuCBTListFctBlockBlobCountHeadProcedure is the fully-qualified name of the XatuCBT's
	// ListFctBlockBlobCountHead RPC.
	XatuCBTListFctBlockBlobCountHeadProcedure = "/xatu_cbt.XatuCBT/ListFctBlockBlobCountHead"
	// XatuCBTListFctBlockHeadProcedure is the fully-qualified name of the XatuCBT's ListFctBlockHead
	// RPC.
	XatuCBTListFctBlockHeadProcedure = "/xatu_cbt.XatuCBT/ListFctBlockHead"
	// XatuCBTListFctBlockMevHeadProcedure is the fully-qualified name of the XatuCBT's
	// ListFctBlockMevHead RPC.
	XatuCBTListFctBlockMevHeadProcedure = "/xatu_cbt.XatuCBT/ListFctBlockMevHead"
	// XatuCBTListFctBlockProposerEntityProcedure is the fully-qualified name of the XatuCBT's
	// ListFctBlockProposerEntity RPC.
	XatuCBTListFctBlockProposerEntityProcedure = "/xatu_cbt.XatuCBT/ListFctBlockProposerEntity"
	// XatuCBTGetDataAvailabilityProcedure is the fully-qualified name of the XatuCBT's
	// GetDataAvailability RPC.
	XatuCBTGetDataAvailabilityProcedure = "/xatu_cbt.XatuCBT/GetDataAvailability"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	xatuCBTServiceDescriptor                                      = xatu_cbt.File_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto.Services().ByName("XatuCBT")
	xatuCBTListFctNodeActiveLast24HMethodDescriptor               = xatuCBTServiceDescriptor.Methods().ByName("ListFctNodeActiveLast24h")
	xatuCBTListFctBlockFirstSeenByNodeMethodDescriptor            = xatuCBTServiceDescriptor.Methods().ByName("ListFctBlockFirstSeenByNode")
	xatuCBTListFctBlockBlobFirstSeenByNodeMethodDescriptor        = xatuCBTServiceDescriptor.Methods().ByName("ListFctBlockBlobFirstSeenByNode")
	xatuCBTListFctAttestationFirstSeenChunked50MsMethodDescriptor = xatuCBTServiceDescriptor.Methods().ByName("ListFctAttestationFirstSeenChunked50ms")
	xatuCBTListFctAttestationCorrectnessHeadMethodDescriptor      = xatuCBTServiceDescriptor.Methods().ByName("ListFctAttestationCorrectnessHead")
	xatuCBTListFctMevBidCountByRelayMethodDescriptor              = xatuCBTServiceDescriptor.Methods().ByName("ListFctMevBidCountByRelay")
	xatuCBTListFctMevBidValueByBuilderMethodDescriptor            = xatuCBTServiceDescriptor.Methods().ByName("ListFctMevBidValueByBuilder")
	xatuCBTListFctBlockBlobCountHeadMethodDescriptor              = xatuCBTServiceDescriptor.Methods().ByName("ListFctBlockBlobCountHead")
	xatuCBTListFctBlockHeadMethodDescriptor                       = xatuCBTServiceDescriptor.Methods().ByName("ListFctBlockHead")
	xatuCBTListFctBlockMevHeadMethodDescriptor                    = xatuCBTServiceDescriptor.Methods().ByName("ListFctBlockMevHead")
	xatuCBTListFctBlockProposerEntityMethodDescriptor             = xatuCBTServiceDescriptor.Methods().ByName("ListFctBlockProposerEntity")
	xatuCBTGetDataAvailabilityMethodDescriptor                    = xatuCBTServiceDescriptor.Methods().ByName("GetDataAvailability")
)

// XatuCBTClient is a client for the xatu_cbt.XatuCBT service.
type XatuCBTClient interface {
	// ListFctNodeActiveLast24h queries the fact table of nodes active in the last 24 hours.
	// This table contains node metadata for all nodes seen within a rolling 24-hour window.
	ListFctNodeActiveLast24H(context.Context, *connect.Request[clickhouse.ListFctNodeActiveLast24HRequest]) (*connect.Response[clickhouse.ListFctNodeActiveLast24HResponse], error)
	// ListFctBlockFirstSeenByNode returns block timing data from the fct_block_first_seen_by_node table.
	// This table contains information about when blocks were first seen by different nodes.
	ListFctBlockFirstSeenByNode(context.Context, *connect.Request[clickhouse.ListFctBlockFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockFirstSeenByNodeResponse], error)
	// ListFctBlockBlobFirstSeenByNode returns blob timing data from the fct_block_blob_first_seen_by_node table.
	// This table contains information about when blobs were first seen by different nodes.
	ListFctBlockBlobFirstSeenByNode(context.Context, *connect.Request[clickhouse.ListFctBlockBlobFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockBlobFirstSeenByNodeResponse], error)
	// ListFctAttestationFirstSeenChunked50ms returns attestation timing data in 50ms chunks.
	// This table contains attestations first seen on the unfinalized chain broken down by 50ms intervals.
	ListFctAttestationFirstSeenChunked50Ms(context.Context, *connect.Request[clickhouse.ListFctAttestationFirstSeenChunked50MsRequest]) (*connect.Response[clickhouse.ListFctAttestationFirstSeenChunked50MsResponse], error)
	// ListFctAttestationCorrectnessHead returns attestation correctness data for the head chain.
	// This table contains voting statistics for blocks showing the actual vs expected attestations.
	ListFctAttestationCorrectnessHead(context.Context, *connect.Request[clickhouse.ListFctAttestationCorrectnessHeadRequest]) (*connect.Response[clickhouse.ListFctAttestationCorrectnessHeadResponse], error)
	// ListFctMevBidCountByRelay returns MEV relay bid count data.
	// This table contains the total number of MEV relay bids for a slot by relay.
	ListFctMevBidCountByRelay(context.Context, *connect.Request[clickhouse.ListFctMevBidCountByRelayRequest]) (*connect.Response[clickhouse.ListFctMevBidCountByRelayResponse], error)
	// ListFctMevBidValueByBuilder returns highest MEV bid values by builder for a slot.
	// This table contains the highest value MEV relay bid for a slot by builder.
	ListFctMevBidValueByBuilder(context.Context, *connect.Request[clickhouse.ListFctMevBidValueByBuilderRequest]) (*connect.Response[clickhouse.ListFctMevBidValueByBuilderResponse], error)
	// ListFctBlockBlobCountHead returns blob count data for blocks in the unfinalized chain.
	// This table contains the number of blobs for each block, with forks potentially causing multiple blocks per slot.
	ListFctBlockBlobCountHead(context.Context, *connect.Request[clickhouse.ListFctBlockBlobCountHeadRequest]) (*connect.Response[clickhouse.ListFctBlockBlobCountHeadResponse], error)
	// ListFctBlockHead returns beacon block data from the fct_block_head table.
	// This table contains block details for the unfinalized chain, with potential multiple blocks per slot due to forks.
	ListFctBlockHead(context.Context, *connect.Request[clickhouse.ListFctBlockHeadRequest]) (*connect.Response[clickhouse.ListFctBlockHeadResponse], error)
	// ListFctBlockMevHead returns MEV block data for the unfinalized chain.
	// This table contains MEV relay proposer payload delivered for blocks on the unfinalized chain.
	ListFctBlockMevHead(context.Context, *connect.Request[clickhouse.ListFctBlockMevHeadRequest]) (*connect.Response[clickhouse.ListFctBlockMevHeadResponse], error)
	// ListFctBlockProposerEntity returns proposer entity data from the fct_block_proposer_entity table.
	// This table contains information about entities that proposed blocks in the unfinalized chain.
	ListFctBlockProposerEntity(context.Context, *connect.Request[clickhouse.ListFctBlockProposerEntityRequest]) (*connect.Response[clickhouse.ListFctBlockProposerEntityResponse], error)
	// GetDataAvailability returns the common availability interval across a set of transformation tables.
	// It calculates the overlapping data range for the specified tables and returns slot information.
	GetDataAvailability(context.Context, *connect.Request[xatu_cbt.GetDataAvailabilityRequest]) (*connect.Response[xatu_cbt.GetDataAvailabilityResponse], error)
}

// NewXatuCBTClient constructs a client for the xatu_cbt.XatuCBT service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewXatuCBTClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) XatuCBTClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &xatuCBTClient{
		listFctNodeActiveLast24H: connect.NewClient[clickhouse.ListFctNodeActiveLast24HRequest, clickhouse.ListFctNodeActiveLast24HResponse](
			httpClient,
			baseURL+XatuCBTListFctNodeActiveLast24HProcedure,
			connect.WithSchema(xatuCBTListFctNodeActiveLast24HMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctBlockFirstSeenByNode: connect.NewClient[clickhouse.ListFctBlockFirstSeenByNodeRequest, clickhouse.ListFctBlockFirstSeenByNodeResponse](
			httpClient,
			baseURL+XatuCBTListFctBlockFirstSeenByNodeProcedure,
			connect.WithSchema(xatuCBTListFctBlockFirstSeenByNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctBlockBlobFirstSeenByNode: connect.NewClient[clickhouse.ListFctBlockBlobFirstSeenByNodeRequest, clickhouse.ListFctBlockBlobFirstSeenByNodeResponse](
			httpClient,
			baseURL+XatuCBTListFctBlockBlobFirstSeenByNodeProcedure,
			connect.WithSchema(xatuCBTListFctBlockBlobFirstSeenByNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctAttestationFirstSeenChunked50Ms: connect.NewClient[clickhouse.ListFctAttestationFirstSeenChunked50MsRequest, clickhouse.ListFctAttestationFirstSeenChunked50MsResponse](
			httpClient,
			baseURL+XatuCBTListFctAttestationFirstSeenChunked50MsProcedure,
			connect.WithSchema(xatuCBTListFctAttestationFirstSeenChunked50MsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctAttestationCorrectnessHead: connect.NewClient[clickhouse.ListFctAttestationCorrectnessHeadRequest, clickhouse.ListFctAttestationCorrectnessHeadResponse](
			httpClient,
			baseURL+XatuCBTListFctAttestationCorrectnessHeadProcedure,
			connect.WithSchema(xatuCBTListFctAttestationCorrectnessHeadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctMevBidCountByRelay: connect.NewClient[clickhouse.ListFctMevBidCountByRelayRequest, clickhouse.ListFctMevBidCountByRelayResponse](
			httpClient,
			baseURL+XatuCBTListFctMevBidCountByRelayProcedure,
			connect.WithSchema(xatuCBTListFctMevBidCountByRelayMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctMevBidValueByBuilder: connect.NewClient[clickhouse.ListFctMevBidValueByBuilderRequest, clickhouse.ListFctMevBidValueByBuilderResponse](
			httpClient,
			baseURL+XatuCBTListFctMevBidValueByBuilderProcedure,
			connect.WithSchema(xatuCBTListFctMevBidValueByBuilderMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctBlockBlobCountHead: connect.NewClient[clickhouse.ListFctBlockBlobCountHeadRequest, clickhouse.ListFctBlockBlobCountHeadResponse](
			httpClient,
			baseURL+XatuCBTListFctBlockBlobCountHeadProcedure,
			connect.WithSchema(xatuCBTListFctBlockBlobCountHeadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctBlockHead: connect.NewClient[clickhouse.ListFctBlockHeadRequest, clickhouse.ListFctBlockHeadResponse](
			httpClient,
			baseURL+XatuCBTListFctBlockHeadProcedure,
			connect.WithSchema(xatuCBTListFctBlockHeadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctBlockMevHead: connect.NewClient[clickhouse.ListFctBlockMevHeadRequest, clickhouse.ListFctBlockMevHeadResponse](
			httpClient,
			baseURL+XatuCBTListFctBlockMevHeadProcedure,
			connect.WithSchema(xatuCBTListFctBlockMevHeadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctBlockProposerEntity: connect.NewClient[clickhouse.ListFctBlockProposerEntityRequest, clickhouse.ListFctBlockProposerEntityResponse](
			httpClient,
			baseURL+XatuCBTListFctBlockProposerEntityProcedure,
			connect.WithSchema(xatuCBTListFctBlockProposerEntityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDataAvailability: connect.NewClient[xatu_cbt.GetDataAvailabilityRequest, xatu_cbt.GetDataAvailabilityResponse](
			httpClient,
			baseURL+XatuCBTGetDataAvailabilityProcedure,
			connect.WithSchema(xatuCBTGetDataAvailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// xatuCBTClient implements XatuCBTClient.
type xatuCBTClient struct {
	listFctNodeActiveLast24H               *connect.Client[clickhouse.ListFctNodeActiveLast24HRequest, clickhouse.ListFctNodeActiveLast24HResponse]
	listFctBlockFirstSeenByNode            *connect.Client[clickhouse.ListFctBlockFirstSeenByNodeRequest, clickhouse.ListFctBlockFirstSeenByNodeResponse]
	listFctBlockBlobFirstSeenByNode        *connect.Client[clickhouse.ListFctBlockBlobFirstSeenByNodeRequest, clickhouse.ListFctBlockBlobFirstSeenByNodeResponse]
	listFctAttestationFirstSeenChunked50Ms *connect.Client[clickhouse.ListFctAttestationFirstSeenChunked50MsRequest, clickhouse.ListFctAttestationFirstSeenChunked50MsResponse]
	listFctAttestationCorrectnessHead      *connect.Client[clickhouse.ListFctAttestationCorrectnessHeadRequest, clickhouse.ListFctAttestationCorrectnessHeadResponse]
	listFctMevBidCountByRelay              *connect.Client[clickhouse.ListFctMevBidCountByRelayRequest, clickhouse.ListFctMevBidCountByRelayResponse]
	listFctMevBidValueByBuilder            *connect.Client[clickhouse.ListFctMevBidValueByBuilderRequest, clickhouse.ListFctMevBidValueByBuilderResponse]
	listFctBlockBlobCountHead              *connect.Client[clickhouse.ListFctBlockBlobCountHeadRequest, clickhouse.ListFctBlockBlobCountHeadResponse]
	listFctBlockHead                       *connect.Client[clickhouse.ListFctBlockHeadRequest, clickhouse.ListFctBlockHeadResponse]
	listFctBlockMevHead                    *connect.Client[clickhouse.ListFctBlockMevHeadRequest, clickhouse.ListFctBlockMevHeadResponse]
	listFctBlockProposerEntity             *connect.Client[clickhouse.ListFctBlockProposerEntityRequest, clickhouse.ListFctBlockProposerEntityResponse]
	getDataAvailability                    *connect.Client[xatu_cbt.GetDataAvailabilityRequest, xatu_cbt.GetDataAvailabilityResponse]
}

// ListFctNodeActiveLast24H calls xatu_cbt.XatuCBT.ListFctNodeActiveLast24h.
func (c *xatuCBTClient) ListFctNodeActiveLast24H(ctx context.Context, req *connect.Request[clickhouse.ListFctNodeActiveLast24HRequest]) (*connect.Response[clickhouse.ListFctNodeActiveLast24HResponse], error) {
	return c.listFctNodeActiveLast24H.CallUnary(ctx, req)
}

// ListFctBlockFirstSeenByNode calls xatu_cbt.XatuCBT.ListFctBlockFirstSeenByNode.
func (c *xatuCBTClient) ListFctBlockFirstSeenByNode(ctx context.Context, req *connect.Request[clickhouse.ListFctBlockFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockFirstSeenByNodeResponse], error) {
	return c.listFctBlockFirstSeenByNode.CallUnary(ctx, req)
}

// ListFctBlockBlobFirstSeenByNode calls xatu_cbt.XatuCBT.ListFctBlockBlobFirstSeenByNode.
func (c *xatuCBTClient) ListFctBlockBlobFirstSeenByNode(ctx context.Context, req *connect.Request[clickhouse.ListFctBlockBlobFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockBlobFirstSeenByNodeResponse], error) {
	return c.listFctBlockBlobFirstSeenByNode.CallUnary(ctx, req)
}

// ListFctAttestationFirstSeenChunked50Ms calls
// xatu_cbt.XatuCBT.ListFctAttestationFirstSeenChunked50ms.
func (c *xatuCBTClient) ListFctAttestationFirstSeenChunked50Ms(ctx context.Context, req *connect.Request[clickhouse.ListFctAttestationFirstSeenChunked50MsRequest]) (*connect.Response[clickhouse.ListFctAttestationFirstSeenChunked50MsResponse], error) {
	return c.listFctAttestationFirstSeenChunked50Ms.CallUnary(ctx, req)
}

// ListFctAttestationCorrectnessHead calls xatu_cbt.XatuCBT.ListFctAttestationCorrectnessHead.
func (c *xatuCBTClient) ListFctAttestationCorrectnessHead(ctx context.Context, req *connect.Request[clickhouse.ListFctAttestationCorrectnessHeadRequest]) (*connect.Response[clickhouse.ListFctAttestationCorrectnessHeadResponse], error) {
	return c.listFctAttestationCorrectnessHead.CallUnary(ctx, req)
}

// ListFctMevBidCountByRelay calls xatu_cbt.XatuCBT.ListFctMevBidCountByRelay.
func (c *xatuCBTClient) ListFctMevBidCountByRelay(ctx context.Context, req *connect.Request[clickhouse.ListFctMevBidCountByRelayRequest]) (*connect.Response[clickhouse.ListFctMevBidCountByRelayResponse], error) {
	return c.listFctMevBidCountByRelay.CallUnary(ctx, req)
}

// ListFctMevBidValueByBuilder calls xatu_cbt.XatuCBT.ListFctMevBidValueByBuilder.
func (c *xatuCBTClient) ListFctMevBidValueByBuilder(ctx context.Context, req *connect.Request[clickhouse.ListFctMevBidValueByBuilderRequest]) (*connect.Response[clickhouse.ListFctMevBidValueByBuilderResponse], error) {
	return c.listFctMevBidValueByBuilder.CallUnary(ctx, req)
}

// ListFctBlockBlobCountHead calls xatu_cbt.XatuCBT.ListFctBlockBlobCountHead.
func (c *xatuCBTClient) ListFctBlockBlobCountHead(ctx context.Context, req *connect.Request[clickhouse.ListFctBlockBlobCountHeadRequest]) (*connect.Response[clickhouse.ListFctBlockBlobCountHeadResponse], error) {
	return c.listFctBlockBlobCountHead.CallUnary(ctx, req)
}

// ListFctBlockHead calls xatu_cbt.XatuCBT.ListFctBlockHead.
func (c *xatuCBTClient) ListFctBlockHead(ctx context.Context, req *connect.Request[clickhouse.ListFctBlockHeadRequest]) (*connect.Response[clickhouse.ListFctBlockHeadResponse], error) {
	return c.listFctBlockHead.CallUnary(ctx, req)
}

// ListFctBlockMevHead calls xatu_cbt.XatuCBT.ListFctBlockMevHead.
func (c *xatuCBTClient) ListFctBlockMevHead(ctx context.Context, req *connect.Request[clickhouse.ListFctBlockMevHeadRequest]) (*connect.Response[clickhouse.ListFctBlockMevHeadResponse], error) {
	return c.listFctBlockMevHead.CallUnary(ctx, req)
}

// ListFctBlockProposerEntity calls xatu_cbt.XatuCBT.ListFctBlockProposerEntity.
func (c *xatuCBTClient) ListFctBlockProposerEntity(ctx context.Context, req *connect.Request[clickhouse.ListFctBlockProposerEntityRequest]) (*connect.Response[clickhouse.ListFctBlockProposerEntityResponse], error) {
	return c.listFctBlockProposerEntity.CallUnary(ctx, req)
}

// GetDataAvailability calls xatu_cbt.XatuCBT.GetDataAvailability.
func (c *xatuCBTClient) GetDataAvailability(ctx context.Context, req *connect.Request[xatu_cbt.GetDataAvailabilityRequest]) (*connect.Response[xatu_cbt.GetDataAvailabilityResponse], error) {
	return c.getDataAvailability.CallUnary(ctx, req)
}

// XatuCBTHandler is an implementation of the xatu_cbt.XatuCBT service.
type XatuCBTHandler interface {
	// ListFctNodeActiveLast24h queries the fact table of nodes active in the last 24 hours.
	// This table contains node metadata for all nodes seen within a rolling 24-hour window.
	ListFctNodeActiveLast24H(context.Context, *connect.Request[clickhouse.ListFctNodeActiveLast24HRequest]) (*connect.Response[clickhouse.ListFctNodeActiveLast24HResponse], error)
	// ListFctBlockFirstSeenByNode returns block timing data from the fct_block_first_seen_by_node table.
	// This table contains information about when blocks were first seen by different nodes.
	ListFctBlockFirstSeenByNode(context.Context, *connect.Request[clickhouse.ListFctBlockFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockFirstSeenByNodeResponse], error)
	// ListFctBlockBlobFirstSeenByNode returns blob timing data from the fct_block_blob_first_seen_by_node table.
	// This table contains information about when blobs were first seen by different nodes.
	ListFctBlockBlobFirstSeenByNode(context.Context, *connect.Request[clickhouse.ListFctBlockBlobFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockBlobFirstSeenByNodeResponse], error)
	// ListFctAttestationFirstSeenChunked50ms returns attestation timing data in 50ms chunks.
	// This table contains attestations first seen on the unfinalized chain broken down by 50ms intervals.
	ListFctAttestationFirstSeenChunked50Ms(context.Context, *connect.Request[clickhouse.ListFctAttestationFirstSeenChunked50MsRequest]) (*connect.Response[clickhouse.ListFctAttestationFirstSeenChunked50MsResponse], error)
	// ListFctAttestationCorrectnessHead returns attestation correctness data for the head chain.
	// This table contains voting statistics for blocks showing the actual vs expected attestations.
	ListFctAttestationCorrectnessHead(context.Context, *connect.Request[clickhouse.ListFctAttestationCorrectnessHeadRequest]) (*connect.Response[clickhouse.ListFctAttestationCorrectnessHeadResponse], error)
	// ListFctMevBidCountByRelay returns MEV relay bid count data.
	// This table contains the total number of MEV relay bids for a slot by relay.
	ListFctMevBidCountByRelay(context.Context, *connect.Request[clickhouse.ListFctMevBidCountByRelayRequest]) (*connect.Response[clickhouse.ListFctMevBidCountByRelayResponse], error)
	// ListFctMevBidValueByBuilder returns highest MEV bid values by builder for a slot.
	// This table contains the highest value MEV relay bid for a slot by builder.
	ListFctMevBidValueByBuilder(context.Context, *connect.Request[clickhouse.ListFctMevBidValueByBuilderRequest]) (*connect.Response[clickhouse.ListFctMevBidValueByBuilderResponse], error)
	// ListFctBlockBlobCountHead returns blob count data for blocks in the unfinalized chain.
	// This table contains the number of blobs for each block, with forks potentially causing multiple blocks per slot.
	ListFctBlockBlobCountHead(context.Context, *connect.Request[clickhouse.ListFctBlockBlobCountHeadRequest]) (*connect.Response[clickhouse.ListFctBlockBlobCountHeadResponse], error)
	// ListFctBlockHead returns beacon block data from the fct_block_head table.
	// This table contains block details for the unfinalized chain, with potential multiple blocks per slot due to forks.
	ListFctBlockHead(context.Context, *connect.Request[clickhouse.ListFctBlockHeadRequest]) (*connect.Response[clickhouse.ListFctBlockHeadResponse], error)
	// ListFctBlockMevHead returns MEV block data for the unfinalized chain.
	// This table contains MEV relay proposer payload delivered for blocks on the unfinalized chain.
	ListFctBlockMevHead(context.Context, *connect.Request[clickhouse.ListFctBlockMevHeadRequest]) (*connect.Response[clickhouse.ListFctBlockMevHeadResponse], error)
	// ListFctBlockProposerEntity returns proposer entity data from the fct_block_proposer_entity table.
	// This table contains information about entities that proposed blocks in the unfinalized chain.
	ListFctBlockProposerEntity(context.Context, *connect.Request[clickhouse.ListFctBlockProposerEntityRequest]) (*connect.Response[clickhouse.ListFctBlockProposerEntityResponse], error)
	// GetDataAvailability returns the common availability interval across a set of transformation tables.
	// It calculates the overlapping data range for the specified tables and returns slot information.
	GetDataAvailability(context.Context, *connect.Request[xatu_cbt.GetDataAvailabilityRequest]) (*connect.Response[xatu_cbt.GetDataAvailabilityResponse], error)
}

// NewXatuCBTHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewXatuCBTHandler(svc XatuCBTHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	xatuCBTListFctNodeActiveLast24HHandler := connect.NewUnaryHandler(
		XatuCBTListFctNodeActiveLast24HProcedure,
		svc.ListFctNodeActiveLast24H,
		connect.WithSchema(xatuCBTListFctNodeActiveLast24HMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctBlockFirstSeenByNodeHandler := connect.NewUnaryHandler(
		XatuCBTListFctBlockFirstSeenByNodeProcedure,
		svc.ListFctBlockFirstSeenByNode,
		connect.WithSchema(xatuCBTListFctBlockFirstSeenByNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctBlockBlobFirstSeenByNodeHandler := connect.NewUnaryHandler(
		XatuCBTListFctBlockBlobFirstSeenByNodeProcedure,
		svc.ListFctBlockBlobFirstSeenByNode,
		connect.WithSchema(xatuCBTListFctBlockBlobFirstSeenByNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctAttestationFirstSeenChunked50MsHandler := connect.NewUnaryHandler(
		XatuCBTListFctAttestationFirstSeenChunked50MsProcedure,
		svc.ListFctAttestationFirstSeenChunked50Ms,
		connect.WithSchema(xatuCBTListFctAttestationFirstSeenChunked50MsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctAttestationCorrectnessHeadHandler := connect.NewUnaryHandler(
		XatuCBTListFctAttestationCorrectnessHeadProcedure,
		svc.ListFctAttestationCorrectnessHead,
		connect.WithSchema(xatuCBTListFctAttestationCorrectnessHeadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctMevBidCountByRelayHandler := connect.NewUnaryHandler(
		XatuCBTListFctMevBidCountByRelayProcedure,
		svc.ListFctMevBidCountByRelay,
		connect.WithSchema(xatuCBTListFctMevBidCountByRelayMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctMevBidValueByBuilderHandler := connect.NewUnaryHandler(
		XatuCBTListFctMevBidValueByBuilderProcedure,
		svc.ListFctMevBidValueByBuilder,
		connect.WithSchema(xatuCBTListFctMevBidValueByBuilderMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctBlockBlobCountHeadHandler := connect.NewUnaryHandler(
		XatuCBTListFctBlockBlobCountHeadProcedure,
		svc.ListFctBlockBlobCountHead,
		connect.WithSchema(xatuCBTListFctBlockBlobCountHeadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctBlockHeadHandler := connect.NewUnaryHandler(
		XatuCBTListFctBlockHeadProcedure,
		svc.ListFctBlockHead,
		connect.WithSchema(xatuCBTListFctBlockHeadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctBlockMevHeadHandler := connect.NewUnaryHandler(
		XatuCBTListFctBlockMevHeadProcedure,
		svc.ListFctBlockMevHead,
		connect.WithSchema(xatuCBTListFctBlockMevHeadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctBlockProposerEntityHandler := connect.NewUnaryHandler(
		XatuCBTListFctBlockProposerEntityProcedure,
		svc.ListFctBlockProposerEntity,
		connect.WithSchema(xatuCBTListFctBlockProposerEntityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTGetDataAvailabilityHandler := connect.NewUnaryHandler(
		XatuCBTGetDataAvailabilityProcedure,
		svc.GetDataAvailability,
		connect.WithSchema(xatuCBTGetDataAvailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/xatu_cbt.XatuCBT/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case XatuCBTListFctNodeActiveLast24HProcedure:
			xatuCBTListFctNodeActiveLast24HHandler.ServeHTTP(w, r)
		case XatuCBTListFctBlockFirstSeenByNodeProcedure:
			xatuCBTListFctBlockFirstSeenByNodeHandler.ServeHTTP(w, r)
		case XatuCBTListFctBlockBlobFirstSeenByNodeProcedure:
			xatuCBTListFctBlockBlobFirstSeenByNodeHandler.ServeHTTP(w, r)
		case XatuCBTListFctAttestationFirstSeenChunked50MsProcedure:
			xatuCBTListFctAttestationFirstSeenChunked50MsHandler.ServeHTTP(w, r)
		case XatuCBTListFctAttestationCorrectnessHeadProcedure:
			xatuCBTListFctAttestationCorrectnessHeadHandler.ServeHTTP(w, r)
		case XatuCBTListFctMevBidCountByRelayProcedure:
			xatuCBTListFctMevBidCountByRelayHandler.ServeHTTP(w, r)
		case XatuCBTListFctMevBidValueByBuilderProcedure:
			xatuCBTListFctMevBidValueByBuilderHandler.ServeHTTP(w, r)
		case XatuCBTListFctBlockBlobCountHeadProcedure:
			xatuCBTListFctBlockBlobCountHeadHandler.ServeHTTP(w, r)
		case XatuCBTListFctBlockHeadProcedure:
			xatuCBTListFctBlockHeadHandler.ServeHTTP(w, r)
		case XatuCBTListFctBlockMevHeadProcedure:
			xatuCBTListFctBlockMevHeadHandler.ServeHTTP(w, r)
		case XatuCBTListFctBlockProposerEntityProcedure:
			xatuCBTListFctBlockProposerEntityHandler.ServeHTTP(w, r)
		case XatuCBTGetDataAvailabilityProcedure:
			xatuCBTGetDataAvailabilityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedXatuCBTHandler returns CodeUnimplemented from all methods.
type UnimplementedXatuCBTHandler struct{}

func (UnimplementedXatuCBTHandler) ListFctNodeActiveLast24H(context.Context, *connect.Request[clickhouse.ListFctNodeActiveLast24HRequest]) (*connect.Response[clickhouse.ListFctNodeActiveLast24HResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctNodeActiveLast24h is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctBlockFirstSeenByNode(context.Context, *connect.Request[clickhouse.ListFctBlockFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockFirstSeenByNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctBlockFirstSeenByNode is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctBlockBlobFirstSeenByNode(context.Context, *connect.Request[clickhouse.ListFctBlockBlobFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockBlobFirstSeenByNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctBlockBlobFirstSeenByNode is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctAttestationFirstSeenChunked50Ms(context.Context, *connect.Request[clickhouse.ListFctAttestationFirstSeenChunked50MsRequest]) (*connect.Response[clickhouse.ListFctAttestationFirstSeenChunked50MsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctAttestationFirstSeenChunked50ms is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctAttestationCorrectnessHead(context.Context, *connect.Request[clickhouse.ListFctAttestationCorrectnessHeadRequest]) (*connect.Response[clickhouse.ListFctAttestationCorrectnessHeadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctAttestationCorrectnessHead is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctMevBidCountByRelay(context.Context, *connect.Request[clickhouse.ListFctMevBidCountByRelayRequest]) (*connect.Response[clickhouse.ListFctMevBidCountByRelayResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctMevBidCountByRelay is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctMevBidValueByBuilder(context.Context, *connect.Request[clickhouse.ListFctMevBidValueByBuilderRequest]) (*connect.Response[clickhouse.ListFctMevBidValueByBuilderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctMevBidValueByBuilder is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctBlockBlobCountHead(context.Context, *connect.Request[clickhouse.ListFctBlockBlobCountHeadRequest]) (*connect.Response[clickhouse.ListFctBlockBlobCountHeadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctBlockBlobCountHead is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctBlockHead(context.Context, *connect.Request[clickhouse.ListFctBlockHeadRequest]) (*connect.Response[clickhouse.ListFctBlockHeadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctBlockHead is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctBlockMevHead(context.Context, *connect.Request[clickhouse.ListFctBlockMevHeadRequest]) (*connect.Response[clickhouse.ListFctBlockMevHeadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctBlockMevHead is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctBlockProposerEntity(context.Context, *connect.Request[clickhouse.ListFctBlockProposerEntityRequest]) (*connect.Response[clickhouse.ListFctBlockProposerEntityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctBlockProposerEntity is not implemented"))
}

func (UnimplementedXatuCBTHandler) GetDataAvailability(context.Context, *connect.Request[xatu_cbt.GetDataAvailabilityRequest]) (*connect.Response[xatu_cbt.GetDataAvailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.GetDataAvailability is not implemented"))
}
