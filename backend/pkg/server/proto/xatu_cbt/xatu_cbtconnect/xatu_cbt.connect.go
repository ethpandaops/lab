// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/pkg/server/proto/xatu_cbt/xatu_cbt.proto

package xatu_cbtconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	xatu_cbt "github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt"
	clickhouse "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// XatuCBTName is the fully-qualified name of the XatuCBT service.
	XatuCBTName = "xatu_cbt.XatuCBT"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// XatuCBTListFctNodeActiveLast24HProcedure is the fully-qualified name of the XatuCBT's
	// ListFctNodeActiveLast24h RPC.
	XatuCBTListFctNodeActiveLast24HProcedure = "/xatu_cbt.XatuCBT/ListFctNodeActiveLast24h"
	// XatuCBTListFctBlockFirstSeenByNodeProcedure is the fully-qualified name of the XatuCBT's
	// ListFctBlockFirstSeenByNode RPC.
	XatuCBTListFctBlockFirstSeenByNodeProcedure = "/xatu_cbt.XatuCBT/ListFctBlockFirstSeenByNode"
	// XatuCBTGetDataAvailabilityProcedure is the fully-qualified name of the XatuCBT's
	// GetDataAvailability RPC.
	XatuCBTGetDataAvailabilityProcedure = "/xatu_cbt.XatuCBT/GetDataAvailability"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	xatuCBTServiceDescriptor                           = xatu_cbt.File_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto.Services().ByName("XatuCBT")
	xatuCBTListFctNodeActiveLast24HMethodDescriptor    = xatuCBTServiceDescriptor.Methods().ByName("ListFctNodeActiveLast24h")
	xatuCBTListFctBlockFirstSeenByNodeMethodDescriptor = xatuCBTServiceDescriptor.Methods().ByName("ListFctBlockFirstSeenByNode")
	xatuCBTGetDataAvailabilityMethodDescriptor         = xatuCBTServiceDescriptor.Methods().ByName("GetDataAvailability")
)

// XatuCBTClient is a client for the xatu_cbt.XatuCBT service.
type XatuCBTClient interface {
	// ListFctNodeActiveLast24h queries the fact table of nodes active in the last 24 hours.
	// This table contains node metadata for all nodes seen within a rolling 24-hour window.
	ListFctNodeActiveLast24H(context.Context, *connect.Request[clickhouse.ListFctNodeActiveLast24HRequest]) (*connect.Response[clickhouse.ListFctNodeActiveLast24HResponse], error)
	// ListFctBlockFirstSeenByNode returns block timing data from the fct_block_first_seen_by_node table.
	// This table contains information about when blocks were first seen by different nodes.
	ListFctBlockFirstSeenByNode(context.Context, *connect.Request[clickhouse.ListFctBlockFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockFirstSeenByNodeResponse], error)
	// GetDataAvailability returns the common availability interval across a set of transformation tables.
	// It calculates the overlapping data range for the specified tables and returns slot information.
	GetDataAvailability(context.Context, *connect.Request[xatu_cbt.GetDataAvailabilityRequest]) (*connect.Response[xatu_cbt.GetDataAvailabilityResponse], error)
}

// NewXatuCBTClient constructs a client for the xatu_cbt.XatuCBT service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewXatuCBTClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) XatuCBTClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &xatuCBTClient{
		listFctNodeActiveLast24H: connect.NewClient[clickhouse.ListFctNodeActiveLast24HRequest, clickhouse.ListFctNodeActiveLast24HResponse](
			httpClient,
			baseURL+XatuCBTListFctNodeActiveLast24HProcedure,
			connect.WithSchema(xatuCBTListFctNodeActiveLast24HMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listFctBlockFirstSeenByNode: connect.NewClient[clickhouse.ListFctBlockFirstSeenByNodeRequest, clickhouse.ListFctBlockFirstSeenByNodeResponse](
			httpClient,
			baseURL+XatuCBTListFctBlockFirstSeenByNodeProcedure,
			connect.WithSchema(xatuCBTListFctBlockFirstSeenByNodeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDataAvailability: connect.NewClient[xatu_cbt.GetDataAvailabilityRequest, xatu_cbt.GetDataAvailabilityResponse](
			httpClient,
			baseURL+XatuCBTGetDataAvailabilityProcedure,
			connect.WithSchema(xatuCBTGetDataAvailabilityMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// xatuCBTClient implements XatuCBTClient.
type xatuCBTClient struct {
	listFctNodeActiveLast24H    *connect.Client[clickhouse.ListFctNodeActiveLast24HRequest, clickhouse.ListFctNodeActiveLast24HResponse]
	listFctBlockFirstSeenByNode *connect.Client[clickhouse.ListFctBlockFirstSeenByNodeRequest, clickhouse.ListFctBlockFirstSeenByNodeResponse]
	getDataAvailability         *connect.Client[xatu_cbt.GetDataAvailabilityRequest, xatu_cbt.GetDataAvailabilityResponse]
}

// ListFctNodeActiveLast24H calls xatu_cbt.XatuCBT.ListFctNodeActiveLast24h.
func (c *xatuCBTClient) ListFctNodeActiveLast24H(ctx context.Context, req *connect.Request[clickhouse.ListFctNodeActiveLast24HRequest]) (*connect.Response[clickhouse.ListFctNodeActiveLast24HResponse], error) {
	return c.listFctNodeActiveLast24H.CallUnary(ctx, req)
}

// ListFctBlockFirstSeenByNode calls xatu_cbt.XatuCBT.ListFctBlockFirstSeenByNode.
func (c *xatuCBTClient) ListFctBlockFirstSeenByNode(ctx context.Context, req *connect.Request[clickhouse.ListFctBlockFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockFirstSeenByNodeResponse], error) {
	return c.listFctBlockFirstSeenByNode.CallUnary(ctx, req)
}

// GetDataAvailability calls xatu_cbt.XatuCBT.GetDataAvailability.
func (c *xatuCBTClient) GetDataAvailability(ctx context.Context, req *connect.Request[xatu_cbt.GetDataAvailabilityRequest]) (*connect.Response[xatu_cbt.GetDataAvailabilityResponse], error) {
	return c.getDataAvailability.CallUnary(ctx, req)
}

// XatuCBTHandler is an implementation of the xatu_cbt.XatuCBT service.
type XatuCBTHandler interface {
	// ListFctNodeActiveLast24h queries the fact table of nodes active in the last 24 hours.
	// This table contains node metadata for all nodes seen within a rolling 24-hour window.
	ListFctNodeActiveLast24H(context.Context, *connect.Request[clickhouse.ListFctNodeActiveLast24HRequest]) (*connect.Response[clickhouse.ListFctNodeActiveLast24HResponse], error)
	// ListFctBlockFirstSeenByNode returns block timing data from the fct_block_first_seen_by_node table.
	// This table contains information about when blocks were first seen by different nodes.
	ListFctBlockFirstSeenByNode(context.Context, *connect.Request[clickhouse.ListFctBlockFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockFirstSeenByNodeResponse], error)
	// GetDataAvailability returns the common availability interval across a set of transformation tables.
	// It calculates the overlapping data range for the specified tables and returns slot information.
	GetDataAvailability(context.Context, *connect.Request[xatu_cbt.GetDataAvailabilityRequest]) (*connect.Response[xatu_cbt.GetDataAvailabilityResponse], error)
}

// NewXatuCBTHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewXatuCBTHandler(svc XatuCBTHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	xatuCBTListFctNodeActiveLast24HHandler := connect.NewUnaryHandler(
		XatuCBTListFctNodeActiveLast24HProcedure,
		svc.ListFctNodeActiveLast24H,
		connect.WithSchema(xatuCBTListFctNodeActiveLast24HMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTListFctBlockFirstSeenByNodeHandler := connect.NewUnaryHandler(
		XatuCBTListFctBlockFirstSeenByNodeProcedure,
		svc.ListFctBlockFirstSeenByNode,
		connect.WithSchema(xatuCBTListFctBlockFirstSeenByNodeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	xatuCBTGetDataAvailabilityHandler := connect.NewUnaryHandler(
		XatuCBTGetDataAvailabilityProcedure,
		svc.GetDataAvailability,
		connect.WithSchema(xatuCBTGetDataAvailabilityMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/xatu_cbt.XatuCBT/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case XatuCBTListFctNodeActiveLast24HProcedure:
			xatuCBTListFctNodeActiveLast24HHandler.ServeHTTP(w, r)
		case XatuCBTListFctBlockFirstSeenByNodeProcedure:
			xatuCBTListFctBlockFirstSeenByNodeHandler.ServeHTTP(w, r)
		case XatuCBTGetDataAvailabilityProcedure:
			xatuCBTGetDataAvailabilityHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedXatuCBTHandler returns CodeUnimplemented from all methods.
type UnimplementedXatuCBTHandler struct{}

func (UnimplementedXatuCBTHandler) ListFctNodeActiveLast24H(context.Context, *connect.Request[clickhouse.ListFctNodeActiveLast24HRequest]) (*connect.Response[clickhouse.ListFctNodeActiveLast24HResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctNodeActiveLast24h is not implemented"))
}

func (UnimplementedXatuCBTHandler) ListFctBlockFirstSeenByNode(context.Context, *connect.Request[clickhouse.ListFctBlockFirstSeenByNodeRequest]) (*connect.Response[clickhouse.ListFctBlockFirstSeenByNodeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.ListFctBlockFirstSeenByNode is not implemented"))
}

func (UnimplementedXatuCBTHandler) GetDataAvailability(context.Context, *connect.Request[xatu_cbt.GetDataAvailabilityRequest]) (*connect.Response[xatu_cbt.GetDataAvailabilityResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("xatu_cbt.XatuCBT.GetDataAvailability is not implemented"))
}
