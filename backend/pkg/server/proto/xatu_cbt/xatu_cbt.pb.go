// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: backend/pkg/server/proto/xatu_cbt/xatu_cbt.proto

package xatu_cbt

import (
	clickhouse "github.com/ethpandaops/xatu-cbt/pkg/proto/clickhouse"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetDataAvailabilityRequest defines the request for checking data availability across tables.
type GetDataAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of transformation tables to check for availability.
	// Format: table names without the network prefix (e.g., "fct_attestation_correctness_head").
	Tables []string `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	// The position field name to use for min/max calculation.
	// Common values: "slot_start_date_time", "block_number", etc.
	// If empty, defaults to "slot_start_date_time".
	PositionField string `protobuf:"bytes,2,opt,name=position_field,json=positionField,proto3" json:"position_field,omitempty"`
}

func (x *GetDataAvailabilityRequest) Reset() {
	*x = GetDataAvailabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataAvailabilityRequest) ProtoMessage() {}

func (x *GetDataAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*GetDataAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDescGZIP(), []int{0}
}

func (x *GetDataAvailabilityRequest) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *GetDataAvailabilityRequest) GetPositionField() string {
	if x != nil {
		return x.PositionField
	}
	return ""
}

// GetDataAvailabilityResponse returns the data availability information.
type GetDataAvailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix timestamp (seconds) of the earliest available data across all tables.
	AvailableFromTimestamp int64 `protobuf:"varint,1,opt,name=available_from_timestamp,json=availableFromTimestamp,proto3" json:"available_from_timestamp,omitempty"`
	// Unix timestamp (seconds) of the latest available data across all tables.
	AvailableUntilTimestamp int64 `protobuf:"varint,2,opt,name=available_until_timestamp,json=availableUntilTimestamp,proto3" json:"available_until_timestamp,omitempty"`
	// Earliest available slot number (calculated from available_from_timestamp).
	MinSlot uint64 `protobuf:"varint,3,opt,name=min_slot,json=minSlot,proto3" json:"min_slot,omitempty"`
	// Latest available slot number (calculated from available_until_timestamp).
	MaxSlot uint64 `protobuf:"varint,4,opt,name=max_slot,json=maxSlot,proto3" json:"max_slot,omitempty"`
	// Safe slot for "live" view (head - 2 slots from max_slot).
	SafeSlot uint64 `protobuf:"varint,5,opt,name=safe_slot,json=safeSlot,proto3" json:"safe_slot,omitempty"`
	// The current head slot of the network.
	HeadSlot uint64 `protobuf:"varint,6,opt,name=head_slot,json=headSlot,proto3" json:"head_slot,omitempty"`
	// Indicates if data is available (overlapping interval exists).
	HasData bool `protobuf:"varint,7,opt,name=has_data,json=hasData,proto3" json:"has_data,omitempty"`
}

func (x *GetDataAvailabilityResponse) Reset() {
	*x = GetDataAvailabilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataAvailabilityResponse) ProtoMessage() {}

func (x *GetDataAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*GetDataAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDescGZIP(), []int{1}
}

func (x *GetDataAvailabilityResponse) GetAvailableFromTimestamp() int64 {
	if x != nil {
		return x.AvailableFromTimestamp
	}
	return 0
}

func (x *GetDataAvailabilityResponse) GetAvailableUntilTimestamp() int64 {
	if x != nil {
		return x.AvailableUntilTimestamp
	}
	return 0
}

func (x *GetDataAvailabilityResponse) GetMinSlot() uint64 {
	if x != nil {
		return x.MinSlot
	}
	return 0
}

func (x *GetDataAvailabilityResponse) GetMaxSlot() uint64 {
	if x != nil {
		return x.MaxSlot
	}
	return 0
}

func (x *GetDataAvailabilityResponse) GetSafeSlot() uint64 {
	if x != nil {
		return x.SafeSlot
	}
	return 0
}

func (x *GetDataAvailabilityResponse) GetHeadSlot() uint64 {
	if x != nil {
		return x.HeadSlot
	}
	return 0
}

func (x *GetDataAvailabilityResponse) GetHasData() bool {
	if x != nil {
		return x.HasData
	}
	return false
}

var File_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto protoreflect.FileDescriptor

var file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDesc = []byte{
	0x0a, 0x30, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x5f,
	0x63, 0x62, 0x74, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x5f, 0x63, 0x62, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x78, 0x61, 0x74, 0x75, 0x5f, 0x63, 0x62, 0x74, 0x1a, 0x39, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x32, 0x34,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f,
	0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x78,
	0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x6f,
	0x62, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x48, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65,
	0x6e, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x35, 0x30, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x78, 0x61, 0x74,
	0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2f, 0x66, 0x63, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x65, 0x61,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f,
	0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2f, 0x66, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x76, 0x5f, 0x62, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3d, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x78, 0x61, 0x74,
	0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2f, 0x66, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x76, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x78, 0x61, 0x74, 0x75,
	0x2d, 0x63, 0x62, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f,
	0x69, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62, 0x74,
	0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x33, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x2d, 0x63, 0x62,
	0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x69, 0x6e, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x76, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2f, 0x78, 0x61,
	0x74, 0x75, 0x2d, 0x63, 0x62, 0x74, 0x2f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x66, 0x65, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x61, 0x66, 0x65,
	0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x53, 0x6c, 0x6f,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x32, 0xd4, 0x09, 0x0a,
	0x07, 0x58, 0x61, 0x74, 0x75, 0x43, 0x42, 0x54, 0x12, 0x67, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x32, 0x34, 0x68, 0x12, 0x24, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46,
	0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x32, 0x34, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x32, 0x34, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x70, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x27, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x63, 0x62, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x63, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53,
	0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x91, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x35, 0x30, 0x6d, 0x73, 0x12, 0x32, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x35, 0x30, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x35, 0x30, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63,
	0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x65, 0x61, 0x64, 0x12, 0x2d, 0x2e, 0x63, 0x62,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x62, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x48, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x25, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42,
	0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63,
	0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x63, 0x74, 0x4d, 0x65, 0x76, 0x42,
	0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x6c, 0x6f, 0x62, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1f, 0x2e, 0x63,
	0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d,
	0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x63, 0x62, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x65, 0x76, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x2e, 0x78, 0x61, 0x74, 0x75, 0x5f, 0x63, 0x62,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x78,
	0x61, 0x74, 0x75, 0x5f, 0x63, 0x62, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x74, 0x68, 0x70, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x70, 0x73, 0x2f, 0x6c, 0x61,
	0x62, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x78, 0x61, 0x74, 0x75, 0x5f,
	0x63, 0x62, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDescOnce sync.Once
	file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDescData = file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDesc
)

func file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDescGZIP() []byte {
	file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDescOnce.Do(func() {
		file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDescData = protoimpl.X.CompressGZIP(file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDescData)
	})
	return file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDescData
}

var file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_goTypes = []any{
	(*GetDataAvailabilityRequest)(nil),                                // 0: xatu_cbt.GetDataAvailabilityRequest
	(*GetDataAvailabilityResponse)(nil),                               // 1: xatu_cbt.GetDataAvailabilityResponse
	(*clickhouse.ListFctNodeActiveLast24HRequest)(nil),                // 2: cbt.ListFctNodeActiveLast24hRequest
	(*clickhouse.ListFctBlockFirstSeenByNodeRequest)(nil),             // 3: cbt.ListFctBlockFirstSeenByNodeRequest
	(*clickhouse.ListFctBlockBlobFirstSeenByNodeRequest)(nil),         // 4: cbt.ListFctBlockBlobFirstSeenByNodeRequest
	(*clickhouse.ListFctAttestationFirstSeenChunked50MsRequest)(nil),  // 5: cbt.ListFctAttestationFirstSeenChunked50msRequest
	(*clickhouse.ListFctAttestationCorrectnessHeadRequest)(nil),       // 6: cbt.ListFctAttestationCorrectnessHeadRequest
	(*clickhouse.ListFctMevBidCountByRelayRequest)(nil),               // 7: cbt.ListFctMevBidCountByRelayRequest
	(*clickhouse.ListFctMevBidValueByBuilderRequest)(nil),             // 8: cbt.ListFctMevBidValueByBuilderRequest
	(*clickhouse.ListIntBlockBlobCountHeadRequest)(nil),               // 9: cbt.ListIntBlockBlobCountHeadRequest
	(*clickhouse.ListIntBlockHeadRequest)(nil),                        // 10: cbt.ListIntBlockHeadRequest
	(*clickhouse.ListIntBlockMevHeadRequest)(nil),                     // 11: cbt.ListIntBlockMevHeadRequest
	(*clickhouse.ListFctNodeActiveLast24HResponse)(nil),               // 12: cbt.ListFctNodeActiveLast24hResponse
	(*clickhouse.ListFctBlockFirstSeenByNodeResponse)(nil),            // 13: cbt.ListFctBlockFirstSeenByNodeResponse
	(*clickhouse.ListFctBlockBlobFirstSeenByNodeResponse)(nil),        // 14: cbt.ListFctBlockBlobFirstSeenByNodeResponse
	(*clickhouse.ListFctAttestationFirstSeenChunked50MsResponse)(nil), // 15: cbt.ListFctAttestationFirstSeenChunked50msResponse
	(*clickhouse.ListFctAttestationCorrectnessHeadResponse)(nil),      // 16: cbt.ListFctAttestationCorrectnessHeadResponse
	(*clickhouse.ListFctMevBidCountByRelayResponse)(nil),              // 17: cbt.ListFctMevBidCountByRelayResponse
	(*clickhouse.ListFctMevBidValueByBuilderResponse)(nil),            // 18: cbt.ListFctMevBidValueByBuilderResponse
	(*clickhouse.ListIntBlockBlobCountHeadResponse)(nil),              // 19: cbt.ListIntBlockBlobCountHeadResponse
	(*clickhouse.ListIntBlockHeadResponse)(nil),                       // 20: cbt.ListIntBlockHeadResponse
	(*clickhouse.ListIntBlockMevHeadResponse)(nil),                    // 21: cbt.ListIntBlockMevHeadResponse
}
var file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_depIdxs = []int32{
	2,  // 0: xatu_cbt.XatuCBT.ListFctNodeActiveLast24h:input_type -> cbt.ListFctNodeActiveLast24hRequest
	3,  // 1: xatu_cbt.XatuCBT.ListFctBlockFirstSeenByNode:input_type -> cbt.ListFctBlockFirstSeenByNodeRequest
	4,  // 2: xatu_cbt.XatuCBT.ListFctBlockBlobFirstSeenByNode:input_type -> cbt.ListFctBlockBlobFirstSeenByNodeRequest
	5,  // 3: xatu_cbt.XatuCBT.ListFctAttestationFirstSeenChunked50ms:input_type -> cbt.ListFctAttestationFirstSeenChunked50msRequest
	6,  // 4: xatu_cbt.XatuCBT.ListFctAttestationCorrectnessHead:input_type -> cbt.ListFctAttestationCorrectnessHeadRequest
	7,  // 5: xatu_cbt.XatuCBT.ListFctMevBidCountByRelay:input_type -> cbt.ListFctMevBidCountByRelayRequest
	8,  // 6: xatu_cbt.XatuCBT.ListFctMevBidValueByBuilder:input_type -> cbt.ListFctMevBidValueByBuilderRequest
	9,  // 7: xatu_cbt.XatuCBT.ListIntBlockBlobCountHead:input_type -> cbt.ListIntBlockBlobCountHeadRequest
	10, // 8: xatu_cbt.XatuCBT.ListIntBlockHead:input_type -> cbt.ListIntBlockHeadRequest
	11, // 9: xatu_cbt.XatuCBT.ListIntBlockMevHead:input_type -> cbt.ListIntBlockMevHeadRequest
	0,  // 10: xatu_cbt.XatuCBT.GetDataAvailability:input_type -> xatu_cbt.GetDataAvailabilityRequest
	12, // 11: xatu_cbt.XatuCBT.ListFctNodeActiveLast24h:output_type -> cbt.ListFctNodeActiveLast24hResponse
	13, // 12: xatu_cbt.XatuCBT.ListFctBlockFirstSeenByNode:output_type -> cbt.ListFctBlockFirstSeenByNodeResponse
	14, // 13: xatu_cbt.XatuCBT.ListFctBlockBlobFirstSeenByNode:output_type -> cbt.ListFctBlockBlobFirstSeenByNodeResponse
	15, // 14: xatu_cbt.XatuCBT.ListFctAttestationFirstSeenChunked50ms:output_type -> cbt.ListFctAttestationFirstSeenChunked50msResponse
	16, // 15: xatu_cbt.XatuCBT.ListFctAttestationCorrectnessHead:output_type -> cbt.ListFctAttestationCorrectnessHeadResponse
	17, // 16: xatu_cbt.XatuCBT.ListFctMevBidCountByRelay:output_type -> cbt.ListFctMevBidCountByRelayResponse
	18, // 17: xatu_cbt.XatuCBT.ListFctMevBidValueByBuilder:output_type -> cbt.ListFctMevBidValueByBuilderResponse
	19, // 18: xatu_cbt.XatuCBT.ListIntBlockBlobCountHead:output_type -> cbt.ListIntBlockBlobCountHeadResponse
	20, // 19: xatu_cbt.XatuCBT.ListIntBlockHead:output_type -> cbt.ListIntBlockHeadResponse
	21, // 20: xatu_cbt.XatuCBT.ListIntBlockMevHead:output_type -> cbt.ListIntBlockMevHeadResponse
	1,  // 21: xatu_cbt.XatuCBT.GetDataAvailability:output_type -> xatu_cbt.GetDataAvailabilityResponse
	11, // [11:22] is the sub-list for method output_type
	0,  // [0:11] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_init() }
func file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_init() {
	if File_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GetDataAvailabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetDataAvailabilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_goTypes,
		DependencyIndexes: file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_depIdxs,
		MessageInfos:      file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_msgTypes,
	}.Build()
	File_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto = out.File
	file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_rawDesc = nil
	file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_goTypes = nil
	file_backend_pkg_server_proto_xatu_cbt_xatu_cbt_proto_depIdxs = nil
}
