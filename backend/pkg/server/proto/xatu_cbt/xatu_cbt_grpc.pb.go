// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: backend/pkg/server/proto/xatu_cbt/xatu_cbt.proto

package xatu_cbt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	XatuCBT_ListNetworks_FullMethodName  = "/xatu_cbt.XatuCBT/ListNetworks"
	XatuCBT_ListXatuNodes_FullMethodName = "/xatu_cbt.XatuCBT/ListXatuNodes"
)

// XatuCBTClient is the client API for XatuCBT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XatuCBTClient interface {
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error)
	ListXatuNodes(ctx context.Context, in *ListXatuNodesRequest, opts ...grpc.CallOption) (*ListXatuNodesResponse, error)
}

type xatuCBTClient struct {
	cc grpc.ClientConnInterface
}

func NewXatuCBTClient(cc grpc.ClientConnInterface) XatuCBTClient {
	return &xatuCBTClient{cc}
}

func (c *xatuCBTClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (*ListNetworksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNetworksResponse)
	err := c.cc.Invoke(ctx, XatuCBT_ListNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xatuCBTClient) ListXatuNodes(ctx context.Context, in *ListXatuNodesRequest, opts ...grpc.CallOption) (*ListXatuNodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListXatuNodesResponse)
	err := c.cc.Invoke(ctx, XatuCBT_ListXatuNodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XatuCBTServer is the server API for XatuCBT service.
// All implementations must embed UnimplementedXatuCBTServer
// for forward compatibility
type XatuCBTServer interface {
	ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error)
	ListXatuNodes(context.Context, *ListXatuNodesRequest) (*ListXatuNodesResponse, error)
	mustEmbedUnimplementedXatuCBTServer()
}

// UnimplementedXatuCBTServer must be embedded to have forward compatible implementations.
type UnimplementedXatuCBTServer struct {
}

func (UnimplementedXatuCBTServer) ListNetworks(context.Context, *ListNetworksRequest) (*ListNetworksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedXatuCBTServer) ListXatuNodes(context.Context, *ListXatuNodesRequest) (*ListXatuNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListXatuNodes not implemented")
}
func (UnimplementedXatuCBTServer) mustEmbedUnimplementedXatuCBTServer() {}

// UnsafeXatuCBTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XatuCBTServer will
// result in compilation errors.
type UnsafeXatuCBTServer interface {
	mustEmbedUnimplementedXatuCBTServer()
}

func RegisterXatuCBTServer(s grpc.ServiceRegistrar, srv XatuCBTServer) {
	s.RegisterService(&XatuCBT_ServiceDesc, srv)
}

func _XatuCBT_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XatuCBTServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XatuCBT_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XatuCBTServer).ListNetworks(ctx, req.(*ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XatuCBT_ListXatuNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListXatuNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XatuCBTServer).ListXatuNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: XatuCBT_ListXatuNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XatuCBTServer).ListXatuNodes(ctx, req.(*ListXatuNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// XatuCBT_ServiceDesc is the grpc.ServiceDesc for XatuCBT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XatuCBT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xatu_cbt.XatuCBT",
	HandlerType: (*XatuCBTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListNetworks",
			Handler:    _XatuCBT_ListNetworks_Handler,
		},
		{
			MethodName: "ListXatuNodes",
			Handler:    _XatuCBT_ListXatuNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/pkg/server/proto/xatu_cbt/xatu_cbt.proto",
}
