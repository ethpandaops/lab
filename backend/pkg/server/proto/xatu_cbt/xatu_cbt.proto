syntax = "proto3";
package xatu_cbt;
option go_package = "github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt";

// This file defines the internal XatuCBT service that acts as a pass-through layer
// to upstream CBT data.
//
// Architecture:
// - This service uses upstream CBT proto definitions directly (imported from vendor/)
// - No type transformations occur at this layer - it's a pure pass-through
// - The service enriches the request with network routing via gRPC metadata
// - Data transformation to public API types happens in the REST API layer (cbt_api.proto)
//
// Flow:
// 1. REST API receives request with network in URL path (/api/v1/mainnet/nodes)
// 2. REST handler adds network to gRPC metadata and calls this service
// 3. This service extracts network, routes to appropriate ClickHouse instance
// 4. Returns raw CBT data using upstream types
// 5. REST layer transforms CBT types to public API types

import "vendor/xatu-cbt/clickhouse/fct_node_active_last_24h.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_first_seen_by_node.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_blob_first_seen_by_node.proto";
import "vendor/xatu-cbt/clickhouse/fct_attestation_first_seen_chunked_50ms.proto";
import "vendor/xatu-cbt/clickhouse/fct_attestation_correctness_head.proto";
import "vendor/xatu-cbt/clickhouse/fct_mev_bid_count_by_relay.proto";
import "vendor/xatu-cbt/clickhouse/fct_mev_bid_count_by_builder.proto";
import "vendor/xatu-cbt/clickhouse/fct_mev_bid_highest_value_by_builder_chunked_50ms.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_blob_count_head.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_head.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_mev_head.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_proposer_entity.proto";
import "vendor/xatu-cbt/clickhouse/fct_prepared_block.proto";
import "vendor/xatu-cbt/clickhouse/fct_address_access_chunked_10000.proto";
import "vendor/xatu-cbt/clickhouse/fct_address_access_total.proto";
import "vendor/xatu-cbt/clickhouse/fct_address_storage_slot_chunked_10000.proto";
import "vendor/xatu-cbt/clickhouse/fct_address_storage_slot_expired_top_100_by_contract.proto";
import "vendor/xatu-cbt/clickhouse/fct_address_storage_slot_top_100_by_contract.proto";
import "vendor/xatu-cbt/clickhouse/fct_address_storage_slot_total.proto";
import "vendor/xatu-cbt/clickhouse/fct_block.proto";
import "vendor/xatu-cbt/clickhouse/common.proto";
import "google/protobuf/empty.proto";

// XatuCBT service provides access to CBT data from multiple ClickHouse instances.
// Each RPC corresponds to a specific CBT table/view and uses upstream request/response types.
service XatuCBT {
  // ListFctNodeActiveLast24h queries the fact table of nodes active in the last 24 hours.
  // This table contains node metadata for all nodes seen within a rolling 24-hour window.
  rpc ListFctNodeActiveLast24h(cbt.ListFctNodeActiveLast24hRequest) returns (cbt.ListFctNodeActiveLast24hResponse);

  // ListFctBlockFirstSeenByNode returns block timing data from the fct_block_first_seen_by_node table.
  // This table contains information about when blocks were first seen by different nodes.
  rpc ListFctBlockFirstSeenByNode(cbt.ListFctBlockFirstSeenByNodeRequest) returns (cbt.ListFctBlockFirstSeenByNodeResponse);

  // ListFctBlockBlobFirstSeenByNode returns blob timing data from the fct_block_blob_first_seen_by_node table.
  // This table contains information about when blobs were first seen by different nodes.
  rpc ListFctBlockBlobFirstSeenByNode(cbt.ListFctBlockBlobFirstSeenByNodeRequest) returns (cbt.ListFctBlockBlobFirstSeenByNodeResponse);

  // ListFctAttestationFirstSeenChunked50ms returns attestation timing data in 50ms chunks.
  // This table contains attestations first seen on the unfinalized chain broken down by 50ms intervals.
  rpc ListFctAttestationFirstSeenChunked50ms(cbt.ListFctAttestationFirstSeenChunked50msRequest) returns (cbt.ListFctAttestationFirstSeenChunked50msResponse);

  // ListFctAttestationCorrectnessHead returns attestation correctness data for the head chain.
  // This table contains voting statistics for blocks showing the actual vs expected attestations.
  rpc ListFctAttestationCorrectnessHead(cbt.ListFctAttestationCorrectnessHeadRequest) returns (cbt.ListFctAttestationCorrectnessHeadResponse);

  // ListFctMevBidCountByRelay returns MEV relay bid count data.
  // This table contains the total number of MEV relay bids for a slot by relay.
  rpc ListFctMevBidCountByRelay(cbt.ListFctMevBidCountByRelayRequest) returns (cbt.ListFctMevBidCountByRelayResponse);

  // ListFctMevBidCountByBuilder returns MEV builder bid count data.
  // This table contains the total number of MEV bids for a slot by builder.
  rpc ListFctMevBidCountByBuilder(cbt.ListFctMevBidCountByBuilderRequest) returns (cbt.ListFctMevBidCountByBuilderResponse);

  // ListFctMevBidHighestValueByBuilderChunked50ms returns highest MEV bid values by builder for a slot in 50ms chunks.
  // This table contains the highest value MEV relay bid for a slot by builder broken down by 50ms time chunks.
  rpc ListFctMevBidHighestValueByBuilderChunked50ms(cbt.ListFctMevBidHighestValueByBuilderChunked50msRequest) returns (cbt.ListFctMevBidHighestValueByBuilderChunked50msResponse);

  // ListFctBlockBlobCountHead returns blob count data for blocks in the unfinalized chain.
  // This table contains the number of blobs for each block, with forks potentially causing multiple blocks per slot.
  rpc ListFctBlockBlobCountHead(cbt.ListFctBlockBlobCountHeadRequest) returns (cbt.ListFctBlockBlobCountHeadResponse);

  // ListFctBlockHead returns beacon block data from the fct_block_head table.
  // This table contains block details for the unfinalized chain, with potential multiple blocks per slot due to forks.
  rpc ListFctBlockHead(cbt.ListFctBlockHeadRequest) returns (cbt.ListFctBlockHeadResponse);

  // ListFctBlockMevHead returns MEV block data for the unfinalized chain.
  // This table contains MEV relay proposer payload delivered for blocks on the unfinalized chain.
  rpc ListFctBlockMevHead(cbt.ListFctBlockMevHeadRequest) returns (cbt.ListFctBlockMevHeadResponse);

  // ListFctBlockProposerEntity returns proposer entity data from the fct_block_proposer_entity table.
  // This table contains information about entities that proposed blocks in the unfinalized chain.
  rpc ListFctBlockProposerEntity(cbt.ListFctBlockProposerEntityRequest) returns (cbt.ListFctBlockProposerEntityResponse);

  // ListFctPreparedBlock returns prepared blocks for a specific slot.
  // This table contains locally built blocks that validators would have proposed.
  rpc ListFctPreparedBlock(cbt.ListFctPreparedBlockRequest) returns (cbt.ListFctPreparedBlockResponse);

  // ListFctAddressAccessChunked10000 returns address access data chunked by 10000 blocks.
  // This table contains aggregated data about Ethereum address access patterns for state expiry analysis.
  rpc ListFctAddressAccessChunked10000(cbt.ListFctAddressAccessChunked10000Request) returns (cbt.ListFctAddressAccessChunked10000Response);

  // ListFctAddressStorageSlotChunked10000 returns storage slot data chunked by 10000 blocks.
  // This table contains aggregated data about Ethereum storage slot access patterns for state expiry analysis.
  rpc ListFctAddressStorageSlotChunked10000(cbt.ListFctAddressStorageSlotChunked10000Request) returns (cbt.ListFctAddressStorageSlotChunked10000Response);

  // GetFctAddressAccessTotal returns the latest total address access statistics.
  // This table contains aggregated totals of accounts and contracts accessed/expired for state expiry analysis.
  rpc GetFctAddressAccessTotal(cbt.GetFctAddressAccessTotalRequest) returns (cbt.GetFctAddressAccessTotalResponse);

  // ListFctAddressAccessTotal returns address access totals.
  // This table contains aggregated totals of accounts and contracts accessed/expired for state expiry analysis.
  rpc ListFctAddressAccessTotal(cbt.ListFctAddressAccessTotalRequest) returns (cbt.ListFctAddressAccessTotalResponse);

  // ListFctAddressStorageSlotExpiredTop100ByContract returns the top 100 contracts by expired storage slots.
  // This table contains contracts ranked by the number of storage slots not accessed in the last 365 days.
  rpc ListFctAddressStorageSlotExpiredTop100ByContract(cbt.ListFctAddressStorageSlotExpiredTop100ByContractRequest) returns (cbt.ListFctAddressStorageSlotExpiredTop100ByContractResponse);

  // ListFctAddressStorageSlotTop100ByContract returns the top 100 contracts by total storage slots.
  // This table contains contracts ranked by the total number of storage slots.
  rpc ListFctAddressStorageSlotTop100ByContract(cbt.ListFctAddressStorageSlotTop100ByContractRequest) returns (cbt.ListFctAddressStorageSlotTop100ByContractResponse);

  // GetFctAddressStorageSlotTotal returns the latest storage slot totals.
  // This table contains aggregated totals of storage slots accessed/expired for state expiry analysis.
  rpc GetFctAddressStorageSlotTotal(cbt.GetFctAddressStorageSlotTotalRequest) returns (cbt.GetFctAddressStorageSlotTotalResponse);

  // ListFctAddressStorageSlotTotal returns storage slot totals.
  // This table contains aggregated totals of storage slots accessed/expired for state expiry analysis.
  rpc ListFctAddressStorageSlotTotal(cbt.ListFctAddressStorageSlotTotalRequest) returns (cbt.ListFctAddressStorageSlotTotalResponse);

  // ListFctBlockForStateExpiry returns the execution block number from approximately 1 year ago.
  // This is a special endpoint for state expiry that queries fct_block with a specific time range.
  // It returns the block from 1 year ago (minus 11 days) which serves as the boundary for state expiry calculations.
  rpc ListFctBlockForStateExpiry(google.protobuf.Empty) returns (cbt.ListFctBlockResponse);

  // GetDataAvailability returns the common availability interval across a set of transformation tables.
  // It calculates the overlapping data range for the specified tables and returns slot information.
  rpc GetDataAvailability(GetDataAvailabilityRequest) returns (GetDataAvailabilityResponse);
}

// GetDataAvailabilityRequest defines the request for checking data availability across tables.
message GetDataAvailabilityRequest {
  // List of transformation tables to check for availability.
  // Format: table names without the network prefix (e.g., "fct_attestation_correctness_head").
  repeated string tables = 1;
}

// GetDataAvailabilityResponse returns the data availability information.
message GetDataAvailabilityResponse {
  // Earliest available slot number.
  uint64 min_slot = 1;

  // Latest available slot number.
  uint64 max_slot = 2;
}
