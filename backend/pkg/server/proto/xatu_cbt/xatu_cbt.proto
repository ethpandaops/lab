syntax = "proto3";
package xatu_cbt;
option go_package = "github.com/ethpandaops/lab/backend/pkg/server/proto/xatu_cbt";

// This file defines the internal XatuCBT service that acts as a pass-through layer
// to upstream CBT data.
//
// Architecture:
// - This service uses upstream CBT proto definitions directly (imported from vendor/)
// - No type transformations occur at this layer - it's a pure pass-through
// - The service enriches the request with network routing via gRPC metadata
// - Data transformation to public API types happens in the REST API layer (cbt_api.proto)
//
// Flow:
// 1. REST API receives request with network in URL path (/api/v1/mainnet/nodes)
// 2. REST handler adds network to gRPC metadata and calls this service
// 3. This service extracts network, routes to appropriate ClickHouse instance
// 4. Returns raw CBT data using upstream types
// 5. REST layer transforms CBT types to public API types

import "vendor/xatu-cbt/clickhouse/fct_node_active_last_24h.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_first_seen_by_node.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_blob_first_seen_by_node.proto";
import "vendor/xatu-cbt/clickhouse/fct_attestation_first_seen_chunked_50ms.proto";
import "vendor/xatu-cbt/clickhouse/fct_attestation_correctness_head.proto";
import "vendor/xatu-cbt/clickhouse/fct_mev_bid_count_by_relay.proto";
import "vendor/xatu-cbt/clickhouse/fct_mev_bid_value_by_builder.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_blob_count_head.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_head.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_mev_head.proto";
import "vendor/xatu-cbt/clickhouse/fct_block_proposer_entity.proto";
import "vendor/xatu-cbt/clickhouse/common.proto";

// XatuCBT service provides access to CBT data from multiple ClickHouse instances.
// Each RPC corresponds to a specific CBT table/view and uses upstream request/response types.
service XatuCBT {
  // ListFctNodeActiveLast24h queries the fact table of nodes active in the last 24 hours.
  // This table contains node metadata for all nodes seen within a rolling 24-hour window.
  rpc ListFctNodeActiveLast24h(cbt.ListFctNodeActiveLast24hRequest) returns (cbt.ListFctNodeActiveLast24hResponse);

  // ListFctBlockFirstSeenByNode returns block timing data from the fct_block_first_seen_by_node table.
  // This table contains information about when blocks were first seen by different nodes.
  rpc ListFctBlockFirstSeenByNode(cbt.ListFctBlockFirstSeenByNodeRequest) returns (cbt.ListFctBlockFirstSeenByNodeResponse);

  // ListFctBlockBlobFirstSeenByNode returns blob timing data from the fct_block_blob_first_seen_by_node table.
  // This table contains information about when blobs were first seen by different nodes.
  rpc ListFctBlockBlobFirstSeenByNode(cbt.ListFctBlockBlobFirstSeenByNodeRequest) returns (cbt.ListFctBlockBlobFirstSeenByNodeResponse);

  // ListFctAttestationFirstSeenChunked50ms returns attestation timing data in 50ms chunks.
  // This table contains attestations first seen on the unfinalized chain broken down by 50ms intervals.
  rpc ListFctAttestationFirstSeenChunked50ms(cbt.ListFctAttestationFirstSeenChunked50msRequest) returns (cbt.ListFctAttestationFirstSeenChunked50msResponse);

  // ListFctAttestationCorrectnessHead returns attestation correctness data for the head chain.
  // This table contains voting statistics for blocks showing the actual vs expected attestations.
  rpc ListFctAttestationCorrectnessHead(cbt.ListFctAttestationCorrectnessHeadRequest) returns (cbt.ListFctAttestationCorrectnessHeadResponse);

  // ListFctMevBidCountByRelay returns MEV relay bid count data.
  // This table contains the total number of MEV relay bids for a slot by relay.
  rpc ListFctMevBidCountByRelay(cbt.ListFctMevBidCountByRelayRequest) returns (cbt.ListFctMevBidCountByRelayResponse);

  // ListFctMevBidValueByBuilder returns highest MEV bid values by builder for a slot.
  // This table contains the highest value MEV relay bid for a slot by builder.
  rpc ListFctMevBidValueByBuilder(cbt.ListFctMevBidValueByBuilderRequest) returns (cbt.ListFctMevBidValueByBuilderResponse);

  // ListFctBlockBlobCountHead returns blob count data for blocks in the unfinalized chain.
  // This table contains the number of blobs for each block, with forks potentially causing multiple blocks per slot.
  rpc ListFctBlockBlobCountHead(cbt.ListFctBlockBlobCountHeadRequest) returns (cbt.ListFctBlockBlobCountHeadResponse);

  // ListFctBlockHead returns beacon block data from the fct_block_head table.
  // This table contains block details for the unfinalized chain, with potential multiple blocks per slot due to forks.
  rpc ListFctBlockHead(cbt.ListFctBlockHeadRequest) returns (cbt.ListFctBlockHeadResponse);

  // ListFctBlockMevHead returns MEV block data for the unfinalized chain.
  // This table contains MEV relay proposer payload delivered for blocks on the unfinalized chain.
  rpc ListFctBlockMevHead(cbt.ListFctBlockMevHeadRequest) returns (cbt.ListFctBlockMevHeadResponse);

  // ListFctBlockProposerEntity returns proposer entity data from the fct_block_proposer_entity table.
  // This table contains information about entities that proposed blocks in the unfinalized chain.
  rpc ListFctBlockProposerEntity(cbt.ListFctBlockProposerEntityRequest) returns (cbt.ListFctBlockProposerEntityResponse);

  // GetDataAvailability returns the common availability interval across a set of transformation tables.
  // It calculates the overlapping data range for the specified tables and returns slot information.
  rpc GetDataAvailability(GetDataAvailabilityRequest) returns (GetDataAvailabilityResponse);
}

// GetDataAvailabilityRequest defines the request for checking data availability across tables.
message GetDataAvailabilityRequest {
  // List of transformation tables to check for availability.
  // Format: table names without the network prefix (e.g., "fct_attestation_correctness_head").
  repeated string tables = 1;

  // The position field name to use for min/max calculation.
  // Common values: "slot_start_date_time", "block_number", etc.
  // If empty, defaults to "slot_start_date_time".
  string position_field = 2;
}

// GetDataAvailabilityResponse returns the data availability information.
message GetDataAvailabilityResponse {
  // Unix timestamp (seconds) of the earliest available data across all tables.
  int64 available_from_timestamp = 1;

  // Unix timestamp (seconds) of the latest available data across all tables.
  int64 available_until_timestamp = 2;

  // Earliest available slot number (calculated from available_from_timestamp).
  uint64 min_slot = 3;

  // Latest available slot number (calculated from available_until_timestamp).
  uint64 max_slot = 4;

  // Safe slot for "live" view (head - 2 slots from max_slot).
  uint64 safe_slot = 5;

  // The current head slot of the network.
  uint64 head_slot = 6;

  // Indicates if data is available (overlapping interval exists).
  bool has_data = 7;
}
