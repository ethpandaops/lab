// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: backend/pkg/api/proto/lab_api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	LabAPI_GetRecentLocallyBuiltBlocks_FullMethodName = "/labapi.LabAPI/GetRecentLocallyBuiltBlocks"
	LabAPI_GetSlotData_FullMethodName                 = "/labapi.LabAPI/GetSlotData"
)

// LabAPIClient is the client API for LabAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LabAPIClient interface {
	GetRecentLocallyBuiltBlocks(ctx context.Context, in *GetRecentLocallyBuiltBlocksRequest, opts ...grpc.CallOption) (*GetRecentLocallyBuiltBlocksResponse, error)
	GetSlotData(ctx context.Context, in *GetSlotDataRequest, opts ...grpc.CallOption) (*GetSlotDataResponse, error)
}

type labAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLabAPIClient(cc grpc.ClientConnInterface) LabAPIClient {
	return &labAPIClient{cc}
}

func (c *labAPIClient) GetRecentLocallyBuiltBlocks(ctx context.Context, in *GetRecentLocallyBuiltBlocksRequest, opts ...grpc.CallOption) (*GetRecentLocallyBuiltBlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecentLocallyBuiltBlocksResponse)
	err := c.cc.Invoke(ctx, LabAPI_GetRecentLocallyBuiltBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labAPIClient) GetSlotData(ctx context.Context, in *GetSlotDataRequest, opts ...grpc.CallOption) (*GetSlotDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSlotDataResponse)
	err := c.cc.Invoke(ctx, LabAPI_GetSlotData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabAPIServer is the server API for LabAPI service.
// All implementations must embed UnimplementedLabAPIServer
// for forward compatibility
type LabAPIServer interface {
	GetRecentLocallyBuiltBlocks(context.Context, *GetRecentLocallyBuiltBlocksRequest) (*GetRecentLocallyBuiltBlocksResponse, error)
	GetSlotData(context.Context, *GetSlotDataRequest) (*GetSlotDataResponse, error)
	mustEmbedUnimplementedLabAPIServer()
}

// UnimplementedLabAPIServer must be embedded to have forward compatible implementations.
type UnimplementedLabAPIServer struct {
}

func (UnimplementedLabAPIServer) GetRecentLocallyBuiltBlocks(context.Context, *GetRecentLocallyBuiltBlocksRequest) (*GetRecentLocallyBuiltBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentLocallyBuiltBlocks not implemented")
}
func (UnimplementedLabAPIServer) GetSlotData(context.Context, *GetSlotDataRequest) (*GetSlotDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlotData not implemented")
}
func (UnimplementedLabAPIServer) mustEmbedUnimplementedLabAPIServer() {}

// UnsafeLabAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LabAPIServer will
// result in compilation errors.
type UnsafeLabAPIServer interface {
	mustEmbedUnimplementedLabAPIServer()
}

func RegisterLabAPIServer(s grpc.ServiceRegistrar, srv LabAPIServer) {
	s.RegisterService(&LabAPI_ServiceDesc, srv)
}

func _LabAPI_GetRecentLocallyBuiltBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentLocallyBuiltBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabAPIServer).GetRecentLocallyBuiltBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabAPI_GetRecentLocallyBuiltBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabAPIServer).GetRecentLocallyBuiltBlocks(ctx, req.(*GetRecentLocallyBuiltBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabAPI_GetSlotData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlotDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabAPIServer).GetSlotData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LabAPI_GetSlotData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabAPIServer).GetSlotData(ctx, req.(*GetSlotDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LabAPI_ServiceDesc is the grpc.ServiceDesc for LabAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LabAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "labapi.LabAPI",
	HandlerType: (*LabAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecentLocallyBuiltBlocks",
			Handler:    _LabAPI_GetRecentLocallyBuiltBlocks_Handler,
		},
		{
			MethodName: "GetSlotData",
			Handler:    _LabAPI_GetSlotData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/pkg/api/proto/lab_api.proto",
}
