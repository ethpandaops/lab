syntax = "proto3";
package api.v1;

option go_package = "github.com/ethpandaops/lab/backend/pkg/api/v1/proto";

// This file defines the public REST API layer for all Lab data.
//
// Purpose:
// - Acts as a translation layer between internal structs and public API responses
// - Provides control over what data is exposed to clients
// - Allows selective field exposure (e.g., excluding internal metadata or sensitive fields)
// - Enables API versioning independent of internal data structures
// - Transforms raw database responses into client-friendly formats
//
// Example: instead of directly exposing internal structs (which may
// contain internal fields, raw timestamps, or implementation details), we
// transform them into clean API responses with only the fields clients need.

// ListNodesResponse is the v1 API response for listing nodes with pagination.
message ListNodesResponse {
  repeated Node nodes = 1;
  PaginationMetadata pagination = 2;
  FilterMetadata filters = 3;
}

// ListNetworksResponse is the v1 API response for listing available networks.
message ListNetworksResponse {
  repeated Network networks = 1;
  NetworkFilterMetadata filters = 2;
}

// Node represents a transformed view of node data for public consumption.
// This is a curated subset of fields from the internal structs,
// formatted for client convenience (e.g., timestamps as ISO strings).
message Node {
  string username = 1;
  string node_id = 2;
  string classification = 3;
  ClientInfo client = 4;
  GeoInfo geo = 5;
  ConsensusInfo consensus = 6;
  string last_seen = 7;  // ISO 8601 formatted, not raw Unix timestamp
}

// ClientInfo groups execution client metadata.
message ClientInfo {
  string name = 1;
  string version = 2;
  string implementation = 3;
}

// GeoInfo groups geographical metadata.
message GeoInfo {
  string city = 1;
  string country = 2;
  string country_code = 3;
  string continent_code = 4;
}

// ConsensusInfo groups consensus client metadata.
message ConsensusInfo {
  string version = 1;
  string implementation = 2;
}

// Pagination metadata following AIP-132.
message PaginationMetadata {
  int32 page_size = 1;
  string page_token = 2;
  string next_page_token = 3;
}

// Filter metadata showing applied filters.
message FilterMetadata {
  string network = 1;
  map<string, string> applied_filters = 2;  // All filters including time filters
  string order_by = 3;
}


// Network represents an Ethereum network for public API consumption.
// This provides essential network metadata needed by clients.
message Network {
  string name = 1;           // Full network name (e.g., "mainnet", "sepolia", "fusaka-devnet-0")
  string status = 2;         // "active", "inactive", or "unknown"
  int64 chain_id = 3;       // Ethereum chain ID
  string last_updated = 4;   // ISO 8601 formatted timestamp
}

// NetworkFilterMetadata shows filtering information for network queries.
message NetworkFilterMetadata {
  repeated string applied_filters = 1;  // e.g., ["active_only"]
  int32 total_count = 2;                // Total networks before filtering
  int32 filtered_count = 3;             // Networks after filtering
}

// Error response.
message ErrorResponse {
  string error = 1;
  string message = 2;
  int32 code = 3;
}

// GetConfigResponse is the v1 API response for getting the complete lab configuration.
message GetConfigResponse {
  FrontendConfig config = 1;
}

// FrontendConfig represents the complete frontend configuration for public API consumption.
message FrontendConfig {
  EthereumConfig ethereum = 1;
  ModulesConfig modules = 2;
  ExperimentsConfig experiments = 3;
}

// EthereumConfig contains Ethereum-related configuration for public API consumption.
message EthereumConfig {
  map<string, NetworkConfig> networks = 1;
}

// NetworkConfig represents configuration for a single network for public API consumption.
message NetworkConfig {
  string name = 1;
  string status = 2;
  int64 chain_id = 3 [json_name = "chainId"];
  string description = 4;
  int64 genesis_time = 5 [json_name = "genesisTime"];
  map<string, string> service_urls = 6 [json_name = "serviceUrls"];
  ForkConfig forks = 7;
  string last_updated = 8 [json_name = "lastUpdated"];
}

// ForkConfig contains fork information for public API consumption.
message ForkConfig {
  ConsensusForks consensus = 1;
}

// ConsensusForks contains consensus layer fork information for public API consumption.
message ConsensusForks {
  ForkInfo electra = 1;
}

// ForkInfo contains information about a specific fork for public API consumption.
message ForkInfo {
  int64 epoch = 1;
  map<string, string> min_client_versions = 2 [json_name = "minClientVersions"];
}

// ModulesConfig contains all module configurations for public API consumption.
message ModulesConfig {
  BeaconChainTimingsModule beacon_chain_timings = 1 [json_name = "beaconChainTimings"];
  XatuPublicContributorsModule xatu_public_contributors = 2 [json_name = "xatuPublicContributors"];
  BeaconModule beacon = 3;
}

// BeaconChainTimingsModule configuration for public API consumption.
message BeaconChainTimingsModule {
  repeated string networks = 1;
  repeated TimeWindow time_windows = 2 [json_name = "timeWindows"];
  string path_prefix = 3 [json_name = "pathPrefix"];
}

// XatuPublicContributorsModule configuration for public API consumption.
message XatuPublicContributorsModule {
  repeated string networks = 1;
  repeated TimeWindow time_windows = 2 [json_name = "timeWindows"];
  string path_prefix = 3 [json_name = "pathPrefix"];
  bool enabled = 4;
}

// BeaconModule configuration for public API consumption.
message BeaconModule {
  bool enabled = 1;
  string description = 2;
  string path_prefix = 3 [json_name = "pathPrefix"];
  map<string, BeaconNetworkConfig> networks = 4;
}

// BeaconNetworkConfig contains beacon-specific network configuration for public API consumption.
message BeaconNetworkConfig {
  int32 head_lag_slots = 1 [json_name = "headLagSlots"];
  int32 backlog_days = 2 [json_name = "backlogDays"];
}

// TimeWindow represents a time window configuration for public API consumption.
message TimeWindow {
  string file = 1;
  string step = 2;
  string range = 3;
  string label = 4;
}

// ExperimentsConfig contains all experiments configuration for public API consumption.
message ExperimentsConfig {
  repeated ExperimentConfig experiments = 1;
}

// ExperimentConfig represents a single experiment for public API consumption.
message ExperimentConfig {
  string id = 1;
  bool enabled = 2;
  repeated string networks = 3;
  map<string, ExperimentDataAvailability> data_availability = 4 [json_name = "dataAvailability"];
}

// ExperimentDataAvailability contains data availability information for an experiment on a specific network.
message ExperimentDataAvailability {
  int64 available_from_timestamp = 1 [json_name = "availableFromTimestamp"];
  int64 available_until_timestamp = 2 [json_name = "availableUntilTimestamp"];
  uint64 min_slot = 3 [json_name = "minSlot"];
  uint64 max_slot = 4 [json_name = "maxSlot"];
  uint64 safe_slot = 5 [json_name = "safeSlot"];
  uint64 head_slot = 6 [json_name = "headSlot"];
  bool has_data = 7 [json_name = "hasData"];
}

// GetExperimentConfigRequest defines the request for getting a single experiment's configuration.
message GetExperimentConfigRequest {
  string experiment_id = 1 [json_name = "experimentId"];
}

// GetExperimentConfigResponse returns a single experiment's full configuration with data availability.
message GetExperimentConfigResponse {
  ExperimentConfig experiment = 1;
}
