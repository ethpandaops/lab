// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/int_attestation_attested_head.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.IntAttestationAttestedHead
 */
export class IntAttestationAttestedHead extends Message<IntAttestationAttestedHead> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The source epoch number in the attestation group
   *
   * @generated from field: uint32 source_epoch = 16;
   */
  sourceEpoch = 0;

  /**
   * The wall clock time when the source epoch started
   *
   * @generated from field: uint32 source_epoch_start_date_time = 17;
   */
  sourceEpochStartDateTime = 0;

  /**
   * The source beacon block root hash in the attestation group
   *
   * @generated from field: string source_root = 18;
   */
  sourceRoot = "";

  /**
   * The target epoch number in the attestation group
   *
   * @generated from field: uint32 target_epoch = 19;
   */
  targetEpoch = 0;

  /**
   * The wall clock time when the target epoch started
   *
   * @generated from field: uint32 target_epoch_start_date_time = 20;
   */
  targetEpochStartDateTime = 0;

  /**
   * The target beacon block root hash in the attestation group
   *
   * @generated from field: string target_root = 21;
   */
  targetRoot = "";

  /**
   * The beacon block root hash
   *
   * @generated from field: string block_root = 22;
   */
  blockRoot = "";

  /**
   * The index of the validator attesting
   *
   * @generated from field: uint32 attesting_validator_index = 23;
   */
  attestingValidatorIndex = 0;

  constructor(data?: PartialMessage<IntAttestationAttestedHead>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.IntAttestationAttestedHead";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "source_epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 17, name: "source_epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 18, name: "source_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "target_epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 20, name: "target_epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 21, name: "target_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "block_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "attesting_validator_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntAttestationAttestedHead {
    return new IntAttestationAttestedHead().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntAttestationAttestedHead {
    return new IntAttestationAttestedHead().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntAttestationAttestedHead {
    return new IntAttestationAttestedHead().fromJsonString(jsonString, options);
  }

  static equals(a: IntAttestationAttestedHead | PlainMessage<IntAttestationAttestedHead> | undefined, b: IntAttestationAttestedHead | PlainMessage<IntAttestationAttestedHead> | undefined): boolean {
    return proto3.util.equals(IntAttestationAttestedHead, a, b);
  }
}

/**
 * ListIntAttestationAttestedHeadRequest is the request message for listing int_attestation_attested_head records
 *
 * @generated from message cbt.ListIntAttestationAttestedHeadRequest
 */
export class ListIntAttestationAttestedHeadRequest extends Message<ListIntAttestationAttestedHeadRequest> {
  /**
   * Filter by slot_start_date_time (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.StringFilter block_root = 2;
   */
  blockRoot?: StringFilter;

  /**
   * Filter by attesting_validator_index (ORDER BY column 3 - optional)
   *
   * @generated from field: cbt.UInt32Filter attesting_validator_index = 3;
   */
  attestingValidatorIndex?: UInt32Filter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 4;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot (optional)
   *
   * @generated from field: cbt.UInt32Filter slot = 5;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 6;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 7;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by source_epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter source_epoch = 8;
   */
  sourceEpoch?: UInt32Filter;

  /**
   * Filter by source_epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter source_epoch_start_date_time = 9;
   */
  sourceEpochStartDateTime?: UInt32Filter;

  /**
   * Filter by source_root (optional)
   *
   * @generated from field: cbt.StringFilter source_root = 10;
   */
  sourceRoot?: StringFilter;

  /**
   * Filter by target_epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter target_epoch = 11;
   */
  targetEpoch?: UInt32Filter;

  /**
   * Filter by target_epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter target_epoch_start_date_time = 12;
   */
  targetEpochStartDateTime?: UInt32Filter;

  /**
   * Filter by target_root (optional)
   *
   * @generated from field: cbt.StringFilter target_root = 13;
   */
  targetRoot?: StringFilter;

  /**
   * The maximum number of int_attestation_attested_head to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 14;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListIntAttestationAttestedHead` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 15;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 16;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListIntAttestationAttestedHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListIntAttestationAttestedHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "block_root", kind: "message", T: StringFilter },
    { no: 3, name: "attesting_validator_index", kind: "message", T: UInt32Filter },
    { no: 4, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 5, name: "slot", kind: "message", T: UInt32Filter },
    { no: 6, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 7, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 8, name: "source_epoch", kind: "message", T: UInt32Filter },
    { no: 9, name: "source_epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 10, name: "source_root", kind: "message", T: StringFilter },
    { no: 11, name: "target_epoch", kind: "message", T: UInt32Filter },
    { no: 12, name: "target_epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 13, name: "target_root", kind: "message", T: StringFilter },
    { no: 14, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 15, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntAttestationAttestedHeadRequest {
    return new ListIntAttestationAttestedHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntAttestationAttestedHeadRequest {
    return new ListIntAttestationAttestedHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntAttestationAttestedHeadRequest {
    return new ListIntAttestationAttestedHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntAttestationAttestedHeadRequest | PlainMessage<ListIntAttestationAttestedHeadRequest> | undefined, b: ListIntAttestationAttestedHeadRequest | PlainMessage<ListIntAttestationAttestedHeadRequest> | undefined): boolean {
    return proto3.util.equals(ListIntAttestationAttestedHeadRequest, a, b);
  }
}

/**
 * ListIntAttestationAttestedHeadResponse is the response message for listing int_attestation_attested_head records
 *
 * @generated from message cbt.ListIntAttestationAttestedHeadResponse
 */
export class ListIntAttestationAttestedHeadResponse extends Message<ListIntAttestationAttestedHeadResponse> {
  /**
   * The list of int_attestation_attested_head.
   *
   * @generated from field: repeated cbt.IntAttestationAttestedHead int_attestation_attested_head = 1;
   */
  intAttestationAttestedHead: IntAttestationAttestedHead[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListIntAttestationAttestedHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListIntAttestationAttestedHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int_attestation_attested_head", kind: "message", T: IntAttestationAttestedHead, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntAttestationAttestedHeadResponse {
    return new ListIntAttestationAttestedHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntAttestationAttestedHeadResponse {
    return new ListIntAttestationAttestedHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntAttestationAttestedHeadResponse {
    return new ListIntAttestationAttestedHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntAttestationAttestedHeadResponse | PlainMessage<ListIntAttestationAttestedHeadResponse> | undefined, b: ListIntAttestationAttestedHeadResponse | PlainMessage<ListIntAttestationAttestedHeadResponse> | undefined): boolean {
    return proto3.util.equals(ListIntAttestationAttestedHeadResponse, a, b);
  }
}

/**
 * GetIntAttestationAttestedHeadRequest is the request message for getting a single int_attestation_attested_head record by primary key
 *
 * @generated from message cbt.GetIntAttestationAttestedHeadRequest
 */
export class GetIntAttestationAttestedHeadRequest extends Message<GetIntAttestationAttestedHeadRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetIntAttestationAttestedHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetIntAttestationAttestedHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntAttestationAttestedHeadRequest {
    return new GetIntAttestationAttestedHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntAttestationAttestedHeadRequest {
    return new GetIntAttestationAttestedHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntAttestationAttestedHeadRequest {
    return new GetIntAttestationAttestedHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntAttestationAttestedHeadRequest | PlainMessage<GetIntAttestationAttestedHeadRequest> | undefined, b: GetIntAttestationAttestedHeadRequest | PlainMessage<GetIntAttestationAttestedHeadRequest> | undefined): boolean {
    return proto3.util.equals(GetIntAttestationAttestedHeadRequest, a, b);
  }
}

/**
 * GetIntAttestationAttestedHeadResponse is the response message for getting a single int_attestation_attested_head record
 *
 * @generated from message cbt.GetIntAttestationAttestedHeadResponse
 */
export class GetIntAttestationAttestedHeadResponse extends Message<GetIntAttestationAttestedHeadResponse> {
  /**
   * @generated from field: cbt.IntAttestationAttestedHead item = 1;
   */
  item?: IntAttestationAttestedHead;

  constructor(data?: PartialMessage<GetIntAttestationAttestedHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetIntAttestationAttestedHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: IntAttestationAttestedHead },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntAttestationAttestedHeadResponse {
    return new GetIntAttestationAttestedHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntAttestationAttestedHeadResponse {
    return new GetIntAttestationAttestedHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntAttestationAttestedHeadResponse {
    return new GetIntAttestationAttestedHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntAttestationAttestedHeadResponse | PlainMessage<GetIntAttestationAttestedHeadResponse> | undefined, b: GetIntAttestationAttestedHeadResponse | PlainMessage<GetIntAttestationAttestedHeadResponse> | undefined): boolean {
    return proto3.util.equals(GetIntAttestationAttestedHeadResponse, a, b);
  }
}

