// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_mev_bid_highest_value_by_builder_chunked_50ms.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Int32Filter, Int64Filter, StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctMevBidHighestValueByBuilderChunked50ms
 */
export class FctMevBidHighestValueByBuilderChunked50ms extends Message<FctMevBidHighestValueByBuilderChunked50ms> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * Slot number within the block bid
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The start time for the slot that the bid is for
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * Epoch number derived from the slot that the bid is for
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The start time for the epoch that the bid is for
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start
   *
   * @generated from field: int32 chunk_slot_start_diff = 16;
   */
  chunkSlotStartDiff = 0;

  /**
   * The timestamp of the earliest bid for this block_hash from this builder
   *
   * @generated from field: int64 earliest_bid_date_time = 17;
   */
  earliestBidDateTime = protoInt64.zero;

  /**
   * The relay that the bid was fetched from
   *
   * @generated from field: repeated string relay_names = 18;
   */
  relayNames: string[] = [];

  /**
   * The execution block hash of the bid
   *
   * @generated from field: string block_hash = 19;
   */
  blockHash = "";

  /**
   * The builder pubkey of the bid
   *
   * @generated from field: string builder_pubkey = 20;
   */
  builderPubkey = "";

  /**
   * The transaction value in wei
   *
   * @generated from field: string value = 21;
   */
  value = "";

  constructor(data?: PartialMessage<FctMevBidHighestValueByBuilderChunked50ms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctMevBidHighestValueByBuilderChunked50ms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "chunk_slot_start_diff", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 17, name: "earliest_bid_date_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "relay_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 19, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "builder_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctMevBidHighestValueByBuilderChunked50ms {
    return new FctMevBidHighestValueByBuilderChunked50ms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctMevBidHighestValueByBuilderChunked50ms {
    return new FctMevBidHighestValueByBuilderChunked50ms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctMevBidHighestValueByBuilderChunked50ms {
    return new FctMevBidHighestValueByBuilderChunked50ms().fromJsonString(jsonString, options);
  }

  static equals(a: FctMevBidHighestValueByBuilderChunked50ms | PlainMessage<FctMevBidHighestValueByBuilderChunked50ms> | undefined, b: FctMevBidHighestValueByBuilderChunked50ms | PlainMessage<FctMevBidHighestValueByBuilderChunked50ms> | undefined): boolean {
    return proto3.util.equals(FctMevBidHighestValueByBuilderChunked50ms, a, b);
  }
}

/**
 * Request for listing fct_mev_bid_highest_value_by_builder_chunked_50ms records
 *
 * @generated from message cbt.ListFctMevBidHighestValueByBuilderChunked50msRequest
 */
export class ListFctMevBidHighestValueByBuilderChunked50msRequest extends Message<ListFctMevBidHighestValueByBuilderChunked50msRequest> {
  /**
   * Filter by slot_start_date_time - The start time for the slot that the bid is for (PRIMARY KEY - required unless using alternatives: slot)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by chunk_slot_start_diff - The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.Int32Filter chunk_slot_start_diff = 2;
   */
  chunkSlotStartDiff?: Int32Filter;

  /**
   * Filter by builder_pubkey - The builder pubkey of the bid (ORDER BY column 3 - optional)
   *
   * @generated from field: cbt.StringFilter builder_pubkey = 3;
   */
  builderPubkey?: StringFilter;

  /**
   * Filter by updated_date_time - Timestamp when the record was last updated (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 4;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot - Slot number within the block bid (PROJECTION: p_by_slot - alternative to slot_start_date_time)
   *
   * @generated from field: cbt.UInt32Filter slot = 5;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch - Epoch number derived from the slot that the bid is for (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 6;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time - The start time for the epoch that the bid is for (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 7;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by earliest_bid_date_time - The timestamp of the earliest bid for this block_hash from this builder (optional)
   *
   * @generated from field: cbt.Int64Filter earliest_bid_date_time = 8;
   */
  earliestBidDateTime?: Int64Filter;

  /**
   * Filter by relay_names - The relay that the bid was fetched from (optional)
   *
   * @generated from field: repeated string relay_names = 9;
   */
  relayNames: string[] = [];

  /**
   * Filter by block_hash - The execution block hash of the bid (optional)
   *
   * @generated from field: cbt.StringFilter block_hash = 10;
   */
  blockHash?: StringFilter;

  /**
   * Filter by value - The transaction value in wei (optional)
   *
   * @generated from field: cbt.StringFilter value = 11;
   */
  value?: StringFilter;

  /**
   * The maximum number of fct_mev_bid_highest_value_by_builder_chunked_50ms to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 12;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctMevBidHighestValueByBuilderChunked50ms` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 13;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 14;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctMevBidHighestValueByBuilderChunked50msRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctMevBidHighestValueByBuilderChunked50msRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "chunk_slot_start_diff", kind: "message", T: Int32Filter },
    { no: 3, name: "builder_pubkey", kind: "message", T: StringFilter },
    { no: 4, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 5, name: "slot", kind: "message", T: UInt32Filter },
    { no: 6, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 7, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 8, name: "earliest_bid_date_time", kind: "message", T: Int64Filter },
    { no: 9, name: "relay_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "block_hash", kind: "message", T: StringFilter },
    { no: 11, name: "value", kind: "message", T: StringFilter },
    { no: 12, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 13, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctMevBidHighestValueByBuilderChunked50msRequest {
    return new ListFctMevBidHighestValueByBuilderChunked50msRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctMevBidHighestValueByBuilderChunked50msRequest {
    return new ListFctMevBidHighestValueByBuilderChunked50msRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctMevBidHighestValueByBuilderChunked50msRequest {
    return new ListFctMevBidHighestValueByBuilderChunked50msRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctMevBidHighestValueByBuilderChunked50msRequest | PlainMessage<ListFctMevBidHighestValueByBuilderChunked50msRequest> | undefined, b: ListFctMevBidHighestValueByBuilderChunked50msRequest | PlainMessage<ListFctMevBidHighestValueByBuilderChunked50msRequest> | undefined): boolean {
    return proto3.util.equals(ListFctMevBidHighestValueByBuilderChunked50msRequest, a, b);
  }
}

/**
 * Response for listing fct_mev_bid_highest_value_by_builder_chunked_50ms records
 *
 * @generated from message cbt.ListFctMevBidHighestValueByBuilderChunked50msResponse
 */
export class ListFctMevBidHighestValueByBuilderChunked50msResponse extends Message<ListFctMevBidHighestValueByBuilderChunked50msResponse> {
  /**
   * The list of fct_mev_bid_highest_value_by_builder_chunked_50ms.
   *
   * @generated from field: repeated cbt.FctMevBidHighestValueByBuilderChunked50ms fct_mev_bid_highest_value_by_builder_chunked_50ms = 1;
   */
  fctMevBidHighestValueByBuilderChunked50ms: FctMevBidHighestValueByBuilderChunked50ms[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctMevBidHighestValueByBuilderChunked50msResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctMevBidHighestValueByBuilderChunked50msResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_mev_bid_highest_value_by_builder_chunked_50ms", kind: "message", T: FctMevBidHighestValueByBuilderChunked50ms, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctMevBidHighestValueByBuilderChunked50msResponse {
    return new ListFctMevBidHighestValueByBuilderChunked50msResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctMevBidHighestValueByBuilderChunked50msResponse {
    return new ListFctMevBidHighestValueByBuilderChunked50msResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctMevBidHighestValueByBuilderChunked50msResponse {
    return new ListFctMevBidHighestValueByBuilderChunked50msResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctMevBidHighestValueByBuilderChunked50msResponse | PlainMessage<ListFctMevBidHighestValueByBuilderChunked50msResponse> | undefined, b: ListFctMevBidHighestValueByBuilderChunked50msResponse | PlainMessage<ListFctMevBidHighestValueByBuilderChunked50msResponse> | undefined): boolean {
    return proto3.util.equals(ListFctMevBidHighestValueByBuilderChunked50msResponse, a, b);
  }
}

/**
 * Request for getting a single fct_mev_bid_highest_value_by_builder_chunked_50ms record by primary key
 *
 * @generated from message cbt.GetFctMevBidHighestValueByBuilderChunked50msRequest
 */
export class GetFctMevBidHighestValueByBuilderChunked50msRequest extends Message<GetFctMevBidHighestValueByBuilderChunked50msRequest> {
  /**
   * The start time for the slot that the bid is for
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetFctMevBidHighestValueByBuilderChunked50msRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctMevBidHighestValueByBuilderChunked50msRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctMevBidHighestValueByBuilderChunked50msRequest {
    return new GetFctMevBidHighestValueByBuilderChunked50msRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctMevBidHighestValueByBuilderChunked50msRequest {
    return new GetFctMevBidHighestValueByBuilderChunked50msRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctMevBidHighestValueByBuilderChunked50msRequest {
    return new GetFctMevBidHighestValueByBuilderChunked50msRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctMevBidHighestValueByBuilderChunked50msRequest | PlainMessage<GetFctMevBidHighestValueByBuilderChunked50msRequest> | undefined, b: GetFctMevBidHighestValueByBuilderChunked50msRequest | PlainMessage<GetFctMevBidHighestValueByBuilderChunked50msRequest> | undefined): boolean {
    return proto3.util.equals(GetFctMevBidHighestValueByBuilderChunked50msRequest, a, b);
  }
}

/**
 * Response for getting a single fct_mev_bid_highest_value_by_builder_chunked_50ms record
 *
 * @generated from message cbt.GetFctMevBidHighestValueByBuilderChunked50msResponse
 */
export class GetFctMevBidHighestValueByBuilderChunked50msResponse extends Message<GetFctMevBidHighestValueByBuilderChunked50msResponse> {
  /**
   * @generated from field: cbt.FctMevBidHighestValueByBuilderChunked50ms item = 1;
   */
  item?: FctMevBidHighestValueByBuilderChunked50ms;

  constructor(data?: PartialMessage<GetFctMevBidHighestValueByBuilderChunked50msResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctMevBidHighestValueByBuilderChunked50msResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctMevBidHighestValueByBuilderChunked50ms },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctMevBidHighestValueByBuilderChunked50msResponse {
    return new GetFctMevBidHighestValueByBuilderChunked50msResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctMevBidHighestValueByBuilderChunked50msResponse {
    return new GetFctMevBidHighestValueByBuilderChunked50msResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctMevBidHighestValueByBuilderChunked50msResponse {
    return new GetFctMevBidHighestValueByBuilderChunked50msResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctMevBidHighestValueByBuilderChunked50msResponse | PlainMessage<GetFctMevBidHighestValueByBuilderChunked50msResponse> | undefined, b: GetFctMevBidHighestValueByBuilderChunked50msResponse | PlainMessage<GetFctMevBidHighestValueByBuilderChunked50msResponse> | undefined): boolean {
    return proto3.util.equals(GetFctMevBidHighestValueByBuilderChunked50msResponse, a, b);
  }
}

