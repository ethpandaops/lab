// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_attestation_first_seen_chunked_50ms.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctAttestationFirstSeenChunked50ms
 */
export class FctAttestationFirstSeenChunked50ms extends Message<FctAttestationFirstSeenChunked50ms> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The beacon block root hash that was attested, null means the attestation was missed
   *
   * @generated from field: string block_root = 16;
   */
  blockRoot = "";

  /**
   * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot
   *
   * @generated from field: uint32 chunk_slot_start_diff = 17;
   */
  chunkSlotStartDiff = 0;

  /**
   * The number of attestations in this chunk
   *
   * @generated from field: uint32 attestation_count = 18;
   */
  attestationCount = 0;

  constructor(data?: PartialMessage<FctAttestationFirstSeenChunked50ms>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctAttestationFirstSeenChunked50ms";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "block_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "chunk_slot_start_diff", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 18, name: "attestation_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctAttestationFirstSeenChunked50ms {
    return new FctAttestationFirstSeenChunked50ms().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctAttestationFirstSeenChunked50ms {
    return new FctAttestationFirstSeenChunked50ms().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctAttestationFirstSeenChunked50ms {
    return new FctAttestationFirstSeenChunked50ms().fromJsonString(jsonString, options);
  }

  static equals(a: FctAttestationFirstSeenChunked50ms | PlainMessage<FctAttestationFirstSeenChunked50ms> | undefined, b: FctAttestationFirstSeenChunked50ms | PlainMessage<FctAttestationFirstSeenChunked50ms> | undefined): boolean {
    return proto3.util.equals(FctAttestationFirstSeenChunked50ms, a, b);
  }
}

/**
 * ListFctAttestationFirstSeenChunked50msRequest is the request message for listing fct_attestation_first_seen_chunked_50ms records
 *
 * @generated from message cbt.ListFctAttestationFirstSeenChunked50msRequest
 */
export class ListFctAttestationFirstSeenChunked50msRequest extends Message<ListFctAttestationFirstSeenChunked50msRequest> {
  /**
   * Filter by slot_start_date_time (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.StringFilter block_root = 2;
   */
  blockRoot?: StringFilter;

  /**
   * Filter by chunk_slot_start_diff (ORDER BY column 3 - optional)
   *
   * @generated from field: cbt.UInt32Filter chunk_slot_start_diff = 3;
   */
  chunkSlotStartDiff?: UInt32Filter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 4;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot (optional)
   *
   * @generated from field: cbt.UInt32Filter slot = 5;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 6;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 7;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by attestation_count (optional)
   *
   * @generated from field: cbt.UInt32Filter attestation_count = 8;
   */
  attestationCount?: UInt32Filter;

  /**
   * The maximum number of fct_attestation_first_seen_chunked_50ms to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 9;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctAttestationFirstSeenChunked50ms` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 10;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 11;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctAttestationFirstSeenChunked50msRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAttestationFirstSeenChunked50msRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "block_root", kind: "message", T: StringFilter },
    { no: 3, name: "chunk_slot_start_diff", kind: "message", T: UInt32Filter },
    { no: 4, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 5, name: "slot", kind: "message", T: UInt32Filter },
    { no: 6, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 7, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 8, name: "attestation_count", kind: "message", T: UInt32Filter },
    { no: 9, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAttestationFirstSeenChunked50msRequest {
    return new ListFctAttestationFirstSeenChunked50msRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAttestationFirstSeenChunked50msRequest {
    return new ListFctAttestationFirstSeenChunked50msRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAttestationFirstSeenChunked50msRequest {
    return new ListFctAttestationFirstSeenChunked50msRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAttestationFirstSeenChunked50msRequest | PlainMessage<ListFctAttestationFirstSeenChunked50msRequest> | undefined, b: ListFctAttestationFirstSeenChunked50msRequest | PlainMessage<ListFctAttestationFirstSeenChunked50msRequest> | undefined): boolean {
    return proto3.util.equals(ListFctAttestationFirstSeenChunked50msRequest, a, b);
  }
}

/**
 * ListFctAttestationFirstSeenChunked50msResponse is the response message for listing fct_attestation_first_seen_chunked_50ms records
 *
 * @generated from message cbt.ListFctAttestationFirstSeenChunked50msResponse
 */
export class ListFctAttestationFirstSeenChunked50msResponse extends Message<ListFctAttestationFirstSeenChunked50msResponse> {
  /**
   * The list of fct_attestation_first_seen_chunked_50ms.
   *
   * @generated from field: repeated cbt.FctAttestationFirstSeenChunked50ms fct_attestation_first_seen_chunked_50ms = 1;
   */
  fctAttestationFirstSeenChunked50ms: FctAttestationFirstSeenChunked50ms[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctAttestationFirstSeenChunked50msResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAttestationFirstSeenChunked50msResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_attestation_first_seen_chunked_50ms", kind: "message", T: FctAttestationFirstSeenChunked50ms, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAttestationFirstSeenChunked50msResponse {
    return new ListFctAttestationFirstSeenChunked50msResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAttestationFirstSeenChunked50msResponse {
    return new ListFctAttestationFirstSeenChunked50msResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAttestationFirstSeenChunked50msResponse {
    return new ListFctAttestationFirstSeenChunked50msResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAttestationFirstSeenChunked50msResponse | PlainMessage<ListFctAttestationFirstSeenChunked50msResponse> | undefined, b: ListFctAttestationFirstSeenChunked50msResponse | PlainMessage<ListFctAttestationFirstSeenChunked50msResponse> | undefined): boolean {
    return proto3.util.equals(ListFctAttestationFirstSeenChunked50msResponse, a, b);
  }
}

/**
 * GetFctAttestationFirstSeenChunked50msRequest is the request message for getting a single fct_attestation_first_seen_chunked_50ms record by primary key
 *
 * @generated from message cbt.GetFctAttestationFirstSeenChunked50msRequest
 */
export class GetFctAttestationFirstSeenChunked50msRequest extends Message<GetFctAttestationFirstSeenChunked50msRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetFctAttestationFirstSeenChunked50msRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAttestationFirstSeenChunked50msRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAttestationFirstSeenChunked50msRequest {
    return new GetFctAttestationFirstSeenChunked50msRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAttestationFirstSeenChunked50msRequest {
    return new GetFctAttestationFirstSeenChunked50msRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAttestationFirstSeenChunked50msRequest {
    return new GetFctAttestationFirstSeenChunked50msRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAttestationFirstSeenChunked50msRequest | PlainMessage<GetFctAttestationFirstSeenChunked50msRequest> | undefined, b: GetFctAttestationFirstSeenChunked50msRequest | PlainMessage<GetFctAttestationFirstSeenChunked50msRequest> | undefined): boolean {
    return proto3.util.equals(GetFctAttestationFirstSeenChunked50msRequest, a, b);
  }
}

/**
 * GetFctAttestationFirstSeenChunked50msResponse is the response message for getting a single fct_attestation_first_seen_chunked_50ms record
 *
 * @generated from message cbt.GetFctAttestationFirstSeenChunked50msResponse
 */
export class GetFctAttestationFirstSeenChunked50msResponse extends Message<GetFctAttestationFirstSeenChunked50msResponse> {
  /**
   * @generated from field: cbt.FctAttestationFirstSeenChunked50ms item = 1;
   */
  item?: FctAttestationFirstSeenChunked50ms;

  constructor(data?: PartialMessage<GetFctAttestationFirstSeenChunked50msResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAttestationFirstSeenChunked50msResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctAttestationFirstSeenChunked50ms },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAttestationFirstSeenChunked50msResponse {
    return new GetFctAttestationFirstSeenChunked50msResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAttestationFirstSeenChunked50msResponse {
    return new GetFctAttestationFirstSeenChunked50msResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAttestationFirstSeenChunked50msResponse {
    return new GetFctAttestationFirstSeenChunked50msResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAttestationFirstSeenChunked50msResponse | PlainMessage<GetFctAttestationFirstSeenChunked50msResponse> | undefined, b: GetFctAttestationFirstSeenChunked50msResponse | PlainMessage<GetFctAttestationFirstSeenChunked50msResponse> | undefined): boolean {
    return proto3.util.equals(GetFctAttestationFirstSeenChunked50msResponse, a, b);
  }
}

