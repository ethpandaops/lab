// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/int_block_blob_count_canonical.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.IntBlockBlobCountCanonical
 */
export class IntBlockBlobCountCanonical extends Message<IntBlockBlobCountCanonical> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The beacon block root hash
   *
   * @generated from field: string block_root = 16;
   */
  blockRoot = "";

  /**
   * The number of blobs in the block
   *
   * @generated from field: uint32 blob_count = 17;
   */
  blobCount = 0;

  constructor(data?: PartialMessage<IntBlockBlobCountCanonical>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.IntBlockBlobCountCanonical";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "block_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "blob_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntBlockBlobCountCanonical {
    return new IntBlockBlobCountCanonical().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntBlockBlobCountCanonical {
    return new IntBlockBlobCountCanonical().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntBlockBlobCountCanonical {
    return new IntBlockBlobCountCanonical().fromJsonString(jsonString, options);
  }

  static equals(a: IntBlockBlobCountCanonical | PlainMessage<IntBlockBlobCountCanonical> | undefined, b: IntBlockBlobCountCanonical | PlainMessage<IntBlockBlobCountCanonical> | undefined): boolean {
    return proto3.util.equals(IntBlockBlobCountCanonical, a, b);
  }
}

/**
 * ListIntBlockBlobCountCanonicalRequest is the request message for listing int_block_blob_count_canonical records
 *
 * @generated from message cbt.ListIntBlockBlobCountCanonicalRequest
 */
export class ListIntBlockBlobCountCanonicalRequest extends Message<ListIntBlockBlobCountCanonicalRequest> {
  /**
   * Filter by slot_start_date_time (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.StringFilter block_root = 2;
   */
  blockRoot?: StringFilter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 3;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot (optional)
   *
   * @generated from field: cbt.UInt32Filter slot = 4;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 5;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 6;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by blob_count (optional)
   *
   * @generated from field: cbt.UInt32Filter blob_count = 7;
   */
  blobCount?: UInt32Filter;

  /**
   * The maximum number of int_block_blob_count_canonical to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 8;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListIntBlockBlobCountCanonical` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 9;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 10;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListIntBlockBlobCountCanonicalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListIntBlockBlobCountCanonicalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "block_root", kind: "message", T: StringFilter },
    { no: 3, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 4, name: "slot", kind: "message", T: UInt32Filter },
    { no: 5, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 6, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 7, name: "blob_count", kind: "message", T: UInt32Filter },
    { no: 8, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntBlockBlobCountCanonicalRequest {
    return new ListIntBlockBlobCountCanonicalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntBlockBlobCountCanonicalRequest {
    return new ListIntBlockBlobCountCanonicalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntBlockBlobCountCanonicalRequest {
    return new ListIntBlockBlobCountCanonicalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntBlockBlobCountCanonicalRequest | PlainMessage<ListIntBlockBlobCountCanonicalRequest> | undefined, b: ListIntBlockBlobCountCanonicalRequest | PlainMessage<ListIntBlockBlobCountCanonicalRequest> | undefined): boolean {
    return proto3.util.equals(ListIntBlockBlobCountCanonicalRequest, a, b);
  }
}

/**
 * ListIntBlockBlobCountCanonicalResponse is the response message for listing int_block_blob_count_canonical records
 *
 * @generated from message cbt.ListIntBlockBlobCountCanonicalResponse
 */
export class ListIntBlockBlobCountCanonicalResponse extends Message<ListIntBlockBlobCountCanonicalResponse> {
  /**
   * The list of int_block_blob_count_canonical.
   *
   * @generated from field: repeated cbt.IntBlockBlobCountCanonical int_block_blob_count_canonical = 1;
   */
  intBlockBlobCountCanonical: IntBlockBlobCountCanonical[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListIntBlockBlobCountCanonicalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListIntBlockBlobCountCanonicalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int_block_blob_count_canonical", kind: "message", T: IntBlockBlobCountCanonical, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntBlockBlobCountCanonicalResponse {
    return new ListIntBlockBlobCountCanonicalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntBlockBlobCountCanonicalResponse {
    return new ListIntBlockBlobCountCanonicalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntBlockBlobCountCanonicalResponse {
    return new ListIntBlockBlobCountCanonicalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntBlockBlobCountCanonicalResponse | PlainMessage<ListIntBlockBlobCountCanonicalResponse> | undefined, b: ListIntBlockBlobCountCanonicalResponse | PlainMessage<ListIntBlockBlobCountCanonicalResponse> | undefined): boolean {
    return proto3.util.equals(ListIntBlockBlobCountCanonicalResponse, a, b);
  }
}

/**
 * GetIntBlockBlobCountCanonicalRequest is the request message for getting a single int_block_blob_count_canonical record by primary key
 *
 * @generated from message cbt.GetIntBlockBlobCountCanonicalRequest
 */
export class GetIntBlockBlobCountCanonicalRequest extends Message<GetIntBlockBlobCountCanonicalRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetIntBlockBlobCountCanonicalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetIntBlockBlobCountCanonicalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntBlockBlobCountCanonicalRequest {
    return new GetIntBlockBlobCountCanonicalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntBlockBlobCountCanonicalRequest {
    return new GetIntBlockBlobCountCanonicalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntBlockBlobCountCanonicalRequest {
    return new GetIntBlockBlobCountCanonicalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntBlockBlobCountCanonicalRequest | PlainMessage<GetIntBlockBlobCountCanonicalRequest> | undefined, b: GetIntBlockBlobCountCanonicalRequest | PlainMessage<GetIntBlockBlobCountCanonicalRequest> | undefined): boolean {
    return proto3.util.equals(GetIntBlockBlobCountCanonicalRequest, a, b);
  }
}

/**
 * GetIntBlockBlobCountCanonicalResponse is the response message for getting a single int_block_blob_count_canonical record
 *
 * @generated from message cbt.GetIntBlockBlobCountCanonicalResponse
 */
export class GetIntBlockBlobCountCanonicalResponse extends Message<GetIntBlockBlobCountCanonicalResponse> {
  /**
   * @generated from field: cbt.IntBlockBlobCountCanonical item = 1;
   */
  item?: IntBlockBlobCountCanonical;

  constructor(data?: PartialMessage<GetIntBlockBlobCountCanonicalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetIntBlockBlobCountCanonicalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: IntBlockBlobCountCanonical },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntBlockBlobCountCanonicalResponse {
    return new GetIntBlockBlobCountCanonicalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntBlockBlobCountCanonicalResponse {
    return new GetIntBlockBlobCountCanonicalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntBlockBlobCountCanonicalResponse {
    return new GetIntBlockBlobCountCanonicalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntBlockBlobCountCanonicalResponse | PlainMessage<GetIntBlockBlobCountCanonicalResponse> | undefined, b: GetIntBlockBlobCountCanonicalResponse | PlainMessage<GetIntBlockBlobCountCanonicalResponse> | undefined): boolean {
    return proto3.util.equals(GetIntBlockBlobCountCanonicalResponse, a, b);
  }
}

