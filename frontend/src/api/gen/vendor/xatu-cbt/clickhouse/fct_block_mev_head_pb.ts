// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_block_mev_head.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, StringValue, UInt64Value } from "@bufbuild/protobuf";
import { NullableStringFilter, NullableUInt64Filter, StringFilter, UInt32Filter, UInt64Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctBlockMevHead
 */
export class FctBlockMevHead extends Message<FctBlockMevHead> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * Slot number within the block proposer payload
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The start time for the slot that the proposer payload is for
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * Epoch number derived from the slot that the proposer payload is for
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The start time for the epoch that the proposer payload is for
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The root hash of the beacon block
   *
   * @generated from field: string block_root = 16;
   */
  blockRoot = "";

  /**
   * The earliest timestamp of the accepted bid in milliseconds
   *
   * @generated from field: google.protobuf.UInt64Value earliest_bid_date_time = 17;
   */
  earliestBidDateTime?: bigint;

  /**
   * The relay names that delivered the proposer payload
   *
   * @generated from field: repeated string relay_names = 18;
   */
  relayNames: string[] = [];

  /**
   * The parent hash of the proposer payload
   *
   * @generated from field: string parent_hash = 19;
   */
  parentHash = "";

  /**
   * The block number of the proposer payload
   *
   * @generated from field: uint64 block_number = 20;
   */
  blockNumber = protoInt64.zero;

  /**
   * The block hash of the proposer payload
   *
   * @generated from field: string block_hash = 21;
   */
  blockHash = "";

  /**
   * The builder pubkey of the proposer payload
   *
   * @generated from field: string builder_pubkey = 22;
   */
  builderPubkey = "";

  /**
   * The proposer pubkey of the proposer payload
   *
   * @generated from field: string proposer_pubkey = 23;
   */
  proposerPubkey = "";

  /**
   * The proposer fee recipient of the proposer payload
   *
   * @generated from field: string proposer_fee_recipient = 24;
   */
  proposerFeeRecipient = "";

  /**
   * The gas limit of the proposer payload
   *
   * @generated from field: uint64 gas_limit = 25;
   */
  gasLimit = protoInt64.zero;

  /**
   * The gas used of the proposer payload
   *
   * @generated from field: uint64 gas_used = 26;
   */
  gasUsed = protoInt64.zero;

  /**
   * The transaction value in wei
   *
   * @generated from field: google.protobuf.StringValue value = 27;
   */
  value?: string;

  /**
   * The number of transactions in the proposer payload
   *
   * @generated from field: uint32 transaction_count = 28;
   */
  transactionCount = 0;

  constructor(data?: PartialMessage<FctBlockMevHead>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctBlockMevHead";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "block_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "earliest_bid_date_time", kind: "message", T: UInt64Value },
    { no: 18, name: "relay_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 19, name: "parent_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 21, name: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "builder_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "proposer_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "proposer_fee_recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 26, name: "gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 27, name: "value", kind: "message", T: StringValue },
    { no: 28, name: "transaction_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctBlockMevHead {
    return new FctBlockMevHead().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctBlockMevHead {
    return new FctBlockMevHead().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctBlockMevHead {
    return new FctBlockMevHead().fromJsonString(jsonString, options);
  }

  static equals(a: FctBlockMevHead | PlainMessage<FctBlockMevHead> | undefined, b: FctBlockMevHead | PlainMessage<FctBlockMevHead> | undefined): boolean {
    return proto3.util.equals(FctBlockMevHead, a, b);
  }
}

/**
 * ListFctBlockMevHeadRequest is the request message for listing fct_block_mev_head records
 *
 * @generated from message cbt.ListFctBlockMevHeadRequest
 */
export class ListFctBlockMevHeadRequest extends Message<ListFctBlockMevHeadRequest> {
  /**
   * Filter by slot_start_date_time (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.StringFilter block_root = 2;
   */
  blockRoot?: StringFilter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 3;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot (optional)
   *
   * @generated from field: cbt.UInt32Filter slot = 4;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 5;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 6;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by earliest_bid_date_time (optional)
   *
   * @generated from field: cbt.NullableUInt64Filter earliest_bid_date_time = 7;
   */
  earliestBidDateTime?: NullableUInt64Filter;

  /**
   * Filter by relay_names (optional)
   *
   * @generated from field: repeated string relay_names = 8;
   */
  relayNames: string[] = [];

  /**
   * Filter by parent_hash (optional)
   *
   * @generated from field: cbt.StringFilter parent_hash = 9;
   */
  parentHash?: StringFilter;

  /**
   * Filter by block_number (optional)
   *
   * @generated from field: cbt.UInt64Filter block_number = 10;
   */
  blockNumber?: UInt64Filter;

  /**
   * Filter by block_hash (optional)
   *
   * @generated from field: cbt.StringFilter block_hash = 11;
   */
  blockHash?: StringFilter;

  /**
   * Filter by builder_pubkey (optional)
   *
   * @generated from field: cbt.StringFilter builder_pubkey = 12;
   */
  builderPubkey?: StringFilter;

  /**
   * Filter by proposer_pubkey (optional)
   *
   * @generated from field: cbt.StringFilter proposer_pubkey = 13;
   */
  proposerPubkey?: StringFilter;

  /**
   * Filter by proposer_fee_recipient (optional)
   *
   * @generated from field: cbt.StringFilter proposer_fee_recipient = 14;
   */
  proposerFeeRecipient?: StringFilter;

  /**
   * Filter by gas_limit (optional)
   *
   * @generated from field: cbt.UInt64Filter gas_limit = 15;
   */
  gasLimit?: UInt64Filter;

  /**
   * Filter by gas_used (optional)
   *
   * @generated from field: cbt.UInt64Filter gas_used = 16;
   */
  gasUsed?: UInt64Filter;

  /**
   * Filter by value (optional)
   *
   * @generated from field: cbt.NullableStringFilter value = 17;
   */
  value?: NullableStringFilter;

  /**
   * Filter by transaction_count (optional)
   *
   * @generated from field: cbt.UInt32Filter transaction_count = 18;
   */
  transactionCount?: UInt32Filter;

  /**
   * The maximum number of fct_block_mev_head to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 19;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctBlockMevHead` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 20;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 21;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctBlockMevHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockMevHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "block_root", kind: "message", T: StringFilter },
    { no: 3, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 4, name: "slot", kind: "message", T: UInt32Filter },
    { no: 5, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 6, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 7, name: "earliest_bid_date_time", kind: "message", T: NullableUInt64Filter },
    { no: 8, name: "relay_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "parent_hash", kind: "message", T: StringFilter },
    { no: 10, name: "block_number", kind: "message", T: UInt64Filter },
    { no: 11, name: "block_hash", kind: "message", T: StringFilter },
    { no: 12, name: "builder_pubkey", kind: "message", T: StringFilter },
    { no: 13, name: "proposer_pubkey", kind: "message", T: StringFilter },
    { no: 14, name: "proposer_fee_recipient", kind: "message", T: StringFilter },
    { no: 15, name: "gas_limit", kind: "message", T: UInt64Filter },
    { no: 16, name: "gas_used", kind: "message", T: UInt64Filter },
    { no: 17, name: "value", kind: "message", T: NullableStringFilter },
    { no: 18, name: "transaction_count", kind: "message", T: UInt32Filter },
    { no: 19, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 20, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockMevHeadRequest {
    return new ListFctBlockMevHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockMevHeadRequest {
    return new ListFctBlockMevHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockMevHeadRequest {
    return new ListFctBlockMevHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockMevHeadRequest | PlainMessage<ListFctBlockMevHeadRequest> | undefined, b: ListFctBlockMevHeadRequest | PlainMessage<ListFctBlockMevHeadRequest> | undefined): boolean {
    return proto3.util.equals(ListFctBlockMevHeadRequest, a, b);
  }
}

/**
 * ListFctBlockMevHeadResponse is the response message for listing fct_block_mev_head records
 *
 * @generated from message cbt.ListFctBlockMevHeadResponse
 */
export class ListFctBlockMevHeadResponse extends Message<ListFctBlockMevHeadResponse> {
  /**
   * The list of fct_block_mev_head.
   *
   * @generated from field: repeated cbt.FctBlockMevHead fct_block_mev_head = 1;
   */
  fctBlockMevHead: FctBlockMevHead[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctBlockMevHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockMevHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_block_mev_head", kind: "message", T: FctBlockMevHead, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockMevHeadResponse {
    return new ListFctBlockMevHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockMevHeadResponse {
    return new ListFctBlockMevHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockMevHeadResponse {
    return new ListFctBlockMevHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockMevHeadResponse | PlainMessage<ListFctBlockMevHeadResponse> | undefined, b: ListFctBlockMevHeadResponse | PlainMessage<ListFctBlockMevHeadResponse> | undefined): boolean {
    return proto3.util.equals(ListFctBlockMevHeadResponse, a, b);
  }
}

/**
 * GetFctBlockMevHeadRequest is the request message for getting a single fct_block_mev_head record by primary key
 *
 * @generated from message cbt.GetFctBlockMevHeadRequest
 */
export class GetFctBlockMevHeadRequest extends Message<GetFctBlockMevHeadRequest> {
  /**
   * The start time for the slot that the proposer payload is for
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetFctBlockMevHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockMevHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockMevHeadRequest {
    return new GetFctBlockMevHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockMevHeadRequest {
    return new GetFctBlockMevHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockMevHeadRequest {
    return new GetFctBlockMevHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockMevHeadRequest | PlainMessage<GetFctBlockMevHeadRequest> | undefined, b: GetFctBlockMevHeadRequest | PlainMessage<GetFctBlockMevHeadRequest> | undefined): boolean {
    return proto3.util.equals(GetFctBlockMevHeadRequest, a, b);
  }
}

/**
 * GetFctBlockMevHeadResponse is the response message for getting a single fct_block_mev_head record
 *
 * @generated from message cbt.GetFctBlockMevHeadResponse
 */
export class GetFctBlockMevHeadResponse extends Message<GetFctBlockMevHeadResponse> {
  /**
   * @generated from field: cbt.FctBlockMevHead item = 1;
   */
  item?: FctBlockMevHead;

  constructor(data?: PartialMessage<GetFctBlockMevHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockMevHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctBlockMevHead },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockMevHeadResponse {
    return new GetFctBlockMevHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockMevHeadResponse {
    return new GetFctBlockMevHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockMevHeadResponse {
    return new GetFctBlockMevHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockMevHeadResponse | PlainMessage<GetFctBlockMevHeadResponse> | undefined, b: GetFctBlockMevHeadResponse | PlainMessage<GetFctBlockMevHeadResponse> | undefined): boolean {
    return proto3.util.equals(GetFctBlockMevHeadResponse, a, b);
  }
}

