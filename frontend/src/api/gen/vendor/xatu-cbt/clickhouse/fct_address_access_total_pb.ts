// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_address_access_total.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { UInt32Filter, UInt64Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctAddressAccessTotal
 */
export class FctAddressAccessTotal extends Message<FctAddressAccessTotal> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * Total number of accounts accessed in last 365 days
   *
   * @generated from field: uint64 total_accounts = 12;
   */
  totalAccounts = protoInt64.zero;

  /**
   * Number of expired accounts (not accessed in last 365 days)
   *
   * @generated from field: uint64 expired_accounts = 13;
   */
  expiredAccounts = protoInt64.zero;

  /**
   * Total number of contract accounts accessed in last 365 days
   *
   * @generated from field: uint64 total_contract_accounts = 14;
   */
  totalContractAccounts = protoInt64.zero;

  /**
   * Number of expired contracts (not accessed in last 365 days)
   *
   * @generated from field: uint64 expired_contracts = 15;
   */
  expiredContracts = protoInt64.zero;

  constructor(data?: PartialMessage<FctAddressAccessTotal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctAddressAccessTotal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "total_accounts", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "expired_accounts", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 14, name: "total_contract_accounts", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "expired_contracts", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctAddressAccessTotal {
    return new FctAddressAccessTotal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctAddressAccessTotal {
    return new FctAddressAccessTotal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctAddressAccessTotal {
    return new FctAddressAccessTotal().fromJsonString(jsonString, options);
  }

  static equals(a: FctAddressAccessTotal | PlainMessage<FctAddressAccessTotal> | undefined, b: FctAddressAccessTotal | PlainMessage<FctAddressAccessTotal> | undefined): boolean {
    return proto3.util.equals(FctAddressAccessTotal, a, b);
  }
}

/**
 * ListFctAddressAccessTotalRequest is the request message for listing fct_address_access_total records
 *
 * @generated from message cbt.ListFctAddressAccessTotalRequest
 */
export class ListFctAddressAccessTotalRequest extends Message<ListFctAddressAccessTotalRequest> {
  /**
   * Filter by updated_date_time (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 1;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by total_accounts (optional)
   *
   * @generated from field: cbt.UInt64Filter total_accounts = 2;
   */
  totalAccounts?: UInt64Filter;

  /**
   * Filter by expired_accounts (optional)
   *
   * @generated from field: cbt.UInt64Filter expired_accounts = 3;
   */
  expiredAccounts?: UInt64Filter;

  /**
   * Filter by total_contract_accounts (optional)
   *
   * @generated from field: cbt.UInt64Filter total_contract_accounts = 4;
   */
  totalContractAccounts?: UInt64Filter;

  /**
   * Filter by expired_contracts (optional)
   *
   * @generated from field: cbt.UInt64Filter expired_contracts = 5;
   */
  expiredContracts?: UInt64Filter;

  /**
   * The maximum number of fct_address_access_total to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 6;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctAddressAccessTotal` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 7;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 8;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctAddressAccessTotalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAddressAccessTotalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "total_accounts", kind: "message", T: UInt64Filter },
    { no: 3, name: "expired_accounts", kind: "message", T: UInt64Filter },
    { no: 4, name: "total_contract_accounts", kind: "message", T: UInt64Filter },
    { no: 5, name: "expired_contracts", kind: "message", T: UInt64Filter },
    { no: 6, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAddressAccessTotalRequest {
    return new ListFctAddressAccessTotalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAddressAccessTotalRequest {
    return new ListFctAddressAccessTotalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAddressAccessTotalRequest {
    return new ListFctAddressAccessTotalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAddressAccessTotalRequest | PlainMessage<ListFctAddressAccessTotalRequest> | undefined, b: ListFctAddressAccessTotalRequest | PlainMessage<ListFctAddressAccessTotalRequest> | undefined): boolean {
    return proto3.util.equals(ListFctAddressAccessTotalRequest, a, b);
  }
}

/**
 * ListFctAddressAccessTotalResponse is the response message for listing fct_address_access_total records
 *
 * @generated from message cbt.ListFctAddressAccessTotalResponse
 */
export class ListFctAddressAccessTotalResponse extends Message<ListFctAddressAccessTotalResponse> {
  /**
   * The list of fct_address_access_total.
   *
   * @generated from field: repeated cbt.FctAddressAccessTotal fct_address_access_total = 1;
   */
  fctAddressAccessTotal: FctAddressAccessTotal[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctAddressAccessTotalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAddressAccessTotalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_address_access_total", kind: "message", T: FctAddressAccessTotal, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAddressAccessTotalResponse {
    return new ListFctAddressAccessTotalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAddressAccessTotalResponse {
    return new ListFctAddressAccessTotalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAddressAccessTotalResponse {
    return new ListFctAddressAccessTotalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAddressAccessTotalResponse | PlainMessage<ListFctAddressAccessTotalResponse> | undefined, b: ListFctAddressAccessTotalResponse | PlainMessage<ListFctAddressAccessTotalResponse> | undefined): boolean {
    return proto3.util.equals(ListFctAddressAccessTotalResponse, a, b);
  }
}

/**
 * GetFctAddressAccessTotalRequest is the request message for getting a single fct_address_access_total record by primary key
 *
 * @generated from message cbt.GetFctAddressAccessTotalRequest
 */
export class GetFctAddressAccessTotalRequest extends Message<GetFctAddressAccessTotalRequest> {
  /**
   * Timestamp when the record was last updated
   *
   * Primary key (required)
   *
   * @generated from field: uint32 updated_date_time = 1;
   */
  updatedDateTime = 0;

  constructor(data?: PartialMessage<GetFctAddressAccessTotalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAddressAccessTotalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAddressAccessTotalRequest {
    return new GetFctAddressAccessTotalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAddressAccessTotalRequest {
    return new GetFctAddressAccessTotalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAddressAccessTotalRequest {
    return new GetFctAddressAccessTotalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAddressAccessTotalRequest | PlainMessage<GetFctAddressAccessTotalRequest> | undefined, b: GetFctAddressAccessTotalRequest | PlainMessage<GetFctAddressAccessTotalRequest> | undefined): boolean {
    return proto3.util.equals(GetFctAddressAccessTotalRequest, a, b);
  }
}

/**
 * GetFctAddressAccessTotalResponse is the response message for getting a single fct_address_access_total record
 *
 * @generated from message cbt.GetFctAddressAccessTotalResponse
 */
export class GetFctAddressAccessTotalResponse extends Message<GetFctAddressAccessTotalResponse> {
  /**
   * @generated from field: cbt.FctAddressAccessTotal item = 1;
   */
  item?: FctAddressAccessTotal;

  constructor(data?: PartialMessage<GetFctAddressAccessTotalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAddressAccessTotalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctAddressAccessTotal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAddressAccessTotalResponse {
    return new GetFctAddressAccessTotalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAddressAccessTotalResponse {
    return new GetFctAddressAccessTotalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAddressAccessTotalResponse {
    return new GetFctAddressAccessTotalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAddressAccessTotalResponse | PlainMessage<GetFctAddressAccessTotalResponse> | undefined, b: GetFctAddressAccessTotalResponse | PlainMessage<GetFctAddressAccessTotalResponse> | undefined): boolean {
    return proto3.util.equals(GetFctAddressAccessTotalResponse, a, b);
  }
}

