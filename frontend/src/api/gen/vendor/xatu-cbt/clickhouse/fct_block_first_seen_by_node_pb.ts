// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_block_first_seen_by_node.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { DoubleValue, Message, proto3, StringValue, UInt32Value } from "@bufbuild/protobuf";
import { NullableStringFilter, NullableUInt32Filter, StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctBlockFirstSeenByNode
 */
export class FctBlockFirstSeenByNode extends Message<FctBlockFirstSeenByNode> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * Source of the event
   *
   * @generated from field: string source = 12;
   */
  source = "";

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 13;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 14;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 15;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 16;
   */
  epochStartDateTime = 0;

  /**
   * The time from slot start for the client to see the block
   *
   * @generated from field: uint32 seen_slot_start_diff = 17;
   */
  seenSlotStartDiff = 0;

  /**
   * The beacon block root hash
   *
   * @generated from field: string block_root = 18;
   */
  blockRoot = "";

  /**
   * Username of the node
   *
   * @generated from field: string username = 19;
   */
  username = "";

  /**
   * ID of the node
   *
   * @generated from field: string node_id = 20;
   */
  nodeId = "";

  /**
   * Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified"
   *
   * @generated from field: string classification = 21;
   */
  classification = "";

  /**
   * Name of the client
   *
   * @generated from field: string meta_client_name = 22;
   */
  metaClientName = "";

  /**
   * Version of the client
   *
   * @generated from field: string meta_client_version = 23;
   */
  metaClientVersion = "";

  /**
   * Implementation of the client
   *
   * @generated from field: string meta_client_implementation = 24;
   */
  metaClientImplementation = "";

  /**
   * City of the client
   *
   * @generated from field: string meta_client_geo_city = 25;
   */
  metaClientGeoCity = "";

  /**
   * Country of the client
   *
   * @generated from field: string meta_client_geo_country = 26;
   */
  metaClientGeoCountry = "";

  /**
   * Country code of the client
   *
   * @generated from field: string meta_client_geo_country_code = 27;
   */
  metaClientGeoCountryCode = "";

  /**
   * Continent code of the client
   *
   * @generated from field: string meta_client_geo_continent_code = 28;
   */
  metaClientGeoContinentCode = "";

  /**
   * Longitude of the client
   *
   * @generated from field: google.protobuf.DoubleValue meta_client_geo_longitude = 29;
   */
  metaClientGeoLongitude?: number;

  /**
   * Latitude of the client
   *
   * @generated from field: google.protobuf.DoubleValue meta_client_geo_latitude = 30;
   */
  metaClientGeoLatitude?: number;

  /**
   * Autonomous system number of the client
   *
   * @generated from field: google.protobuf.UInt32Value meta_client_geo_autonomous_system_number = 31;
   */
  metaClientGeoAutonomousSystemNumber?: number;

  /**
   * Autonomous system organization of the client
   *
   * @generated from field: google.protobuf.StringValue meta_client_geo_autonomous_system_organization = 32;
   */
  metaClientGeoAutonomousSystemOrganization?: string;

  /**
   * Ethereum consensus client version
   *
   * @generated from field: string meta_consensus_version = 33;
   */
  metaConsensusVersion = "";

  /**
   * Ethereum consensus client implementation
   *
   * @generated from field: string meta_consensus_implementation = 34;
   */
  metaConsensusImplementation = "";

  constructor(data?: PartialMessage<FctBlockFirstSeenByNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctBlockFirstSeenByNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 17, name: "seen_slot_start_diff", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 18, name: "block_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "meta_client_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "meta_client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "meta_client_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "meta_client_geo_city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "meta_client_geo_country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "meta_client_geo_country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "meta_client_geo_continent_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "meta_client_geo_longitude", kind: "message", T: DoubleValue },
    { no: 30, name: "meta_client_geo_latitude", kind: "message", T: DoubleValue },
    { no: 31, name: "meta_client_geo_autonomous_system_number", kind: "message", T: UInt32Value },
    { no: 32, name: "meta_client_geo_autonomous_system_organization", kind: "message", T: StringValue },
    { no: 33, name: "meta_consensus_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 34, name: "meta_consensus_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctBlockFirstSeenByNode {
    return new FctBlockFirstSeenByNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctBlockFirstSeenByNode {
    return new FctBlockFirstSeenByNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctBlockFirstSeenByNode {
    return new FctBlockFirstSeenByNode().fromJsonString(jsonString, options);
  }

  static equals(a: FctBlockFirstSeenByNode | PlainMessage<FctBlockFirstSeenByNode> | undefined, b: FctBlockFirstSeenByNode | PlainMessage<FctBlockFirstSeenByNode> | undefined): boolean {
    return proto3.util.equals(FctBlockFirstSeenByNode, a, b);
  }
}

/**
 * Request for listing fct_block_first_seen_by_node records
 *
 * @generated from message cbt.ListFctBlockFirstSeenByNodeRequest
 */
export class ListFctBlockFirstSeenByNodeRequest extends Message<ListFctBlockFirstSeenByNodeRequest> {
  /**
   * Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required unless using alternatives: slot)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root - The beacon block root hash (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.StringFilter block_root = 2;
   */
  blockRoot?: StringFilter;

  /**
   * Filter by meta_client_name - Name of the client (ORDER BY column 3 - optional)
   *
   * @generated from field: cbt.StringFilter meta_client_name = 3;
   */
  metaClientName?: StringFilter;

  /**
   * Filter by updated_date_time - Timestamp when the record was last updated (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 4;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by source - Source of the event (optional)
   *
   * @generated from field: cbt.StringFilter source = 5;
   */
  source?: StringFilter;

  /**
   * Filter by slot - The slot number (PROJECTION: p_by_slot - alternative to slot_start_date_time)
   *
   * @generated from field: cbt.UInt32Filter slot = 6;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch - The epoch number containing the slot (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 7;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 8;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by seen_slot_start_diff - The time from slot start for the client to see the block (optional)
   *
   * @generated from field: cbt.UInt32Filter seen_slot_start_diff = 9;
   */
  seenSlotStartDiff?: UInt32Filter;

  /**
   * Filter by username - Username of the node (optional)
   *
   * @generated from field: cbt.StringFilter username = 10;
   */
  username?: StringFilter;

  /**
   * Filter by node_id - ID of the node (optional)
   *
   * @generated from field: cbt.StringFilter node_id = 11;
   */
  nodeId?: StringFilter;

  /**
   * Filter by classification - Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified" (optional)
   *
   * @generated from field: cbt.StringFilter classification = 12;
   */
  classification?: StringFilter;

  /**
   * Filter by meta_client_version - Version of the client (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_version = 13;
   */
  metaClientVersion?: StringFilter;

  /**
   * Filter by meta_client_implementation - Implementation of the client (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_implementation = 14;
   */
  metaClientImplementation?: StringFilter;

  /**
   * Filter by meta_client_geo_city - City of the client (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_geo_city = 15;
   */
  metaClientGeoCity?: StringFilter;

  /**
   * Filter by meta_client_geo_country - Country of the client (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_geo_country = 16;
   */
  metaClientGeoCountry?: StringFilter;

  /**
   * Filter by meta_client_geo_country_code - Country code of the client (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_geo_country_code = 17;
   */
  metaClientGeoCountryCode?: StringFilter;

  /**
   * Filter by meta_client_geo_continent_code - Continent code of the client (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_geo_continent_code = 18;
   */
  metaClientGeoContinentCode?: StringFilter;

  /**
   * Filter by meta_client_geo_longitude - Longitude of the client (optional)
   *
   * @generated from field: google.protobuf.DoubleValue meta_client_geo_longitude = 19;
   */
  metaClientGeoLongitude?: number;

  /**
   * Filter by meta_client_geo_latitude - Latitude of the client (optional)
   *
   * @generated from field: google.protobuf.DoubleValue meta_client_geo_latitude = 20;
   */
  metaClientGeoLatitude?: number;

  /**
   * Filter by meta_client_geo_autonomous_system_number - Autonomous system number of the client (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter meta_client_geo_autonomous_system_number = 21;
   */
  metaClientGeoAutonomousSystemNumber?: NullableUInt32Filter;

  /**
   * Filter by meta_client_geo_autonomous_system_organization - Autonomous system organization of the client (optional)
   *
   * @generated from field: cbt.NullableStringFilter meta_client_geo_autonomous_system_organization = 22;
   */
  metaClientGeoAutonomousSystemOrganization?: NullableStringFilter;

  /**
   * Filter by meta_consensus_version - Ethereum consensus client version (optional)
   *
   * @generated from field: cbt.StringFilter meta_consensus_version = 23;
   */
  metaConsensusVersion?: StringFilter;

  /**
   * Filter by meta_consensus_implementation - Ethereum consensus client implementation (optional)
   *
   * @generated from field: cbt.StringFilter meta_consensus_implementation = 24;
   */
  metaConsensusImplementation?: StringFilter;

  /**
   * The maximum number of fct_block_first_seen_by_node to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 25;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctBlockFirstSeenByNode` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 26;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 27;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctBlockFirstSeenByNodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockFirstSeenByNodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "block_root", kind: "message", T: StringFilter },
    { no: 3, name: "meta_client_name", kind: "message", T: StringFilter },
    { no: 4, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 5, name: "source", kind: "message", T: StringFilter },
    { no: 6, name: "slot", kind: "message", T: UInt32Filter },
    { no: 7, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 8, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 9, name: "seen_slot_start_diff", kind: "message", T: UInt32Filter },
    { no: 10, name: "username", kind: "message", T: StringFilter },
    { no: 11, name: "node_id", kind: "message", T: StringFilter },
    { no: 12, name: "classification", kind: "message", T: StringFilter },
    { no: 13, name: "meta_client_version", kind: "message", T: StringFilter },
    { no: 14, name: "meta_client_implementation", kind: "message", T: StringFilter },
    { no: 15, name: "meta_client_geo_city", kind: "message", T: StringFilter },
    { no: 16, name: "meta_client_geo_country", kind: "message", T: StringFilter },
    { no: 17, name: "meta_client_geo_country_code", kind: "message", T: StringFilter },
    { no: 18, name: "meta_client_geo_continent_code", kind: "message", T: StringFilter },
    { no: 19, name: "meta_client_geo_longitude", kind: "message", T: DoubleValue },
    { no: 20, name: "meta_client_geo_latitude", kind: "message", T: DoubleValue },
    { no: 21, name: "meta_client_geo_autonomous_system_number", kind: "message", T: NullableUInt32Filter },
    { no: 22, name: "meta_client_geo_autonomous_system_organization", kind: "message", T: NullableStringFilter },
    { no: 23, name: "meta_consensus_version", kind: "message", T: StringFilter },
    { no: 24, name: "meta_consensus_implementation", kind: "message", T: StringFilter },
    { no: 25, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 26, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockFirstSeenByNodeRequest {
    return new ListFctBlockFirstSeenByNodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockFirstSeenByNodeRequest {
    return new ListFctBlockFirstSeenByNodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockFirstSeenByNodeRequest {
    return new ListFctBlockFirstSeenByNodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockFirstSeenByNodeRequest | PlainMessage<ListFctBlockFirstSeenByNodeRequest> | undefined, b: ListFctBlockFirstSeenByNodeRequest | PlainMessage<ListFctBlockFirstSeenByNodeRequest> | undefined): boolean {
    return proto3.util.equals(ListFctBlockFirstSeenByNodeRequest, a, b);
  }
}

/**
 * Response for listing fct_block_first_seen_by_node records
 *
 * @generated from message cbt.ListFctBlockFirstSeenByNodeResponse
 */
export class ListFctBlockFirstSeenByNodeResponse extends Message<ListFctBlockFirstSeenByNodeResponse> {
  /**
   * The list of fct_block_first_seen_by_node.
   *
   * @generated from field: repeated cbt.FctBlockFirstSeenByNode fct_block_first_seen_by_node = 1;
   */
  fctBlockFirstSeenByNode: FctBlockFirstSeenByNode[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctBlockFirstSeenByNodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockFirstSeenByNodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_block_first_seen_by_node", kind: "message", T: FctBlockFirstSeenByNode, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockFirstSeenByNodeResponse {
    return new ListFctBlockFirstSeenByNodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockFirstSeenByNodeResponse {
    return new ListFctBlockFirstSeenByNodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockFirstSeenByNodeResponse {
    return new ListFctBlockFirstSeenByNodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockFirstSeenByNodeResponse | PlainMessage<ListFctBlockFirstSeenByNodeResponse> | undefined, b: ListFctBlockFirstSeenByNodeResponse | PlainMessage<ListFctBlockFirstSeenByNodeResponse> | undefined): boolean {
    return proto3.util.equals(ListFctBlockFirstSeenByNodeResponse, a, b);
  }
}

/**
 * Request for getting a single fct_block_first_seen_by_node record by primary key
 *
 * @generated from message cbt.GetFctBlockFirstSeenByNodeRequest
 */
export class GetFctBlockFirstSeenByNodeRequest extends Message<GetFctBlockFirstSeenByNodeRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetFctBlockFirstSeenByNodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockFirstSeenByNodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockFirstSeenByNodeRequest {
    return new GetFctBlockFirstSeenByNodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockFirstSeenByNodeRequest {
    return new GetFctBlockFirstSeenByNodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockFirstSeenByNodeRequest {
    return new GetFctBlockFirstSeenByNodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockFirstSeenByNodeRequest | PlainMessage<GetFctBlockFirstSeenByNodeRequest> | undefined, b: GetFctBlockFirstSeenByNodeRequest | PlainMessage<GetFctBlockFirstSeenByNodeRequest> | undefined): boolean {
    return proto3.util.equals(GetFctBlockFirstSeenByNodeRequest, a, b);
  }
}

/**
 * Response for getting a single fct_block_first_seen_by_node record
 *
 * @generated from message cbt.GetFctBlockFirstSeenByNodeResponse
 */
export class GetFctBlockFirstSeenByNodeResponse extends Message<GetFctBlockFirstSeenByNodeResponse> {
  /**
   * @generated from field: cbt.FctBlockFirstSeenByNode item = 1;
   */
  item?: FctBlockFirstSeenByNode;

  constructor(data?: PartialMessage<GetFctBlockFirstSeenByNodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockFirstSeenByNodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctBlockFirstSeenByNode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockFirstSeenByNodeResponse {
    return new GetFctBlockFirstSeenByNodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockFirstSeenByNodeResponse {
    return new GetFctBlockFirstSeenByNodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockFirstSeenByNodeResponse {
    return new GetFctBlockFirstSeenByNodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockFirstSeenByNodeResponse | PlainMessage<GetFctBlockFirstSeenByNodeResponse> | undefined, b: GetFctBlockFirstSeenByNodeResponse | PlainMessage<GetFctBlockFirstSeenByNodeResponse> | undefined): boolean {
    return proto3.util.equals(GetFctBlockFirstSeenByNodeResponse, a, b);
  }
}

