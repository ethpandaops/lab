// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/admin_cbt.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { StringFilter, UInt64Filter } from "./common_pb.js";

/**
 * @generated from message cbt.AdminCbt
 */
export class AdminCbt extends Message<AdminCbt> {
  /**
   * @generated from field: uint64 updated_date_time = 11;
   */
  updatedDateTime = protoInt64.zero;

  /**
   * The database name
   *
   * @generated from field: string database = 12;
   */
  database = "";

  /**
   * The table name
   *
   * @generated from field: string table = 13;
   */
  table = "";

  /**
   * The starting position of the processed interval
   *
   * @generated from field: uint64 position = 14;
   */
  position = protoInt64.zero;

  /**
   * The size of the interval processed
   *
   * @generated from field: uint64 interval = 15;
   */
  interval = protoInt64.zero;

  constructor(data?: PartialMessage<AdminCbt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.AdminCbt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "position", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "interval", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AdminCbt {
    return new AdminCbt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AdminCbt {
    return new AdminCbt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AdminCbt {
    return new AdminCbt().fromJsonString(jsonString, options);
  }

  static equals(a: AdminCbt | PlainMessage<AdminCbt> | undefined, b: AdminCbt | PlainMessage<AdminCbt> | undefined): boolean {
    return proto3.util.equals(AdminCbt, a, b);
  }
}

/**
 * ListAdminCbtRequest is the request message for listing admin_cbt records
 *
 * @generated from message cbt.ListAdminCbtRequest
 */
export class ListAdminCbtRequest extends Message<ListAdminCbtRequest> {
  /**
   * Filter by database (PRIMARY KEY - required)
   *
   * @generated from field: cbt.StringFilter database = 1;
   */
  database?: StringFilter;

  /**
   * Filter by position (ORDER BY column 3 - optional)
   *
   * @generated from field: cbt.UInt64Filter position = 2;
   */
  position?: UInt64Filter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt64Filter updated_date_time = 3;
   */
  updatedDateTime?: UInt64Filter;

  /**
   * Filter by table (optional)
   *
   * @generated from field: cbt.StringFilter table = 4;
   */
  table?: StringFilter;

  /**
   * Filter by interval (optional)
   *
   * @generated from field: cbt.UInt64Filter interval = 5;
   */
  interval?: UInt64Filter;

  /**
   * The maximum number of admin_cbt to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 6;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListAdminCbt` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 7;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 8;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListAdminCbtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListAdminCbtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "message", T: StringFilter },
    { no: 2, name: "position", kind: "message", T: UInt64Filter },
    { no: 3, name: "updated_date_time", kind: "message", T: UInt64Filter },
    { no: 4, name: "table", kind: "message", T: StringFilter },
    { no: 5, name: "interval", kind: "message", T: UInt64Filter },
    { no: 6, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAdminCbtRequest {
    return new ListAdminCbtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAdminCbtRequest {
    return new ListAdminCbtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAdminCbtRequest {
    return new ListAdminCbtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAdminCbtRequest | PlainMessage<ListAdminCbtRequest> | undefined, b: ListAdminCbtRequest | PlainMessage<ListAdminCbtRequest> | undefined): boolean {
    return proto3.util.equals(ListAdminCbtRequest, a, b);
  }
}

/**
 * ListAdminCbtResponse is the response message for listing admin_cbt records
 *
 * @generated from message cbt.ListAdminCbtResponse
 */
export class ListAdminCbtResponse extends Message<ListAdminCbtResponse> {
  /**
   * The list of admin_cbt.
   *
   * @generated from field: repeated cbt.AdminCbt admin_cbt = 1;
   */
  adminCbt: AdminCbt[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListAdminCbtResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListAdminCbtResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin_cbt", kind: "message", T: AdminCbt, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAdminCbtResponse {
    return new ListAdminCbtResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAdminCbtResponse {
    return new ListAdminCbtResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAdminCbtResponse {
    return new ListAdminCbtResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAdminCbtResponse | PlainMessage<ListAdminCbtResponse> | undefined, b: ListAdminCbtResponse | PlainMessage<ListAdminCbtResponse> | undefined): boolean {
    return proto3.util.equals(ListAdminCbtResponse, a, b);
  }
}

/**
 * GetAdminCbtRequest is the request message for getting a single admin_cbt record by primary key
 *
 * @generated from message cbt.GetAdminCbtRequest
 */
export class GetAdminCbtRequest extends Message<GetAdminCbtRequest> {
  /**
   * The database name
   *
   * Primary key (required)
   *
   * @generated from field: string database = 1;
   */
  database = "";

  constructor(data?: PartialMessage<GetAdminCbtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetAdminCbtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "database", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminCbtRequest {
    return new GetAdminCbtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminCbtRequest {
    return new GetAdminCbtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminCbtRequest {
    return new GetAdminCbtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminCbtRequest | PlainMessage<GetAdminCbtRequest> | undefined, b: GetAdminCbtRequest | PlainMessage<GetAdminCbtRequest> | undefined): boolean {
    return proto3.util.equals(GetAdminCbtRequest, a, b);
  }
}

/**
 * GetAdminCbtResponse is the response message for getting a single admin_cbt record
 *
 * @generated from message cbt.GetAdminCbtResponse
 */
export class GetAdminCbtResponse extends Message<GetAdminCbtResponse> {
  /**
   * @generated from field: cbt.AdminCbt item = 1;
   */
  item?: AdminCbt;

  constructor(data?: PartialMessage<GetAdminCbtResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetAdminCbtResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: AdminCbt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminCbtResponse {
    return new GetAdminCbtResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminCbtResponse {
    return new GetAdminCbtResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminCbtResponse {
    return new GetAdminCbtResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminCbtResponse | PlainMessage<GetAdminCbtResponse> | undefined, b: GetAdminCbtResponse | PlainMessage<GetAdminCbtResponse> | undefined): boolean {
    return proto3.util.equals(GetAdminCbtResponse, a, b);
  }
}

