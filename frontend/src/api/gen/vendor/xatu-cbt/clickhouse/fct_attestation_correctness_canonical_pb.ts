// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_attestation_correctness_canonical.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue, UInt32Value } from "@bufbuild/protobuf";
import { NullableStringFilter, NullableUInt32Filter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctAttestationCorrectnessCanonical
 */
export class FctAttestationCorrectnessCanonical extends Message<FctAttestationCorrectnessCanonical> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The beacon block root hash
   *
   * @generated from field: google.protobuf.StringValue block_root = 16;
   */
  blockRoot?: string;

  /**
   * The maximum number of scheduled votes for the block
   *
   * @generated from field: uint32 votes_max = 17;
   */
  votesMax = 0;

  /**
   * The number of actual votes for the block
   *
   * @generated from field: google.protobuf.UInt32Value votes_actual = 18;
   */
  votesActual?: number;

  constructor(data?: PartialMessage<FctAttestationCorrectnessCanonical>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctAttestationCorrectnessCanonical";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "block_root", kind: "message", T: StringValue },
    { no: 17, name: "votes_max", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 18, name: "votes_actual", kind: "message", T: UInt32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctAttestationCorrectnessCanonical {
    return new FctAttestationCorrectnessCanonical().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctAttestationCorrectnessCanonical {
    return new FctAttestationCorrectnessCanonical().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctAttestationCorrectnessCanonical {
    return new FctAttestationCorrectnessCanonical().fromJsonString(jsonString, options);
  }

  static equals(a: FctAttestationCorrectnessCanonical | PlainMessage<FctAttestationCorrectnessCanonical> | undefined, b: FctAttestationCorrectnessCanonical | PlainMessage<FctAttestationCorrectnessCanonical> | undefined): boolean {
    return proto3.util.equals(FctAttestationCorrectnessCanonical, a, b);
  }
}

/**
 * ListFctAttestationCorrectnessCanonicalRequest is the request message for listing fct_attestation_correctness_canonical records
 *
 * @generated from message cbt.ListFctAttestationCorrectnessCanonicalRequest
 */
export class ListFctAttestationCorrectnessCanonicalRequest extends Message<ListFctAttestationCorrectnessCanonicalRequest> {
  /**
   * Filter by slot_start_date_time (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 2;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot (optional)
   *
   * @generated from field: cbt.UInt32Filter slot = 3;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 4;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 5;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root (optional)
   *
   * @generated from field: cbt.NullableStringFilter block_root = 6;
   */
  blockRoot?: NullableStringFilter;

  /**
   * Filter by votes_max (optional)
   *
   * @generated from field: cbt.UInt32Filter votes_max = 7;
   */
  votesMax?: UInt32Filter;

  /**
   * Filter by votes_actual (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter votes_actual = 8;
   */
  votesActual?: NullableUInt32Filter;

  /**
   * The maximum number of fct_attestation_correctness_canonical to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 9;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctAttestationCorrectnessCanonical` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 10;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 11;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctAttestationCorrectnessCanonicalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAttestationCorrectnessCanonicalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 3, name: "slot", kind: "message", T: UInt32Filter },
    { no: 4, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 5, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 6, name: "block_root", kind: "message", T: NullableStringFilter },
    { no: 7, name: "votes_max", kind: "message", T: UInt32Filter },
    { no: 8, name: "votes_actual", kind: "message", T: NullableUInt32Filter },
    { no: 9, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAttestationCorrectnessCanonicalRequest {
    return new ListFctAttestationCorrectnessCanonicalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAttestationCorrectnessCanonicalRequest {
    return new ListFctAttestationCorrectnessCanonicalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAttestationCorrectnessCanonicalRequest {
    return new ListFctAttestationCorrectnessCanonicalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAttestationCorrectnessCanonicalRequest | PlainMessage<ListFctAttestationCorrectnessCanonicalRequest> | undefined, b: ListFctAttestationCorrectnessCanonicalRequest | PlainMessage<ListFctAttestationCorrectnessCanonicalRequest> | undefined): boolean {
    return proto3.util.equals(ListFctAttestationCorrectnessCanonicalRequest, a, b);
  }
}

/**
 * ListFctAttestationCorrectnessCanonicalResponse is the response message for listing fct_attestation_correctness_canonical records
 *
 * @generated from message cbt.ListFctAttestationCorrectnessCanonicalResponse
 */
export class ListFctAttestationCorrectnessCanonicalResponse extends Message<ListFctAttestationCorrectnessCanonicalResponse> {
  /**
   * The list of fct_attestation_correctness_canonical.
   *
   * @generated from field: repeated cbt.FctAttestationCorrectnessCanonical fct_attestation_correctness_canonical = 1;
   */
  fctAttestationCorrectnessCanonical: FctAttestationCorrectnessCanonical[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctAttestationCorrectnessCanonicalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAttestationCorrectnessCanonicalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_attestation_correctness_canonical", kind: "message", T: FctAttestationCorrectnessCanonical, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAttestationCorrectnessCanonicalResponse {
    return new ListFctAttestationCorrectnessCanonicalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAttestationCorrectnessCanonicalResponse {
    return new ListFctAttestationCorrectnessCanonicalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAttestationCorrectnessCanonicalResponse {
    return new ListFctAttestationCorrectnessCanonicalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAttestationCorrectnessCanonicalResponse | PlainMessage<ListFctAttestationCorrectnessCanonicalResponse> | undefined, b: ListFctAttestationCorrectnessCanonicalResponse | PlainMessage<ListFctAttestationCorrectnessCanonicalResponse> | undefined): boolean {
    return proto3.util.equals(ListFctAttestationCorrectnessCanonicalResponse, a, b);
  }
}

/**
 * GetFctAttestationCorrectnessCanonicalRequest is the request message for getting a single fct_attestation_correctness_canonical record by primary key
 *
 * @generated from message cbt.GetFctAttestationCorrectnessCanonicalRequest
 */
export class GetFctAttestationCorrectnessCanonicalRequest extends Message<GetFctAttestationCorrectnessCanonicalRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetFctAttestationCorrectnessCanonicalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAttestationCorrectnessCanonicalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAttestationCorrectnessCanonicalRequest {
    return new GetFctAttestationCorrectnessCanonicalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAttestationCorrectnessCanonicalRequest {
    return new GetFctAttestationCorrectnessCanonicalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAttestationCorrectnessCanonicalRequest {
    return new GetFctAttestationCorrectnessCanonicalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAttestationCorrectnessCanonicalRequest | PlainMessage<GetFctAttestationCorrectnessCanonicalRequest> | undefined, b: GetFctAttestationCorrectnessCanonicalRequest | PlainMessage<GetFctAttestationCorrectnessCanonicalRequest> | undefined): boolean {
    return proto3.util.equals(GetFctAttestationCorrectnessCanonicalRequest, a, b);
  }
}

/**
 * GetFctAttestationCorrectnessCanonicalResponse is the response message for getting a single fct_attestation_correctness_canonical record
 *
 * @generated from message cbt.GetFctAttestationCorrectnessCanonicalResponse
 */
export class GetFctAttestationCorrectnessCanonicalResponse extends Message<GetFctAttestationCorrectnessCanonicalResponse> {
  /**
   * @generated from field: cbt.FctAttestationCorrectnessCanonical item = 1;
   */
  item?: FctAttestationCorrectnessCanonical;

  constructor(data?: PartialMessage<GetFctAttestationCorrectnessCanonicalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAttestationCorrectnessCanonicalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctAttestationCorrectnessCanonical },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAttestationCorrectnessCanonicalResponse {
    return new GetFctAttestationCorrectnessCanonicalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAttestationCorrectnessCanonicalResponse {
    return new GetFctAttestationCorrectnessCanonicalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAttestationCorrectnessCanonicalResponse {
    return new GetFctAttestationCorrectnessCanonicalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAttestationCorrectnessCanonicalResponse | PlainMessage<GetFctAttestationCorrectnessCanonicalResponse> | undefined, b: GetFctAttestationCorrectnessCanonicalResponse | PlainMessage<GetFctAttestationCorrectnessCanonicalResponse> | undefined): boolean {
    return proto3.util.equals(GetFctAttestationCorrectnessCanonicalResponse, a, b);
  }
}

