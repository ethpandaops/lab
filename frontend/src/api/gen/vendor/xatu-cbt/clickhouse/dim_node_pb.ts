// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/dim_node.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { MapStringStringFilter, NullableStringFilter, StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.DimNode
 */
export class DimNode extends Message<DimNode> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The index of the validator
   *
   * @generated from field: uint32 validator_index = 12;
   */
  validatorIndex = 0;

  /**
   * The name of the node
   *
   * @generated from field: google.protobuf.StringValue name = 13;
   */
  name?: string;

  /**
   * Groups the node belongs to
   *
   * @generated from field: repeated string groups = 14;
   */
  groups: string[] = [];

  /**
   * Tags associated with the node
   *
   * @generated from field: repeated string tags = 15;
   */
  tags: string[] = [];

  /**
   * Additional attributes of the node
   *
   * @generated from field: string attributes = 16;
   */
  attributes = "";

  /**
   * The source entity of the node
   *
   * @generated from field: string source = 17;
   */
  source = "";

  constructor(data?: PartialMessage<DimNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.DimNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "validator_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "name", kind: "message", T: StringValue },
    { no: 14, name: "groups", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 16, name: "attributes", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DimNode {
    return new DimNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DimNode {
    return new DimNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DimNode {
    return new DimNode().fromJsonString(jsonString, options);
  }

  static equals(a: DimNode | PlainMessage<DimNode> | undefined, b: DimNode | PlainMessage<DimNode> | undefined): boolean {
    return proto3.util.equals(DimNode, a, b);
  }
}

/**
 * ListDimNodeRequest is the request message for listing dim_node records
 *
 * @generated from message cbt.ListDimNodeRequest
 */
export class ListDimNodeRequest extends Message<ListDimNodeRequest> {
  /**
   * Filter by validator_index (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter validator_index = 1;
   */
  validatorIndex?: UInt32Filter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 2;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by name (optional)
   *
   * @generated from field: cbt.NullableStringFilter name = 3;
   */
  name?: NullableStringFilter;

  /**
   * Filter by groups (optional)
   *
   * @generated from field: repeated string groups = 4;
   */
  groups: string[] = [];

  /**
   * Filter by tags (optional)
   *
   * @generated from field: repeated string tags = 5;
   */
  tags: string[] = [];

  /**
   * Filter by attributes (optional)
   *
   * @generated from field: cbt.MapStringStringFilter attributes = 6;
   */
  attributes?: MapStringStringFilter;

  /**
   * Filter by source (optional)
   *
   * @generated from field: cbt.StringFilter source = 7;
   */
  source?: StringFilter;

  /**
   * The maximum number of dim_node to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 8;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListDimNode` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 9;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 10;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListDimNodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListDimNodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_index", kind: "message", T: UInt32Filter },
    { no: 2, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 3, name: "name", kind: "message", T: NullableStringFilter },
    { no: 4, name: "groups", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "attributes", kind: "message", T: MapStringStringFilter },
    { no: 7, name: "source", kind: "message", T: StringFilter },
    { no: 8, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDimNodeRequest {
    return new ListDimNodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDimNodeRequest {
    return new ListDimNodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDimNodeRequest {
    return new ListDimNodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDimNodeRequest | PlainMessage<ListDimNodeRequest> | undefined, b: ListDimNodeRequest | PlainMessage<ListDimNodeRequest> | undefined): boolean {
    return proto3.util.equals(ListDimNodeRequest, a, b);
  }
}

/**
 * ListDimNodeResponse is the response message for listing dim_node records
 *
 * @generated from message cbt.ListDimNodeResponse
 */
export class ListDimNodeResponse extends Message<ListDimNodeResponse> {
  /**
   * The list of dim_node.
   *
   * @generated from field: repeated cbt.DimNode dim_node = 1;
   */
  dimNode: DimNode[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListDimNodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListDimNodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dim_node", kind: "message", T: DimNode, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDimNodeResponse {
    return new ListDimNodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDimNodeResponse {
    return new ListDimNodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDimNodeResponse {
    return new ListDimNodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDimNodeResponse | PlainMessage<ListDimNodeResponse> | undefined, b: ListDimNodeResponse | PlainMessage<ListDimNodeResponse> | undefined): boolean {
    return proto3.util.equals(ListDimNodeResponse, a, b);
  }
}

/**
 * GetDimNodeRequest is the request message for getting a single dim_node record by primary key
 *
 * @generated from message cbt.GetDimNodeRequest
 */
export class GetDimNodeRequest extends Message<GetDimNodeRequest> {
  /**
   * The index of the validator
   *
   * Primary key (required)
   *
   * @generated from field: uint32 validator_index = 1;
   */
  validatorIndex = 0;

  constructor(data?: PartialMessage<GetDimNodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetDimNodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDimNodeRequest {
    return new GetDimNodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDimNodeRequest {
    return new GetDimNodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDimNodeRequest {
    return new GetDimNodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDimNodeRequest | PlainMessage<GetDimNodeRequest> | undefined, b: GetDimNodeRequest | PlainMessage<GetDimNodeRequest> | undefined): boolean {
    return proto3.util.equals(GetDimNodeRequest, a, b);
  }
}

/**
 * GetDimNodeResponse is the response message for getting a single dim_node record
 *
 * @generated from message cbt.GetDimNodeResponse
 */
export class GetDimNodeResponse extends Message<GetDimNodeResponse> {
  /**
   * @generated from field: cbt.DimNode item = 1;
   */
  item?: DimNode;

  constructor(data?: PartialMessage<GetDimNodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetDimNodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: DimNode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDimNodeResponse {
    return new GetDimNodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDimNodeResponse {
    return new GetDimNodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDimNodeResponse {
    return new GetDimNodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDimNodeResponse | PlainMessage<GetDimNodeResponse> | undefined, b: GetDimNodeResponse | PlainMessage<GetDimNodeResponse> | undefined): boolean {
    return proto3.util.equals(GetDimNodeResponse, a, b);
  }
}

