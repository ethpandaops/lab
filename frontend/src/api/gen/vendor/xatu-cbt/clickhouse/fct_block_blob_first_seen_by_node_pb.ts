// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_block_blob_first_seen_by_node.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { DoubleValue, Message, proto3, StringValue, UInt32Value } from "@bufbuild/protobuf";
import { NullableStringFilter, NullableUInt32Filter, StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctBlockBlobFirstSeenByNode
 */
export class FctBlockBlobFirstSeenByNode extends Message<FctBlockBlobFirstSeenByNode> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * Source of the event
   *
   * @generated from field: string source = 12;
   */
  source = "";

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 13;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 14;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 15;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 16;
   */
  epochStartDateTime = 0;

  /**
   * The time from slot start for the client to see the block
   *
   * @generated from field: uint32 seen_slot_start_diff = 17;
   */
  seenSlotStartDiff = 0;

  /**
   * The beacon block root hash
   *
   * @generated from field: string block_root = 18;
   */
  blockRoot = "";

  /**
   * The blob index
   *
   * @generated from field: uint32 blob_index = 19;
   */
  blobIndex = 0;

  /**
   * Username of the node
   *
   * @generated from field: string username = 20;
   */
  username = "";

  /**
   * ID of the node
   *
   * @generated from field: string node_id = 21;
   */
  nodeId = "";

  /**
   * Classification of the node, e.g. "individual", "corporate", "internal" (aka ethPandaOps) or "unclassified"
   *
   * @generated from field: string classification = 22;
   */
  classification = "";

  /**
   * Name of the client
   *
   * @generated from field: string meta_client_name = 23;
   */
  metaClientName = "";

  /**
   * Version of the client
   *
   * @generated from field: string meta_client_version = 24;
   */
  metaClientVersion = "";

  /**
   * Implementation of the client
   *
   * @generated from field: string meta_client_implementation = 25;
   */
  metaClientImplementation = "";

  /**
   * City of the client
   *
   * @generated from field: string meta_client_geo_city = 26;
   */
  metaClientGeoCity = "";

  /**
   * Country of the client
   *
   * @generated from field: string meta_client_geo_country = 27;
   */
  metaClientGeoCountry = "";

  /**
   * Country code of the client
   *
   * @generated from field: string meta_client_geo_country_code = 28;
   */
  metaClientGeoCountryCode = "";

  /**
   * Continent code of the client
   *
   * @generated from field: string meta_client_geo_continent_code = 29;
   */
  metaClientGeoContinentCode = "";

  /**
   * Longitude of the client
   *
   * @generated from field: google.protobuf.DoubleValue meta_client_geo_longitude = 30;
   */
  metaClientGeoLongitude?: number;

  /**
   * Latitude of the client
   *
   * @generated from field: google.protobuf.DoubleValue meta_client_geo_latitude = 31;
   */
  metaClientGeoLatitude?: number;

  /**
   * Autonomous system number of the client
   *
   * @generated from field: google.protobuf.UInt32Value meta_client_geo_autonomous_system_number = 32;
   */
  metaClientGeoAutonomousSystemNumber?: number;

  /**
   * Autonomous system organization of the client
   *
   * @generated from field: google.protobuf.StringValue meta_client_geo_autonomous_system_organization = 33;
   */
  metaClientGeoAutonomousSystemOrganization?: string;

  /**
   * Ethereum consensus client version
   *
   * @generated from field: string meta_consensus_version = 34;
   */
  metaConsensusVersion = "";

  /**
   * Ethereum consensus client implementation
   *
   * @generated from field: string meta_consensus_implementation = 35;
   */
  metaConsensusImplementation = "";

  constructor(data?: PartialMessage<FctBlockBlobFirstSeenByNode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctBlockBlobFirstSeenByNode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "source", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 17, name: "seen_slot_start_diff", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 18, name: "block_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "blob_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 20, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "meta_client_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "meta_client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "meta_client_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "meta_client_geo_city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "meta_client_geo_country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "meta_client_geo_country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 29, name: "meta_client_geo_continent_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "meta_client_geo_longitude", kind: "message", T: DoubleValue },
    { no: 31, name: "meta_client_geo_latitude", kind: "message", T: DoubleValue },
    { no: 32, name: "meta_client_geo_autonomous_system_number", kind: "message", T: UInt32Value },
    { no: 33, name: "meta_client_geo_autonomous_system_organization", kind: "message", T: StringValue },
    { no: 34, name: "meta_consensus_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 35, name: "meta_consensus_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctBlockBlobFirstSeenByNode {
    return new FctBlockBlobFirstSeenByNode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctBlockBlobFirstSeenByNode {
    return new FctBlockBlobFirstSeenByNode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctBlockBlobFirstSeenByNode {
    return new FctBlockBlobFirstSeenByNode().fromJsonString(jsonString, options);
  }

  static equals(a: FctBlockBlobFirstSeenByNode | PlainMessage<FctBlockBlobFirstSeenByNode> | undefined, b: FctBlockBlobFirstSeenByNode | PlainMessage<FctBlockBlobFirstSeenByNode> | undefined): boolean {
    return proto3.util.equals(FctBlockBlobFirstSeenByNode, a, b);
  }
}

/**
 * ListFctBlockBlobFirstSeenByNodeRequest is the request message for listing fct_block_blob_first_seen_by_node records
 *
 * @generated from message cbt.ListFctBlockBlobFirstSeenByNodeRequest
 */
export class ListFctBlockBlobFirstSeenByNodeRequest extends Message<ListFctBlockBlobFirstSeenByNodeRequest> {
  /**
   * Filter by slot_start_date_time (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.StringFilter block_root = 2;
   */
  blockRoot?: StringFilter;

  /**
   * Filter by blob_index (ORDER BY column 3 - optional)
   *
   * @generated from field: cbt.UInt32Filter blob_index = 3;
   */
  blobIndex?: UInt32Filter;

  /**
   * Filter by meta_client_name (ORDER BY column 4 - optional)
   *
   * @generated from field: cbt.StringFilter meta_client_name = 4;
   */
  metaClientName?: StringFilter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 5;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by source (optional)
   *
   * @generated from field: cbt.StringFilter source = 6;
   */
  source?: StringFilter;

  /**
   * Filter by slot (optional)
   *
   * @generated from field: cbt.UInt32Filter slot = 7;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 8;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 9;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by seen_slot_start_diff (optional)
   *
   * @generated from field: cbt.UInt32Filter seen_slot_start_diff = 10;
   */
  seenSlotStartDiff?: UInt32Filter;

  /**
   * Filter by username (optional)
   *
   * @generated from field: cbt.StringFilter username = 11;
   */
  username?: StringFilter;

  /**
   * Filter by node_id (optional)
   *
   * @generated from field: cbt.StringFilter node_id = 12;
   */
  nodeId?: StringFilter;

  /**
   * Filter by classification (optional)
   *
   * @generated from field: cbt.StringFilter classification = 13;
   */
  classification?: StringFilter;

  /**
   * Filter by meta_client_version (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_version = 14;
   */
  metaClientVersion?: StringFilter;

  /**
   * Filter by meta_client_implementation (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_implementation = 15;
   */
  metaClientImplementation?: StringFilter;

  /**
   * Filter by meta_client_geo_city (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_geo_city = 16;
   */
  metaClientGeoCity?: StringFilter;

  /**
   * Filter by meta_client_geo_country (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_geo_country = 17;
   */
  metaClientGeoCountry?: StringFilter;

  /**
   * Filter by meta_client_geo_country_code (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_geo_country_code = 18;
   */
  metaClientGeoCountryCode?: StringFilter;

  /**
   * Filter by meta_client_geo_continent_code (optional)
   *
   * @generated from field: cbt.StringFilter meta_client_geo_continent_code = 19;
   */
  metaClientGeoContinentCode?: StringFilter;

  /**
   * Filter by meta_client_geo_longitude (optional)
   *
   * @generated from field: google.protobuf.DoubleValue meta_client_geo_longitude = 20;
   */
  metaClientGeoLongitude?: number;

  /**
   * Filter by meta_client_geo_latitude (optional)
   *
   * @generated from field: google.protobuf.DoubleValue meta_client_geo_latitude = 21;
   */
  metaClientGeoLatitude?: number;

  /**
   * Filter by meta_client_geo_autonomous_system_number (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter meta_client_geo_autonomous_system_number = 22;
   */
  metaClientGeoAutonomousSystemNumber?: NullableUInt32Filter;

  /**
   * Filter by meta_client_geo_autonomous_system_organization (optional)
   *
   * @generated from field: cbt.NullableStringFilter meta_client_geo_autonomous_system_organization = 23;
   */
  metaClientGeoAutonomousSystemOrganization?: NullableStringFilter;

  /**
   * Filter by meta_consensus_version (optional)
   *
   * @generated from field: cbt.StringFilter meta_consensus_version = 24;
   */
  metaConsensusVersion?: StringFilter;

  /**
   * Filter by meta_consensus_implementation (optional)
   *
   * @generated from field: cbt.StringFilter meta_consensus_implementation = 25;
   */
  metaConsensusImplementation?: StringFilter;

  /**
   * The maximum number of fct_block_blob_first_seen_by_node to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 26;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctBlockBlobFirstSeenByNode` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 27;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 28;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctBlockBlobFirstSeenByNodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockBlobFirstSeenByNodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "block_root", kind: "message", T: StringFilter },
    { no: 3, name: "blob_index", kind: "message", T: UInt32Filter },
    { no: 4, name: "meta_client_name", kind: "message", T: StringFilter },
    { no: 5, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 6, name: "source", kind: "message", T: StringFilter },
    { no: 7, name: "slot", kind: "message", T: UInt32Filter },
    { no: 8, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 9, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 10, name: "seen_slot_start_diff", kind: "message", T: UInt32Filter },
    { no: 11, name: "username", kind: "message", T: StringFilter },
    { no: 12, name: "node_id", kind: "message", T: StringFilter },
    { no: 13, name: "classification", kind: "message", T: StringFilter },
    { no: 14, name: "meta_client_version", kind: "message", T: StringFilter },
    { no: 15, name: "meta_client_implementation", kind: "message", T: StringFilter },
    { no: 16, name: "meta_client_geo_city", kind: "message", T: StringFilter },
    { no: 17, name: "meta_client_geo_country", kind: "message", T: StringFilter },
    { no: 18, name: "meta_client_geo_country_code", kind: "message", T: StringFilter },
    { no: 19, name: "meta_client_geo_continent_code", kind: "message", T: StringFilter },
    { no: 20, name: "meta_client_geo_longitude", kind: "message", T: DoubleValue },
    { no: 21, name: "meta_client_geo_latitude", kind: "message", T: DoubleValue },
    { no: 22, name: "meta_client_geo_autonomous_system_number", kind: "message", T: NullableUInt32Filter },
    { no: 23, name: "meta_client_geo_autonomous_system_organization", kind: "message", T: NullableStringFilter },
    { no: 24, name: "meta_consensus_version", kind: "message", T: StringFilter },
    { no: 25, name: "meta_consensus_implementation", kind: "message", T: StringFilter },
    { no: 26, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 27, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockBlobFirstSeenByNodeRequest {
    return new ListFctBlockBlobFirstSeenByNodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockBlobFirstSeenByNodeRequest {
    return new ListFctBlockBlobFirstSeenByNodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockBlobFirstSeenByNodeRequest {
    return new ListFctBlockBlobFirstSeenByNodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockBlobFirstSeenByNodeRequest | PlainMessage<ListFctBlockBlobFirstSeenByNodeRequest> | undefined, b: ListFctBlockBlobFirstSeenByNodeRequest | PlainMessage<ListFctBlockBlobFirstSeenByNodeRequest> | undefined): boolean {
    return proto3.util.equals(ListFctBlockBlobFirstSeenByNodeRequest, a, b);
  }
}

/**
 * ListFctBlockBlobFirstSeenByNodeResponse is the response message for listing fct_block_blob_first_seen_by_node records
 *
 * @generated from message cbt.ListFctBlockBlobFirstSeenByNodeResponse
 */
export class ListFctBlockBlobFirstSeenByNodeResponse extends Message<ListFctBlockBlobFirstSeenByNodeResponse> {
  /**
   * The list of fct_block_blob_first_seen_by_node.
   *
   * @generated from field: repeated cbt.FctBlockBlobFirstSeenByNode fct_block_blob_first_seen_by_node = 1;
   */
  fctBlockBlobFirstSeenByNode: FctBlockBlobFirstSeenByNode[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctBlockBlobFirstSeenByNodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockBlobFirstSeenByNodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_block_blob_first_seen_by_node", kind: "message", T: FctBlockBlobFirstSeenByNode, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockBlobFirstSeenByNodeResponse {
    return new ListFctBlockBlobFirstSeenByNodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockBlobFirstSeenByNodeResponse {
    return new ListFctBlockBlobFirstSeenByNodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockBlobFirstSeenByNodeResponse {
    return new ListFctBlockBlobFirstSeenByNodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockBlobFirstSeenByNodeResponse | PlainMessage<ListFctBlockBlobFirstSeenByNodeResponse> | undefined, b: ListFctBlockBlobFirstSeenByNodeResponse | PlainMessage<ListFctBlockBlobFirstSeenByNodeResponse> | undefined): boolean {
    return proto3.util.equals(ListFctBlockBlobFirstSeenByNodeResponse, a, b);
  }
}

/**
 * GetFctBlockBlobFirstSeenByNodeRequest is the request message for getting a single fct_block_blob_first_seen_by_node record by primary key
 *
 * @generated from message cbt.GetFctBlockBlobFirstSeenByNodeRequest
 */
export class GetFctBlockBlobFirstSeenByNodeRequest extends Message<GetFctBlockBlobFirstSeenByNodeRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetFctBlockBlobFirstSeenByNodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockBlobFirstSeenByNodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockBlobFirstSeenByNodeRequest {
    return new GetFctBlockBlobFirstSeenByNodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockBlobFirstSeenByNodeRequest {
    return new GetFctBlockBlobFirstSeenByNodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockBlobFirstSeenByNodeRequest {
    return new GetFctBlockBlobFirstSeenByNodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockBlobFirstSeenByNodeRequest | PlainMessage<GetFctBlockBlobFirstSeenByNodeRequest> | undefined, b: GetFctBlockBlobFirstSeenByNodeRequest | PlainMessage<GetFctBlockBlobFirstSeenByNodeRequest> | undefined): boolean {
    return proto3.util.equals(GetFctBlockBlobFirstSeenByNodeRequest, a, b);
  }
}

/**
 * GetFctBlockBlobFirstSeenByNodeResponse is the response message for getting a single fct_block_blob_first_seen_by_node record
 *
 * @generated from message cbt.GetFctBlockBlobFirstSeenByNodeResponse
 */
export class GetFctBlockBlobFirstSeenByNodeResponse extends Message<GetFctBlockBlobFirstSeenByNodeResponse> {
  /**
   * @generated from field: cbt.FctBlockBlobFirstSeenByNode item = 1;
   */
  item?: FctBlockBlobFirstSeenByNode;

  constructor(data?: PartialMessage<GetFctBlockBlobFirstSeenByNodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockBlobFirstSeenByNodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctBlockBlobFirstSeenByNode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockBlobFirstSeenByNodeResponse {
    return new GetFctBlockBlobFirstSeenByNodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockBlobFirstSeenByNodeResponse {
    return new GetFctBlockBlobFirstSeenByNodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockBlobFirstSeenByNodeResponse {
    return new GetFctBlockBlobFirstSeenByNodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockBlobFirstSeenByNodeResponse | PlainMessage<GetFctBlockBlobFirstSeenByNodeResponse> | undefined, b: GetFctBlockBlobFirstSeenByNodeResponse | PlainMessage<GetFctBlockBlobFirstSeenByNodeResponse> | undefined): boolean {
    return proto3.util.equals(GetFctBlockBlobFirstSeenByNodeResponse, a, b);
  }
}

