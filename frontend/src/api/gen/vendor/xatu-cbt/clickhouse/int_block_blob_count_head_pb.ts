// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/int_block_blob_count_head.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.IntBlockBlobCountHead
 */
export class IntBlockBlobCountHead extends Message<IntBlockBlobCountHead> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The beacon block root hash
   *
   * @generated from field: string block_root = 16;
   */
  blockRoot = "";

  /**
   * The number of blobs in the block
   *
   * @generated from field: uint32 blob_count = 17;
   */
  blobCount = 0;

  constructor(data?: PartialMessage<IntBlockBlobCountHead>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.IntBlockBlobCountHead";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "block_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "blob_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntBlockBlobCountHead {
    return new IntBlockBlobCountHead().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntBlockBlobCountHead {
    return new IntBlockBlobCountHead().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntBlockBlobCountHead {
    return new IntBlockBlobCountHead().fromJsonString(jsonString, options);
  }

  static equals(a: IntBlockBlobCountHead | PlainMessage<IntBlockBlobCountHead> | undefined, b: IntBlockBlobCountHead | PlainMessage<IntBlockBlobCountHead> | undefined): boolean {
    return proto3.util.equals(IntBlockBlobCountHead, a, b);
  }
}

/**
 * ListIntBlockBlobCountHeadRequest is the request message for listing int_block_blob_count_head records
 *
 * @generated from message cbt.ListIntBlockBlobCountHeadRequest
 */
export class ListIntBlockBlobCountHeadRequest extends Message<ListIntBlockBlobCountHeadRequest> {
  /**
   * Filter by slot_start_date_time (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.StringFilter block_root = 2;
   */
  blockRoot?: StringFilter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 3;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot (optional)
   *
   * @generated from field: cbt.UInt32Filter slot = 4;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 5;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 6;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by blob_count (optional)
   *
   * @generated from field: cbt.UInt32Filter blob_count = 7;
   */
  blobCount?: UInt32Filter;

  /**
   * The maximum number of int_block_blob_count_head to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 8;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListIntBlockBlobCountHead` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 9;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 10;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListIntBlockBlobCountHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListIntBlockBlobCountHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "block_root", kind: "message", T: StringFilter },
    { no: 3, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 4, name: "slot", kind: "message", T: UInt32Filter },
    { no: 5, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 6, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 7, name: "blob_count", kind: "message", T: UInt32Filter },
    { no: 8, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntBlockBlobCountHeadRequest {
    return new ListIntBlockBlobCountHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntBlockBlobCountHeadRequest {
    return new ListIntBlockBlobCountHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntBlockBlobCountHeadRequest {
    return new ListIntBlockBlobCountHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntBlockBlobCountHeadRequest | PlainMessage<ListIntBlockBlobCountHeadRequest> | undefined, b: ListIntBlockBlobCountHeadRequest | PlainMessage<ListIntBlockBlobCountHeadRequest> | undefined): boolean {
    return proto3.util.equals(ListIntBlockBlobCountHeadRequest, a, b);
  }
}

/**
 * ListIntBlockBlobCountHeadResponse is the response message for listing int_block_blob_count_head records
 *
 * @generated from message cbt.ListIntBlockBlobCountHeadResponse
 */
export class ListIntBlockBlobCountHeadResponse extends Message<ListIntBlockBlobCountHeadResponse> {
  /**
   * The list of int_block_blob_count_head.
   *
   * @generated from field: repeated cbt.IntBlockBlobCountHead int_block_blob_count_head = 1;
   */
  intBlockBlobCountHead: IntBlockBlobCountHead[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListIntBlockBlobCountHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListIntBlockBlobCountHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int_block_blob_count_head", kind: "message", T: IntBlockBlobCountHead, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntBlockBlobCountHeadResponse {
    return new ListIntBlockBlobCountHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntBlockBlobCountHeadResponse {
    return new ListIntBlockBlobCountHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntBlockBlobCountHeadResponse {
    return new ListIntBlockBlobCountHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntBlockBlobCountHeadResponse | PlainMessage<ListIntBlockBlobCountHeadResponse> | undefined, b: ListIntBlockBlobCountHeadResponse | PlainMessage<ListIntBlockBlobCountHeadResponse> | undefined): boolean {
    return proto3.util.equals(ListIntBlockBlobCountHeadResponse, a, b);
  }
}

/**
 * GetIntBlockBlobCountHeadRequest is the request message for getting a single int_block_blob_count_head record by primary key
 *
 * @generated from message cbt.GetIntBlockBlobCountHeadRequest
 */
export class GetIntBlockBlobCountHeadRequest extends Message<GetIntBlockBlobCountHeadRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetIntBlockBlobCountHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetIntBlockBlobCountHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntBlockBlobCountHeadRequest {
    return new GetIntBlockBlobCountHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntBlockBlobCountHeadRequest {
    return new GetIntBlockBlobCountHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntBlockBlobCountHeadRequest {
    return new GetIntBlockBlobCountHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntBlockBlobCountHeadRequest | PlainMessage<GetIntBlockBlobCountHeadRequest> | undefined, b: GetIntBlockBlobCountHeadRequest | PlainMessage<GetIntBlockBlobCountHeadRequest> | undefined): boolean {
    return proto3.util.equals(GetIntBlockBlobCountHeadRequest, a, b);
  }
}

/**
 * GetIntBlockBlobCountHeadResponse is the response message for getting a single int_block_blob_count_head record
 *
 * @generated from message cbt.GetIntBlockBlobCountHeadResponse
 */
export class GetIntBlockBlobCountHeadResponse extends Message<GetIntBlockBlobCountHeadResponse> {
  /**
   * @generated from field: cbt.IntBlockBlobCountHead item = 1;
   */
  item?: IntBlockBlobCountHead;

  constructor(data?: PartialMessage<GetIntBlockBlobCountHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetIntBlockBlobCountHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: IntBlockBlobCountHead },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntBlockBlobCountHeadResponse {
    return new GetIntBlockBlobCountHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntBlockBlobCountHeadResponse {
    return new GetIntBlockBlobCountHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntBlockBlobCountHeadResponse {
    return new GetIntBlockBlobCountHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntBlockBlobCountHeadResponse | PlainMessage<GetIntBlockBlobCountHeadResponse> | undefined, b: GetIntBlockBlobCountHeadResponse | PlainMessage<GetIntBlockBlobCountHeadResponse> | undefined): boolean {
    return proto3.util.equals(GetIntBlockBlobCountHeadResponse, a, b);
  }
}

