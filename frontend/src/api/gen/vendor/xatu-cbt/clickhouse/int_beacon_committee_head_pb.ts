// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/int_beacon_committee_head.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.IntBeaconCommitteeHead
 */
export class IntBeaconCommitteeHead extends Message<IntBeaconCommitteeHead> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The committee index in the beacon API committee payload
   *
   * @generated from field: string committee_index = 16;
   */
  committeeIndex = "";

  /**
   * The validator indices in the beacon API committee payload
   *
   * @generated from field: repeated uint32 validators = 17;
   */
  validators: number[] = [];

  constructor(data?: PartialMessage<IntBeaconCommitteeHead>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.IntBeaconCommitteeHead";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "committee_index", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "validators", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntBeaconCommitteeHead {
    return new IntBeaconCommitteeHead().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntBeaconCommitteeHead {
    return new IntBeaconCommitteeHead().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntBeaconCommitteeHead {
    return new IntBeaconCommitteeHead().fromJsonString(jsonString, options);
  }

  static equals(a: IntBeaconCommitteeHead | PlainMessage<IntBeaconCommitteeHead> | undefined, b: IntBeaconCommitteeHead | PlainMessage<IntBeaconCommitteeHead> | undefined): boolean {
    return proto3.util.equals(IntBeaconCommitteeHead, a, b);
  }
}

/**
 * ListIntBeaconCommitteeHeadRequest is the request message for listing int_beacon_committee_head records
 *
 * @generated from message cbt.ListIntBeaconCommitteeHeadRequest
 */
export class ListIntBeaconCommitteeHeadRequest extends Message<ListIntBeaconCommitteeHeadRequest> {
  /**
   * Filter by slot_start_date_time (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by committee_index (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.StringFilter committee_index = 2;
   */
  committeeIndex?: StringFilter;

  /**
   * Filter by updated_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 3;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot (optional)
   *
   * @generated from field: cbt.UInt32Filter slot = 4;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 5;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 6;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by validators (optional)
   *
   * @generated from field: repeated uint32 validators = 7;
   */
  validators: number[] = [];

  /**
   * The maximum number of int_beacon_committee_head to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 8;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListIntBeaconCommitteeHead` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 9;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 10;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListIntBeaconCommitteeHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListIntBeaconCommitteeHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "committee_index", kind: "message", T: StringFilter },
    { no: 3, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 4, name: "slot", kind: "message", T: UInt32Filter },
    { no: 5, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 6, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 7, name: "validators", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 8, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntBeaconCommitteeHeadRequest {
    return new ListIntBeaconCommitteeHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntBeaconCommitteeHeadRequest {
    return new ListIntBeaconCommitteeHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntBeaconCommitteeHeadRequest {
    return new ListIntBeaconCommitteeHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntBeaconCommitteeHeadRequest | PlainMessage<ListIntBeaconCommitteeHeadRequest> | undefined, b: ListIntBeaconCommitteeHeadRequest | PlainMessage<ListIntBeaconCommitteeHeadRequest> | undefined): boolean {
    return proto3.util.equals(ListIntBeaconCommitteeHeadRequest, a, b);
  }
}

/**
 * ListIntBeaconCommitteeHeadResponse is the response message for listing int_beacon_committee_head records
 *
 * @generated from message cbt.ListIntBeaconCommitteeHeadResponse
 */
export class ListIntBeaconCommitteeHeadResponse extends Message<ListIntBeaconCommitteeHeadResponse> {
  /**
   * The list of int_beacon_committee_head.
   *
   * @generated from field: repeated cbt.IntBeaconCommitteeHead int_beacon_committee_head = 1;
   */
  intBeaconCommitteeHead: IntBeaconCommitteeHead[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListIntBeaconCommitteeHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListIntBeaconCommitteeHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "int_beacon_committee_head", kind: "message", T: IntBeaconCommitteeHead, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListIntBeaconCommitteeHeadResponse {
    return new ListIntBeaconCommitteeHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListIntBeaconCommitteeHeadResponse {
    return new ListIntBeaconCommitteeHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListIntBeaconCommitteeHeadResponse {
    return new ListIntBeaconCommitteeHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListIntBeaconCommitteeHeadResponse | PlainMessage<ListIntBeaconCommitteeHeadResponse> | undefined, b: ListIntBeaconCommitteeHeadResponse | PlainMessage<ListIntBeaconCommitteeHeadResponse> | undefined): boolean {
    return proto3.util.equals(ListIntBeaconCommitteeHeadResponse, a, b);
  }
}

/**
 * GetIntBeaconCommitteeHeadRequest is the request message for getting a single int_beacon_committee_head record by primary key
 *
 * @generated from message cbt.GetIntBeaconCommitteeHeadRequest
 */
export class GetIntBeaconCommitteeHeadRequest extends Message<GetIntBeaconCommitteeHeadRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetIntBeaconCommitteeHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetIntBeaconCommitteeHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntBeaconCommitteeHeadRequest {
    return new GetIntBeaconCommitteeHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntBeaconCommitteeHeadRequest {
    return new GetIntBeaconCommitteeHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntBeaconCommitteeHeadRequest {
    return new GetIntBeaconCommitteeHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntBeaconCommitteeHeadRequest | PlainMessage<GetIntBeaconCommitteeHeadRequest> | undefined, b: GetIntBeaconCommitteeHeadRequest | PlainMessage<GetIntBeaconCommitteeHeadRequest> | undefined): boolean {
    return proto3.util.equals(GetIntBeaconCommitteeHeadRequest, a, b);
  }
}

/**
 * GetIntBeaconCommitteeHeadResponse is the response message for getting a single int_beacon_committee_head record
 *
 * @generated from message cbt.GetIntBeaconCommitteeHeadResponse
 */
export class GetIntBeaconCommitteeHeadResponse extends Message<GetIntBeaconCommitteeHeadResponse> {
  /**
   * @generated from field: cbt.IntBeaconCommitteeHead item = 1;
   */
  item?: IntBeaconCommitteeHead;

  constructor(data?: PartialMessage<GetIntBeaconCommitteeHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetIntBeaconCommitteeHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: IntBeaconCommitteeHead },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIntBeaconCommitteeHeadResponse {
    return new GetIntBeaconCommitteeHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIntBeaconCommitteeHeadResponse {
    return new GetIntBeaconCommitteeHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIntBeaconCommitteeHeadResponse {
    return new GetIntBeaconCommitteeHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIntBeaconCommitteeHeadResponse | PlainMessage<GetIntBeaconCommitteeHeadResponse> | undefined, b: GetIntBeaconCommitteeHeadResponse | PlainMessage<GetIntBeaconCommitteeHeadResponse> | undefined): boolean {
    return proto3.util.equals(GetIntBeaconCommitteeHeadResponse, a, b);
  }
}

