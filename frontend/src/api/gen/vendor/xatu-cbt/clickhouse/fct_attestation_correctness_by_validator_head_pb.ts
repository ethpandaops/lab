// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_attestation_correctness_by_validator_head.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue, UInt32Value } from "@bufbuild/protobuf";
import { NullableStringFilter, NullableUInt32Filter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctAttestationCorrectnessByValidatorHead
 */
export class FctAttestationCorrectnessByValidatorHead extends Message<FctAttestationCorrectnessByValidatorHead> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The index of the validator attesting
   *
   * @generated from field: uint32 attesting_validator_index = 16;
   */
  attestingValidatorIndex = 0;

  /**
   * The beacon block root hash that was attested, null means the attestation was missed
   *
   * @generated from field: google.protobuf.StringValue block_root = 17;
   */
  blockRoot?: string;

  /**
   * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago
   *
   * @generated from field: google.protobuf.UInt32Value slot_distance = 18;
   */
  slotDistance?: number;

  /**
   * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc.
   *
   * @generated from field: google.protobuf.UInt32Value propagation_distance = 19;
   */
  propagationDistance?: number;

  constructor(data?: PartialMessage<FctAttestationCorrectnessByValidatorHead>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctAttestationCorrectnessByValidatorHead";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "attesting_validator_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 17, name: "block_root", kind: "message", T: StringValue },
    { no: 18, name: "slot_distance", kind: "message", T: UInt32Value },
    { no: 19, name: "propagation_distance", kind: "message", T: UInt32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctAttestationCorrectnessByValidatorHead {
    return new FctAttestationCorrectnessByValidatorHead().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctAttestationCorrectnessByValidatorHead {
    return new FctAttestationCorrectnessByValidatorHead().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctAttestationCorrectnessByValidatorHead {
    return new FctAttestationCorrectnessByValidatorHead().fromJsonString(jsonString, options);
  }

  static equals(a: FctAttestationCorrectnessByValidatorHead | PlainMessage<FctAttestationCorrectnessByValidatorHead> | undefined, b: FctAttestationCorrectnessByValidatorHead | PlainMessage<FctAttestationCorrectnessByValidatorHead> | undefined): boolean {
    return proto3.util.equals(FctAttestationCorrectnessByValidatorHead, a, b);
  }
}

/**
 * Request for listing fct_attestation_correctness_by_validator_head records
 *
 * @generated from message cbt.ListFctAttestationCorrectnessByValidatorHeadRequest
 */
export class ListFctAttestationCorrectnessByValidatorHeadRequest extends Message<ListFctAttestationCorrectnessByValidatorHeadRequest> {
  /**
   * Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by attesting_validator_index - The index of the validator attesting (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.UInt32Filter attesting_validator_index = 2;
   */
  attestingValidatorIndex?: UInt32Filter;

  /**
   * Filter by updated_date_time - Timestamp when the record was last updated (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 3;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot - The slot number (optional)
   *
   * @generated from field: cbt.UInt32Filter slot = 4;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch - The epoch number containing the slot (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 5;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 6;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root - The beacon block root hash that was attested, null means the attestation was missed (optional)
   *
   * @generated from field: cbt.NullableStringFilter block_root = 7;
   */
  blockRoot?: NullableStringFilter;

  /**
   * Filter by slot_distance - The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter slot_distance = 8;
   */
  slotDistance?: NullableUInt32Filter;

  /**
   * Filter by propagation_distance - The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter propagation_distance = 9;
   */
  propagationDistance?: NullableUInt32Filter;

  /**
   * The maximum number of fct_attestation_correctness_by_validator_head to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 10;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctAttestationCorrectnessByValidatorHead` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 11;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 12;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctAttestationCorrectnessByValidatorHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAttestationCorrectnessByValidatorHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "attesting_validator_index", kind: "message", T: UInt32Filter },
    { no: 3, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 4, name: "slot", kind: "message", T: UInt32Filter },
    { no: 5, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 6, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 7, name: "block_root", kind: "message", T: NullableStringFilter },
    { no: 8, name: "slot_distance", kind: "message", T: NullableUInt32Filter },
    { no: 9, name: "propagation_distance", kind: "message", T: NullableUInt32Filter },
    { no: 10, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAttestationCorrectnessByValidatorHeadRequest {
    return new ListFctAttestationCorrectnessByValidatorHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAttestationCorrectnessByValidatorHeadRequest {
    return new ListFctAttestationCorrectnessByValidatorHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAttestationCorrectnessByValidatorHeadRequest {
    return new ListFctAttestationCorrectnessByValidatorHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAttestationCorrectnessByValidatorHeadRequest | PlainMessage<ListFctAttestationCorrectnessByValidatorHeadRequest> | undefined, b: ListFctAttestationCorrectnessByValidatorHeadRequest | PlainMessage<ListFctAttestationCorrectnessByValidatorHeadRequest> | undefined): boolean {
    return proto3.util.equals(ListFctAttestationCorrectnessByValidatorHeadRequest, a, b);
  }
}

/**
 * Response for listing fct_attestation_correctness_by_validator_head records
 *
 * @generated from message cbt.ListFctAttestationCorrectnessByValidatorHeadResponse
 */
export class ListFctAttestationCorrectnessByValidatorHeadResponse extends Message<ListFctAttestationCorrectnessByValidatorHeadResponse> {
  /**
   * The list of fct_attestation_correctness_by_validator_head.
   *
   * @generated from field: repeated cbt.FctAttestationCorrectnessByValidatorHead fct_attestation_correctness_by_validator_head = 1;
   */
  fctAttestationCorrectnessByValidatorHead: FctAttestationCorrectnessByValidatorHead[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctAttestationCorrectnessByValidatorHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAttestationCorrectnessByValidatorHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_attestation_correctness_by_validator_head", kind: "message", T: FctAttestationCorrectnessByValidatorHead, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAttestationCorrectnessByValidatorHeadResponse {
    return new ListFctAttestationCorrectnessByValidatorHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAttestationCorrectnessByValidatorHeadResponse {
    return new ListFctAttestationCorrectnessByValidatorHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAttestationCorrectnessByValidatorHeadResponse {
    return new ListFctAttestationCorrectnessByValidatorHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAttestationCorrectnessByValidatorHeadResponse | PlainMessage<ListFctAttestationCorrectnessByValidatorHeadResponse> | undefined, b: ListFctAttestationCorrectnessByValidatorHeadResponse | PlainMessage<ListFctAttestationCorrectnessByValidatorHeadResponse> | undefined): boolean {
    return proto3.util.equals(ListFctAttestationCorrectnessByValidatorHeadResponse, a, b);
  }
}

/**
 * Request for getting a single fct_attestation_correctness_by_validator_head record by primary key
 *
 * @generated from message cbt.GetFctAttestationCorrectnessByValidatorHeadRequest
 */
export class GetFctAttestationCorrectnessByValidatorHeadRequest extends Message<GetFctAttestationCorrectnessByValidatorHeadRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetFctAttestationCorrectnessByValidatorHeadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAttestationCorrectnessByValidatorHeadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAttestationCorrectnessByValidatorHeadRequest {
    return new GetFctAttestationCorrectnessByValidatorHeadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAttestationCorrectnessByValidatorHeadRequest {
    return new GetFctAttestationCorrectnessByValidatorHeadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAttestationCorrectnessByValidatorHeadRequest {
    return new GetFctAttestationCorrectnessByValidatorHeadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAttestationCorrectnessByValidatorHeadRequest | PlainMessage<GetFctAttestationCorrectnessByValidatorHeadRequest> | undefined, b: GetFctAttestationCorrectnessByValidatorHeadRequest | PlainMessage<GetFctAttestationCorrectnessByValidatorHeadRequest> | undefined): boolean {
    return proto3.util.equals(GetFctAttestationCorrectnessByValidatorHeadRequest, a, b);
  }
}

/**
 * Response for getting a single fct_attestation_correctness_by_validator_head record
 *
 * @generated from message cbt.GetFctAttestationCorrectnessByValidatorHeadResponse
 */
export class GetFctAttestationCorrectnessByValidatorHeadResponse extends Message<GetFctAttestationCorrectnessByValidatorHeadResponse> {
  /**
   * @generated from field: cbt.FctAttestationCorrectnessByValidatorHead item = 1;
   */
  item?: FctAttestationCorrectnessByValidatorHead;

  constructor(data?: PartialMessage<GetFctAttestationCorrectnessByValidatorHeadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAttestationCorrectnessByValidatorHeadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctAttestationCorrectnessByValidatorHead },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAttestationCorrectnessByValidatorHeadResponse {
    return new GetFctAttestationCorrectnessByValidatorHeadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAttestationCorrectnessByValidatorHeadResponse {
    return new GetFctAttestationCorrectnessByValidatorHeadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAttestationCorrectnessByValidatorHeadResponse {
    return new GetFctAttestationCorrectnessByValidatorHeadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAttestationCorrectnessByValidatorHeadResponse | PlainMessage<GetFctAttestationCorrectnessByValidatorHeadResponse> | undefined, b: GetFctAttestationCorrectnessByValidatorHeadResponse | PlainMessage<GetFctAttestationCorrectnessByValidatorHeadResponse> | undefined): boolean {
    return proto3.util.equals(GetFctAttestationCorrectnessByValidatorHeadResponse, a, b);
  }
}

