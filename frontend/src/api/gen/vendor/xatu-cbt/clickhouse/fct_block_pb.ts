// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_block.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue, UInt32Value, UInt64Value } from "@bufbuild/protobuf";
import { NullableStringFilter, NullableUInt32Filter, NullableUInt64Filter, StringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctBlock
 */
export class FctBlock extends Message<FctBlock> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The slot number from beacon block payload
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The wall clock time when the reorg slot started
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number from beacon block payload
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The root hash of the beacon block
   *
   * @generated from field: string block_root = 16;
   */
  blockRoot = "";

  /**
   * The version of the beacon block
   *
   * @generated from field: string block_version = 17;
   */
  blockVersion = "";

  /**
   * The total bytes of the beacon block payload
   *
   * @generated from field: google.protobuf.UInt32Value block_total_bytes = 18;
   */
  blockTotalBytes?: number;

  /**
   * The total bytes of the beacon block payload when compressed using snappy
   *
   * @generated from field: google.protobuf.UInt32Value block_total_bytes_compressed = 19;
   */
  blockTotalBytesCompressed?: number;

  /**
   * The root hash of the parent beacon block
   *
   * @generated from field: string parent_root = 20;
   */
  parentRoot = "";

  /**
   * The root hash of the beacon state at this block
   *
   * @generated from field: string state_root = 21;
   */
  stateRoot = "";

  /**
   * The index of the validator that proposed the beacon block
   *
   * @generated from field: uint32 proposer_index = 22;
   */
  proposerIndex = 0;

  /**
   * The block hash of the associated execution block
   *
   * @generated from field: string eth1_data_block_hash = 23;
   */
  eth1DataBlockHash = "";

  /**
   * The root of the deposit tree in the associated execution block
   *
   * @generated from field: string eth1_data_deposit_root = 24;
   */
  eth1DataDepositRoot = "";

  /**
   * The block hash of the execution payload
   *
   * @generated from field: string execution_payload_block_hash = 25;
   */
  executionPayloadBlockHash = "";

  /**
   * The block number of the execution payload
   *
   * @generated from field: uint32 execution_payload_block_number = 26;
   */
  executionPayloadBlockNumber = 0;

  /**
   * The recipient of the fee for this execution payload
   *
   * @generated from field: string execution_payload_fee_recipient = 27;
   */
  executionPayloadFeeRecipient = "";

  /**
   * Base fee per gas for execution payload
   *
   * @generated from field: google.protobuf.StringValue execution_payload_base_fee_per_gas = 28;
   */
  executionPayloadBaseFeePerGas?: string;

  /**
   * Gas used for blobs in execution payload
   *
   * @generated from field: google.protobuf.UInt64Value execution_payload_blob_gas_used = 29;
   */
  executionPayloadBlobGasUsed?: bigint;

  /**
   * Excess gas used for blobs in execution payload
   *
   * @generated from field: google.protobuf.UInt64Value execution_payload_excess_blob_gas = 30;
   */
  executionPayloadExcessBlobGas?: bigint;

  /**
   * Gas limit for execution payload
   *
   * @generated from field: google.protobuf.UInt64Value execution_payload_gas_limit = 31;
   */
  executionPayloadGasLimit?: bigint;

  /**
   * Gas used for execution payload
   *
   * @generated from field: google.protobuf.UInt64Value execution_payload_gas_used = 32;
   */
  executionPayloadGasUsed?: bigint;

  /**
   * The state root of the execution payload
   *
   * @generated from field: string execution_payload_state_root = 33;
   */
  executionPayloadStateRoot = "";

  /**
   * The parent hash of the execution payload
   *
   * @generated from field: string execution_payload_parent_hash = 34;
   */
  executionPayloadParentHash = "";

  /**
   * The transaction count of the execution payload
   *
   * @generated from field: google.protobuf.UInt32Value execution_payload_transactions_count = 35;
   */
  executionPayloadTransactionsCount?: number;

  /**
   * The transaction total bytes of the execution payload
   *
   * @generated from field: google.protobuf.UInt32Value execution_payload_transactions_total_bytes = 36;
   */
  executionPayloadTransactionsTotalBytes?: number;

  /**
   * The transaction total bytes of the execution payload when compressed using snappy
   *
   * @generated from field: google.protobuf.UInt32Value execution_payload_transactions_total_bytes_compressed = 37;
   */
  executionPayloadTransactionsTotalBytesCompressed?: number;

  /**
   * Can be "canonical" or "orphaned"
   *
   * @generated from field: string status = 38;
   */
  status = "";

  constructor(data?: PartialMessage<FctBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "block_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "block_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "block_total_bytes", kind: "message", T: UInt32Value },
    { no: 19, name: "block_total_bytes_compressed", kind: "message", T: UInt32Value },
    { no: 20, name: "parent_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "state_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "proposer_index", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 23, name: "eth1_data_block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "eth1_data_deposit_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 25, name: "execution_payload_block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "execution_payload_block_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 27, name: "execution_payload_fee_recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "execution_payload_base_fee_per_gas", kind: "message", T: StringValue },
    { no: 29, name: "execution_payload_blob_gas_used", kind: "message", T: UInt64Value },
    { no: 30, name: "execution_payload_excess_blob_gas", kind: "message", T: UInt64Value },
    { no: 31, name: "execution_payload_gas_limit", kind: "message", T: UInt64Value },
    { no: 32, name: "execution_payload_gas_used", kind: "message", T: UInt64Value },
    { no: 33, name: "execution_payload_state_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 34, name: "execution_payload_parent_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 35, name: "execution_payload_transactions_count", kind: "message", T: UInt32Value },
    { no: 36, name: "execution_payload_transactions_total_bytes", kind: "message", T: UInt32Value },
    { no: 37, name: "execution_payload_transactions_total_bytes_compressed", kind: "message", T: UInt32Value },
    { no: 38, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctBlock {
    return new FctBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctBlock {
    return new FctBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctBlock {
    return new FctBlock().fromJsonString(jsonString, options);
  }

  static equals(a: FctBlock | PlainMessage<FctBlock> | undefined, b: FctBlock | PlainMessage<FctBlock> | undefined): boolean {
    return proto3.util.equals(FctBlock, a, b);
  }
}

/**
 * Request for listing fct_block records
 *
 * @generated from message cbt.ListFctBlockRequest
 */
export class ListFctBlockRequest extends Message<ListFctBlockRequest> {
  /**
   * Filter by slot_start_date_time - The wall clock time when the reorg slot started (PRIMARY KEY - required unless using alternatives: block_root, slot)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by block_root - The root hash of the beacon block (ORDER BY column 2 - optional)
   *
   * @generated from field: cbt.StringFilter block_root = 2;
   */
  blockRoot?: StringFilter;

  /**
   * Filter by updated_date_time - Timestamp when the record was last updated (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 3;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot - The slot number from beacon block payload (PROJECTION: p_by_slot - alternative to slot_start_date_time)
   *
   * @generated from field: cbt.UInt32Filter slot = 4;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch - The epoch number from beacon block payload (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 5;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 6;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by block_version - The version of the beacon block (optional)
   *
   * @generated from field: cbt.StringFilter block_version = 7;
   */
  blockVersion?: StringFilter;

  /**
   * Filter by block_total_bytes - The total bytes of the beacon block payload (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter block_total_bytes = 8;
   */
  blockTotalBytes?: NullableUInt32Filter;

  /**
   * Filter by block_total_bytes_compressed - The total bytes of the beacon block payload when compressed using snappy (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter block_total_bytes_compressed = 9;
   */
  blockTotalBytesCompressed?: NullableUInt32Filter;

  /**
   * Filter by parent_root - The root hash of the parent beacon block (optional)
   *
   * @generated from field: cbt.StringFilter parent_root = 10;
   */
  parentRoot?: StringFilter;

  /**
   * Filter by state_root - The root hash of the beacon state at this block (optional)
   *
   * @generated from field: cbt.StringFilter state_root = 11;
   */
  stateRoot?: StringFilter;

  /**
   * Filter by proposer_index - The index of the validator that proposed the beacon block (optional)
   *
   * @generated from field: cbt.UInt32Filter proposer_index = 12;
   */
  proposerIndex?: UInt32Filter;

  /**
   * Filter by eth1_data_block_hash - The block hash of the associated execution block (optional)
   *
   * @generated from field: cbt.StringFilter eth1_data_block_hash = 13;
   */
  eth1DataBlockHash?: StringFilter;

  /**
   * Filter by eth1_data_deposit_root - The root of the deposit tree in the associated execution block (optional)
   *
   * @generated from field: cbt.StringFilter eth1_data_deposit_root = 14;
   */
  eth1DataDepositRoot?: StringFilter;

  /**
   * Filter by execution_payload_block_hash - The block hash of the execution payload (optional)
   *
   * @generated from field: cbt.StringFilter execution_payload_block_hash = 15;
   */
  executionPayloadBlockHash?: StringFilter;

  /**
   * Filter by execution_payload_block_number - The block number of the execution payload (optional)
   *
   * @generated from field: cbt.UInt32Filter execution_payload_block_number = 16;
   */
  executionPayloadBlockNumber?: UInt32Filter;

  /**
   * Filter by execution_payload_fee_recipient - The recipient of the fee for this execution payload (optional)
   *
   * @generated from field: cbt.StringFilter execution_payload_fee_recipient = 17;
   */
  executionPayloadFeeRecipient?: StringFilter;

  /**
   * Filter by execution_payload_base_fee_per_gas - Base fee per gas for execution payload (optional)
   *
   * @generated from field: cbt.NullableStringFilter execution_payload_base_fee_per_gas = 18;
   */
  executionPayloadBaseFeePerGas?: NullableStringFilter;

  /**
   * Filter by execution_payload_blob_gas_used - Gas used for blobs in execution payload (optional)
   *
   * @generated from field: cbt.NullableUInt64Filter execution_payload_blob_gas_used = 19;
   */
  executionPayloadBlobGasUsed?: NullableUInt64Filter;

  /**
   * Filter by execution_payload_excess_blob_gas - Excess gas used for blobs in execution payload (optional)
   *
   * @generated from field: cbt.NullableUInt64Filter execution_payload_excess_blob_gas = 20;
   */
  executionPayloadExcessBlobGas?: NullableUInt64Filter;

  /**
   * Filter by execution_payload_gas_limit - Gas limit for execution payload (optional)
   *
   * @generated from field: cbt.NullableUInt64Filter execution_payload_gas_limit = 21;
   */
  executionPayloadGasLimit?: NullableUInt64Filter;

  /**
   * Filter by execution_payload_gas_used - Gas used for execution payload (optional)
   *
   * @generated from field: cbt.NullableUInt64Filter execution_payload_gas_used = 22;
   */
  executionPayloadGasUsed?: NullableUInt64Filter;

  /**
   * Filter by execution_payload_state_root - The state root of the execution payload (optional)
   *
   * @generated from field: cbt.StringFilter execution_payload_state_root = 23;
   */
  executionPayloadStateRoot?: StringFilter;

  /**
   * Filter by execution_payload_parent_hash - The parent hash of the execution payload (optional)
   *
   * @generated from field: cbt.StringFilter execution_payload_parent_hash = 24;
   */
  executionPayloadParentHash?: StringFilter;

  /**
   * Filter by execution_payload_transactions_count - The transaction count of the execution payload (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter execution_payload_transactions_count = 25;
   */
  executionPayloadTransactionsCount?: NullableUInt32Filter;

  /**
   * Filter by execution_payload_transactions_total_bytes - The transaction total bytes of the execution payload (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter execution_payload_transactions_total_bytes = 26;
   */
  executionPayloadTransactionsTotalBytes?: NullableUInt32Filter;

  /**
   * Filter by execution_payload_transactions_total_bytes_compressed - The transaction total bytes of the execution payload when compressed using snappy (optional)
   *
   * @generated from field: cbt.NullableUInt32Filter execution_payload_transactions_total_bytes_compressed = 27;
   */
  executionPayloadTransactionsTotalBytesCompressed?: NullableUInt32Filter;

  /**
   * Filter by status - Can be "canonical" or "orphaned" (optional)
   *
   * @generated from field: cbt.StringFilter status = 28;
   */
  status?: StringFilter;

  /**
   * The maximum number of fct_block to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 29;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctBlock` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 30;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 31;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctBlockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "block_root", kind: "message", T: StringFilter },
    { no: 3, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 4, name: "slot", kind: "message", T: UInt32Filter },
    { no: 5, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 6, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 7, name: "block_version", kind: "message", T: StringFilter },
    { no: 8, name: "block_total_bytes", kind: "message", T: NullableUInt32Filter },
    { no: 9, name: "block_total_bytes_compressed", kind: "message", T: NullableUInt32Filter },
    { no: 10, name: "parent_root", kind: "message", T: StringFilter },
    { no: 11, name: "state_root", kind: "message", T: StringFilter },
    { no: 12, name: "proposer_index", kind: "message", T: UInt32Filter },
    { no: 13, name: "eth1_data_block_hash", kind: "message", T: StringFilter },
    { no: 14, name: "eth1_data_deposit_root", kind: "message", T: StringFilter },
    { no: 15, name: "execution_payload_block_hash", kind: "message", T: StringFilter },
    { no: 16, name: "execution_payload_block_number", kind: "message", T: UInt32Filter },
    { no: 17, name: "execution_payload_fee_recipient", kind: "message", T: StringFilter },
    { no: 18, name: "execution_payload_base_fee_per_gas", kind: "message", T: NullableStringFilter },
    { no: 19, name: "execution_payload_blob_gas_used", kind: "message", T: NullableUInt64Filter },
    { no: 20, name: "execution_payload_excess_blob_gas", kind: "message", T: NullableUInt64Filter },
    { no: 21, name: "execution_payload_gas_limit", kind: "message", T: NullableUInt64Filter },
    { no: 22, name: "execution_payload_gas_used", kind: "message", T: NullableUInt64Filter },
    { no: 23, name: "execution_payload_state_root", kind: "message", T: StringFilter },
    { no: 24, name: "execution_payload_parent_hash", kind: "message", T: StringFilter },
    { no: 25, name: "execution_payload_transactions_count", kind: "message", T: NullableUInt32Filter },
    { no: 26, name: "execution_payload_transactions_total_bytes", kind: "message", T: NullableUInt32Filter },
    { no: 27, name: "execution_payload_transactions_total_bytes_compressed", kind: "message", T: NullableUInt32Filter },
    { no: 28, name: "status", kind: "message", T: StringFilter },
    { no: 29, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 30, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockRequest {
    return new ListFctBlockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockRequest {
    return new ListFctBlockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockRequest {
    return new ListFctBlockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockRequest | PlainMessage<ListFctBlockRequest> | undefined, b: ListFctBlockRequest | PlainMessage<ListFctBlockRequest> | undefined): boolean {
    return proto3.util.equals(ListFctBlockRequest, a, b);
  }
}

/**
 * Response for listing fct_block records
 *
 * @generated from message cbt.ListFctBlockResponse
 */
export class ListFctBlockResponse extends Message<ListFctBlockResponse> {
  /**
   * The list of fct_block.
   *
   * @generated from field: repeated cbt.FctBlock fct_block = 1;
   */
  fctBlock: FctBlock[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctBlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_block", kind: "message", T: FctBlock, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockResponse {
    return new ListFctBlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockResponse {
    return new ListFctBlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockResponse {
    return new ListFctBlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockResponse | PlainMessage<ListFctBlockResponse> | undefined, b: ListFctBlockResponse | PlainMessage<ListFctBlockResponse> | undefined): boolean {
    return proto3.util.equals(ListFctBlockResponse, a, b);
  }
}

/**
 * Request for getting a single fct_block record by primary key
 *
 * @generated from message cbt.GetFctBlockRequest
 */
export class GetFctBlockRequest extends Message<GetFctBlockRequest> {
  /**
   * The wall clock time when the reorg slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetFctBlockRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockRequest {
    return new GetFctBlockRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockRequest {
    return new GetFctBlockRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockRequest {
    return new GetFctBlockRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockRequest | PlainMessage<GetFctBlockRequest> | undefined, b: GetFctBlockRequest | PlainMessage<GetFctBlockRequest> | undefined): boolean {
    return proto3.util.equals(GetFctBlockRequest, a, b);
  }
}

/**
 * Response for getting a single fct_block record
 *
 * @generated from message cbt.GetFctBlockResponse
 */
export class GetFctBlockResponse extends Message<GetFctBlockResponse> {
  /**
   * @generated from field: cbt.FctBlock item = 1;
   */
  item?: FctBlock;

  constructor(data?: PartialMessage<GetFctBlockResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctBlock },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockResponse {
    return new GetFctBlockResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockResponse {
    return new GetFctBlockResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockResponse {
    return new GetFctBlockResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockResponse | PlainMessage<GetFctBlockResponse> | undefined, b: GetFctBlockResponse | PlainMessage<GetFctBlockResponse> | undefined): boolean {
    return proto3.util.equals(GetFctBlockResponse, a, b);
  }
}

