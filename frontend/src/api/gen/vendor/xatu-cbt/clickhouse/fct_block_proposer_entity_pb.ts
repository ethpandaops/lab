// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_block_proposer_entity.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { NullableStringFilter, UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctBlockProposerEntity
 */
export class FctBlockProposerEntity extends Message<FctBlockProposerEntity> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * The slot number
   *
   * @generated from field: uint32 slot = 12;
   */
  slot = 0;

  /**
   * The wall clock time when the slot started
   *
   * @generated from field: uint32 slot_start_date_time = 13;
   */
  slotStartDateTime = 0;

  /**
   * The epoch number containing the slot
   *
   * @generated from field: uint32 epoch = 14;
   */
  epoch = 0;

  /**
   * The wall clock time when the epoch started
   *
   * @generated from field: uint32 epoch_start_date_time = 15;
   */
  epochStartDateTime = 0;

  /**
   * The entity that proposed the block
   *
   * @generated from field: google.protobuf.StringValue entity = 16;
   */
  entity?: string;

  constructor(data?: PartialMessage<FctBlockProposerEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctBlockProposerEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "slot", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "epoch", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "epoch_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 16, name: "entity", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctBlockProposerEntity {
    return new FctBlockProposerEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctBlockProposerEntity {
    return new FctBlockProposerEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctBlockProposerEntity {
    return new FctBlockProposerEntity().fromJsonString(jsonString, options);
  }

  static equals(a: FctBlockProposerEntity | PlainMessage<FctBlockProposerEntity> | undefined, b: FctBlockProposerEntity | PlainMessage<FctBlockProposerEntity> | undefined): boolean {
    return proto3.util.equals(FctBlockProposerEntity, a, b);
  }
}

/**
 * Request for listing fct_block_proposer_entity records
 *
 * @generated from message cbt.ListFctBlockProposerEntityRequest
 */
export class ListFctBlockProposerEntityRequest extends Message<ListFctBlockProposerEntityRequest> {
  /**
   * Filter by slot_start_date_time - The wall clock time when the slot started (PRIMARY KEY - required unless using alternatives: slot)
   *
   * @generated from field: cbt.UInt32Filter slot_start_date_time = 1;
   */
  slotStartDateTime?: UInt32Filter;

  /**
   * Filter by updated_date_time - Timestamp when the record was last updated (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 2;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by slot - The slot number (PROJECTION: p_by_slot - alternative to slot_start_date_time)
   *
   * @generated from field: cbt.UInt32Filter slot = 3;
   */
  slot?: UInt32Filter;

  /**
   * Filter by epoch - The epoch number containing the slot (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch = 4;
   */
  epoch?: UInt32Filter;

  /**
   * Filter by epoch_start_date_time - The wall clock time when the epoch started (optional)
   *
   * @generated from field: cbt.UInt32Filter epoch_start_date_time = 5;
   */
  epochStartDateTime?: UInt32Filter;

  /**
   * Filter by entity - The entity that proposed the block (optional)
   *
   * @generated from field: cbt.NullableStringFilter entity = 6;
   */
  entity?: NullableStringFilter;

  /**
   * The maximum number of fct_block_proposer_entity to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 7;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctBlockProposerEntity` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 8;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 9;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctBlockProposerEntityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockProposerEntityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "message", T: UInt32Filter },
    { no: 2, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 3, name: "slot", kind: "message", T: UInt32Filter },
    { no: 4, name: "epoch", kind: "message", T: UInt32Filter },
    { no: 5, name: "epoch_start_date_time", kind: "message", T: UInt32Filter },
    { no: 6, name: "entity", kind: "message", T: NullableStringFilter },
    { no: 7, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockProposerEntityRequest {
    return new ListFctBlockProposerEntityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockProposerEntityRequest {
    return new ListFctBlockProposerEntityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockProposerEntityRequest {
    return new ListFctBlockProposerEntityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockProposerEntityRequest | PlainMessage<ListFctBlockProposerEntityRequest> | undefined, b: ListFctBlockProposerEntityRequest | PlainMessage<ListFctBlockProposerEntityRequest> | undefined): boolean {
    return proto3.util.equals(ListFctBlockProposerEntityRequest, a, b);
  }
}

/**
 * Response for listing fct_block_proposer_entity records
 *
 * @generated from message cbt.ListFctBlockProposerEntityResponse
 */
export class ListFctBlockProposerEntityResponse extends Message<ListFctBlockProposerEntityResponse> {
  /**
   * The list of fct_block_proposer_entity.
   *
   * @generated from field: repeated cbt.FctBlockProposerEntity fct_block_proposer_entity = 1;
   */
  fctBlockProposerEntity: FctBlockProposerEntity[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctBlockProposerEntityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctBlockProposerEntityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_block_proposer_entity", kind: "message", T: FctBlockProposerEntity, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctBlockProposerEntityResponse {
    return new ListFctBlockProposerEntityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctBlockProposerEntityResponse {
    return new ListFctBlockProposerEntityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctBlockProposerEntityResponse {
    return new ListFctBlockProposerEntityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctBlockProposerEntityResponse | PlainMessage<ListFctBlockProposerEntityResponse> | undefined, b: ListFctBlockProposerEntityResponse | PlainMessage<ListFctBlockProposerEntityResponse> | undefined): boolean {
    return proto3.util.equals(ListFctBlockProposerEntityResponse, a, b);
  }
}

/**
 * Request for getting a single fct_block_proposer_entity record by primary key
 *
 * @generated from message cbt.GetFctBlockProposerEntityRequest
 */
export class GetFctBlockProposerEntityRequest extends Message<GetFctBlockProposerEntityRequest> {
  /**
   * The wall clock time when the slot started
   *
   * Primary key (required)
   *
   * @generated from field: uint32 slot_start_date_time = 1;
   */
  slotStartDateTime = 0;

  constructor(data?: PartialMessage<GetFctBlockProposerEntityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockProposerEntityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_start_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockProposerEntityRequest {
    return new GetFctBlockProposerEntityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockProposerEntityRequest {
    return new GetFctBlockProposerEntityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockProposerEntityRequest {
    return new GetFctBlockProposerEntityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockProposerEntityRequest | PlainMessage<GetFctBlockProposerEntityRequest> | undefined, b: GetFctBlockProposerEntityRequest | PlainMessage<GetFctBlockProposerEntityRequest> | undefined): boolean {
    return proto3.util.equals(GetFctBlockProposerEntityRequest, a, b);
  }
}

/**
 * Response for getting a single fct_block_proposer_entity record
 *
 * @generated from message cbt.GetFctBlockProposerEntityResponse
 */
export class GetFctBlockProposerEntityResponse extends Message<GetFctBlockProposerEntityResponse> {
  /**
   * @generated from field: cbt.FctBlockProposerEntity item = 1;
   */
  item?: FctBlockProposerEntity;

  constructor(data?: PartialMessage<GetFctBlockProposerEntityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctBlockProposerEntityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctBlockProposerEntity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctBlockProposerEntityResponse {
    return new GetFctBlockProposerEntityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctBlockProposerEntityResponse {
    return new GetFctBlockProposerEntityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctBlockProposerEntityResponse {
    return new GetFctBlockProposerEntityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctBlockProposerEntityResponse | PlainMessage<GetFctBlockProposerEntityResponse> | undefined, b: GetFctBlockProposerEntityResponse | PlainMessage<GetFctBlockProposerEntityResponse> | undefined): boolean {
    return proto3.util.equals(GetFctBlockProposerEntityResponse, a, b);
  }
}

