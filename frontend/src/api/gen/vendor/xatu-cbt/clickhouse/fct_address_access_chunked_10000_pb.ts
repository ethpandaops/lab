// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file vendor/xatu-cbt/clickhouse/fct_address_access_chunked_10000.proto (package cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { UInt32Filter } from "./common_pb.js";

/**
 * @generated from message cbt.FctAddressAccessChunked10000
 */
export class FctAddressAccessChunked10000 extends Message<FctAddressAccessChunked10000> {
  /**
   * Timestamp when the record was last updated
   *
   * @generated from field: uint32 updated_date_time = 11;
   */
  updatedDateTime = 0;

  /**
   * Start block number of the chunk
   *
   * @generated from field: uint32 chunk_start_block_number = 12;
   */
  chunkStartBlockNumber = 0;

  /**
   * Number of accounts first accessed in the chunk
   *
   * @generated from field: uint32 first_accessed_accounts = 13;
   */
  firstAccessedAccounts = 0;

  /**
   * Number of accounts last accessed in the chunk
   *
   * @generated from field: uint32 last_accessed_accounts = 14;
   */
  lastAccessedAccounts = 0;

  constructor(data?: PartialMessage<FctAddressAccessChunked10000>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.FctAddressAccessChunked10000";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "updated_date_time", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 12, name: "chunk_start_block_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 13, name: "first_accessed_accounts", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "last_accessed_accounts", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FctAddressAccessChunked10000 {
    return new FctAddressAccessChunked10000().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FctAddressAccessChunked10000 {
    return new FctAddressAccessChunked10000().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FctAddressAccessChunked10000 {
    return new FctAddressAccessChunked10000().fromJsonString(jsonString, options);
  }

  static equals(a: FctAddressAccessChunked10000 | PlainMessage<FctAddressAccessChunked10000> | undefined, b: FctAddressAccessChunked10000 | PlainMessage<FctAddressAccessChunked10000> | undefined): boolean {
    return proto3.util.equals(FctAddressAccessChunked10000, a, b);
  }
}

/**
 * Request for listing fct_address_access_chunked_10000 records
 *
 * @generated from message cbt.ListFctAddressAccessChunked10000Request
 */
export class ListFctAddressAccessChunked10000Request extends Message<ListFctAddressAccessChunked10000Request> {
  /**
   * Filter by chunk_start_block_number - Start block number of the chunk (PRIMARY KEY - required)
   *
   * @generated from field: cbt.UInt32Filter chunk_start_block_number = 1;
   */
  chunkStartBlockNumber?: UInt32Filter;

  /**
   * Filter by updated_date_time - Timestamp when the record was last updated (optional)
   *
   * @generated from field: cbt.UInt32Filter updated_date_time = 2;
   */
  updatedDateTime?: UInt32Filter;

  /**
   * Filter by first_accessed_accounts - Number of accounts first accessed in the chunk (optional)
   *
   * @generated from field: cbt.UInt32Filter first_accessed_accounts = 3;
   */
  firstAccessedAccounts?: UInt32Filter;

  /**
   * Filter by last_accessed_accounts - Number of accounts last accessed in the chunk (optional)
   *
   * @generated from field: cbt.UInt32Filter last_accessed_accounts = 4;
   */
  lastAccessedAccounts?: UInt32Filter;

  /**
   * The maximum number of fct_address_access_chunked_10000 to return.
   * If unspecified, at most 100 items will be returned.
   * The maximum value is 10000; values above 10000 will be coerced to 10000.
   *
   * @generated from field: int32 page_size = 5;
   */
  pageSize = 0;

  /**
   * A page token, received from a previous `ListFctAddressAccessChunked10000` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 6;
   */
  pageToken = "";

  /**
   * The order of results. Format: comma-separated list of fields.
   * Example: "foo,bar" or "foo desc,bar" for descending order on foo.
   * If unspecified, results will be returned in the default order.
   *
   * @generated from field: string order_by = 7;
   */
  orderBy = "";

  constructor(data?: PartialMessage<ListFctAddressAccessChunked10000Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAddressAccessChunked10000Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chunk_start_block_number", kind: "message", T: UInt32Filter },
    { no: 2, name: "updated_date_time", kind: "message", T: UInt32Filter },
    { no: 3, name: "first_accessed_accounts", kind: "message", T: UInt32Filter },
    { no: 4, name: "last_accessed_accounts", kind: "message", T: UInt32Filter },
    { no: 5, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "order_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAddressAccessChunked10000Request {
    return new ListFctAddressAccessChunked10000Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAddressAccessChunked10000Request {
    return new ListFctAddressAccessChunked10000Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAddressAccessChunked10000Request {
    return new ListFctAddressAccessChunked10000Request().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAddressAccessChunked10000Request | PlainMessage<ListFctAddressAccessChunked10000Request> | undefined, b: ListFctAddressAccessChunked10000Request | PlainMessage<ListFctAddressAccessChunked10000Request> | undefined): boolean {
    return proto3.util.equals(ListFctAddressAccessChunked10000Request, a, b);
  }
}

/**
 * Response for listing fct_address_access_chunked_10000 records
 *
 * @generated from message cbt.ListFctAddressAccessChunked10000Response
 */
export class ListFctAddressAccessChunked10000Response extends Message<ListFctAddressAccessChunked10000Response> {
  /**
   * The list of fct_address_access_chunked_10000.
   *
   * @generated from field: repeated cbt.FctAddressAccessChunked10000 fct_address_access_chunked_10000 = 1;
   */
  fctAddressAccessChunked10000: FctAddressAccessChunked10000[] = [];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListFctAddressAccessChunked10000Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.ListFctAddressAccessChunked10000Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fct_address_access_chunked_10000", kind: "message", T: FctAddressAccessChunked10000, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFctAddressAccessChunked10000Response {
    return new ListFctAddressAccessChunked10000Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFctAddressAccessChunked10000Response {
    return new ListFctAddressAccessChunked10000Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFctAddressAccessChunked10000Response {
    return new ListFctAddressAccessChunked10000Response().fromJsonString(jsonString, options);
  }

  static equals(a: ListFctAddressAccessChunked10000Response | PlainMessage<ListFctAddressAccessChunked10000Response> | undefined, b: ListFctAddressAccessChunked10000Response | PlainMessage<ListFctAddressAccessChunked10000Response> | undefined): boolean {
    return proto3.util.equals(ListFctAddressAccessChunked10000Response, a, b);
  }
}

/**
 * Request for getting a single fct_address_access_chunked_10000 record by primary key
 *
 * @generated from message cbt.GetFctAddressAccessChunked10000Request
 */
export class GetFctAddressAccessChunked10000Request extends Message<GetFctAddressAccessChunked10000Request> {
  /**
   * Start block number of the chunk
   *
   * Primary key (required)
   *
   * @generated from field: uint32 chunk_start_block_number = 1;
   */
  chunkStartBlockNumber = 0;

  constructor(data?: PartialMessage<GetFctAddressAccessChunked10000Request>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAddressAccessChunked10000Request";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chunk_start_block_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAddressAccessChunked10000Request {
    return new GetFctAddressAccessChunked10000Request().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAddressAccessChunked10000Request {
    return new GetFctAddressAccessChunked10000Request().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAddressAccessChunked10000Request {
    return new GetFctAddressAccessChunked10000Request().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAddressAccessChunked10000Request | PlainMessage<GetFctAddressAccessChunked10000Request> | undefined, b: GetFctAddressAccessChunked10000Request | PlainMessage<GetFctAddressAccessChunked10000Request> | undefined): boolean {
    return proto3.util.equals(GetFctAddressAccessChunked10000Request, a, b);
  }
}

/**
 * Response for getting a single fct_address_access_chunked_10000 record
 *
 * @generated from message cbt.GetFctAddressAccessChunked10000Response
 */
export class GetFctAddressAccessChunked10000Response extends Message<GetFctAddressAccessChunked10000Response> {
  /**
   * @generated from field: cbt.FctAddressAccessChunked10000 item = 1;
   */
  item?: FctAddressAccessChunked10000;

  constructor(data?: PartialMessage<GetFctAddressAccessChunked10000Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cbt.GetFctAddressAccessChunked10000Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item", kind: "message", T: FctAddressAccessChunked10000 },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFctAddressAccessChunked10000Response {
    return new GetFctAddressAccessChunked10000Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFctAddressAccessChunked10000Response {
    return new GetFctAddressAccessChunked10000Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFctAddressAccessChunked10000Response {
    return new GetFctAddressAccessChunked10000Response().fromJsonString(jsonString, options);
  }

  static equals(a: GetFctAddressAccessChunked10000Response | PlainMessage<GetFctAddressAccessChunked10000Response> | undefined, b: GetFctAddressAccessChunked10000Response | PlainMessage<GetFctAddressAccessChunked10000Response> | undefined): boolean {
    return proto3.util.equals(GetFctAddressAccessChunked10000Response, a, b);
  }
}

