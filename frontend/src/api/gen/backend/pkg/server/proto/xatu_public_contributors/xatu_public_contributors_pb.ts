// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file backend/pkg/server/proto/xatu_public_contributors/xatu_public_contributors.proto (package xatu_public_contributors, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * Time window configuration (mirrors Python config structure)
 *
 * @generated from message xatu_public_contributors.TimeWindow
 */
export class TimeWindow extends Message<TimeWindow> {
  /**
   * e.g., "1h", "24h"
   *
   * @generated from field: string file = 1;
   */
  file = "";

  /**
   * e.g., "5m", "1h" - duration string
   *
   * @generated from field: string step = 2;
   */
  step = "";

  /**
   * e.g., "-1h", "-24h" - duration string
   *
   * @generated from field: string range = 3;
   */
  range = "";

  /**
   * e.g., "Last Hour", "Last 24 Hours"
   *
   * @generated from field: string label = 4;
   */
  label = "";

  constructor(data?: PartialMessage<TimeWindow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.TimeWindow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "step", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeWindow {
    return new TimeWindow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeWindow {
    return new TimeWindow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeWindow {
    return new TimeWindow().fromJsonString(jsonString, options);
  }

  static equals(a: TimeWindow | PlainMessage<TimeWindow> | undefined, b: TimeWindow | PlainMessage<TimeWindow> | undefined): boolean {
    return proto3.util.equals(TimeWindow, a, b);
  }
}

/**
 * Configuration for the xatu_public_contributors service
 *
 * @generated from message xatu_public_contributors.Config
 */
export class Config extends Message<Config> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * @generated from field: string redis_key_prefix = 2;
   */
  redisKeyPrefix = "";

  /**
   * @generated from field: repeated string networks = 3;
   */
  networks: string[] = [];

  /**
   * @generated from field: int64 backfill_hours = 4;
   */
  backfillHours = protoInt64.zero;

  /**
   * Added time windows
   *
   * @generated from field: repeated xatu_public_contributors.TimeWindow time_windows = 5;
   */
  timeWindows: TimeWindow[] = [];

  /**
   * Added overall processing interval duration string e.g. "15m"
   *
   * @generated from field: string interval = 6;
   */
  interval = "";

  constructor(data?: PartialMessage<Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "redis_key_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "networks", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "backfill_hours", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "time_windows", kind: "message", T: TimeWindow, repeated: true },
    { no: 6, name: "interval", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Config {
    return new Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Config {
    return new Config().fromJsonString(jsonString, options);
  }

  static equals(a: Config | PlainMessage<Config> | undefined, b: Config | PlainMessage<Config> | undefined): boolean {
    return proto3.util.equals(Config, a, b);
  }
}

/**
 * State tracking for contributors service
 *
 * @generated from message xatu_public_contributors.ContributorsState
 */
export class ContributorsState extends Message<ContributorsState> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: map<string, xatu_public_contributors.ProcessorState> processors = 2;
   */
  processors: { [key: string]: ProcessorState } = {};

  constructor(data?: PartialMessage<ContributorsState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.ContributorsState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "processors", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ProcessorState} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContributorsState {
    return new ContributorsState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContributorsState {
    return new ContributorsState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContributorsState {
    return new ContributorsState().fromJsonString(jsonString, options);
  }

  static equals(a: ContributorsState | PlainMessage<ContributorsState> | undefined, b: ContributorsState | PlainMessage<ContributorsState> | undefined): boolean {
    return proto3.util.equals(ContributorsState, a, b);
  }
}

/**
 * State for a specific processor
 *
 * @generated from message xatu_public_contributors.ProcessorState
 */
export class ProcessorState extends Message<ProcessorState> {
  /**
   * @generated from field: google.protobuf.Timestamp last_processed = 1;
   */
  lastProcessed?: Timestamp;

  /**
   * @generated from field: map<string, google.protobuf.Timestamp> last_processed_windows = 2;
   */
  lastProcessedWindows: { [key: string]: Timestamp } = {};

  constructor(data?: PartialMessage<ProcessorState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.ProcessorState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_processed", kind: "message", T: Timestamp },
    { no: 2, name: "last_processed_windows", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Timestamp} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessorState {
    return new ProcessorState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessorState {
    return new ProcessorState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessorState {
    return new ProcessorState().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessorState | PlainMessage<ProcessorState> | undefined, b: ProcessorState | PlainMessage<ProcessorState> | undefined): boolean {
    return proto3.util.equals(ProcessorState, a, b);
  }
}

/**
 * Count of nodes with total and public node counts
 *
 * @generated from message xatu_public_contributors.NodeCountStats
 */
export class NodeCountStats extends Message<NodeCountStats> {
  /**
   * @generated from field: int32 total_nodes = 1;
   */
  totalNodes = 0;

  /**
   * @generated from field: int32 public_nodes = 2;
   */
  publicNodes = 0;

  constructor(data?: PartialMessage<NodeCountStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.NodeCountStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_nodes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "public_nodes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeCountStats {
    return new NodeCountStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeCountStats {
    return new NodeCountStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeCountStats {
    return new NodeCountStats().fromJsonString(jsonString, options);
  }

  static equals(a: NodeCountStats | PlainMessage<NodeCountStats> | undefined, b: NodeCountStats | PlainMessage<NodeCountStats> | undefined): boolean {
    return proto3.util.equals(NodeCountStats, a, b);
  }
}

/**
 * Network statistics
 *
 * @generated from message xatu_public_contributors.NetworkStats
 */
export class NetworkStats extends Message<NetworkStats> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: int32 total_nodes = 2;
   */
  totalNodes = 0;

  /**
   * @generated from field: int32 total_public_nodes = 3;
   */
  totalPublicNodes = 0;

  /**
   * @generated from field: map<string, xatu_public_contributors.NodeCountStats> countries = 4;
   */
  countries: { [key: string]: NodeCountStats } = {};

  /**
   * @generated from field: map<string, xatu_public_contributors.NodeCountStats> continents = 5;
   */
  continents: { [key: string]: NodeCountStats } = {};

  /**
   * @generated from field: map<string, xatu_public_contributors.NodeCountStats> cities = 6;
   */
  cities: { [key: string]: NodeCountStats } = {};

  /**
   * @generated from field: map<string, xatu_public_contributors.NodeCountStats> consensus_implementations = 7;
   */
  consensusImplementations: { [key: string]: NodeCountStats } = {};

  constructor(data?: PartialMessage<NetworkStats>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.NetworkStats";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "total_nodes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "total_public_nodes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "countries", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: NodeCountStats} },
    { no: 5, name: "continents", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: NodeCountStats} },
    { no: 6, name: "cities", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: NodeCountStats} },
    { no: 7, name: "consensus_implementations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: NodeCountStats} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NetworkStats {
    return new NetworkStats().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NetworkStats {
    return new NetworkStats().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NetworkStats {
    return new NetworkStats().fromJsonString(jsonString, options);
  }

  static equals(a: NetworkStats | PlainMessage<NetworkStats> | undefined, b: NetworkStats | PlainMessage<NetworkStats> | undefined): boolean {
    return proto3.util.equals(NetworkStats, a, b);
  }
}

/**
 * Summary data for dashboard
 *
 * @generated from message xatu_public_contributors.SummaryData
 */
export class SummaryData extends Message<SummaryData> {
  /**
   * @generated from field: int64 updated_at = 1;
   */
  updatedAt = protoInt64.zero;

  /**
   * @generated from field: map<string, xatu_public_contributors.NetworkStats> networks = 2;
   */
  networks: { [key: string]: NetworkStats } = {};

  constructor(data?: PartialMessage<SummaryData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.SummaryData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "networks", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: NetworkStats} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SummaryData {
    return new SummaryData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SummaryData {
    return new SummaryData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SummaryData {
    return new SummaryData().fromJsonString(jsonString, options);
  }

  static equals(a: SummaryData | PlainMessage<SummaryData> | undefined, b: SummaryData | PlainMessage<SummaryData> | undefined): boolean {
    return proto3.util.equals(SummaryData, a, b);
  }
}

/**
 * Data point for a country
 *
 * @generated from message xatu_public_contributors.CountryDataPoint
 */
export class CountryDataPoint extends Message<CountryDataPoint> {
  /**
   * Unix timestamp
   *
   * @generated from field: int64 time = 1;
   */
  time = protoInt64.zero;

  /**
   * @generated from field: repeated xatu_public_contributors.CountryCount countries = 2;
   */
  countries: CountryCount[] = [];

  constructor(data?: PartialMessage<CountryDataPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.CountryDataPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "countries", kind: "message", T: CountryCount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountryDataPoint {
    return new CountryDataPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountryDataPoint {
    return new CountryDataPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountryDataPoint {
    return new CountryDataPoint().fromJsonString(jsonString, options);
  }

  static equals(a: CountryDataPoint | PlainMessage<CountryDataPoint> | undefined, b: CountryDataPoint | PlainMessage<CountryDataPoint> | undefined): boolean {
    return proto3.util.equals(CountryDataPoint, a, b);
  }
}

/**
 * Country with node count
 *
 * @generated from message xatu_public_contributors.CountryCount
 */
export class CountryCount extends Message<CountryCount> {
  /**
   * Country name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Node count
   *
   * @generated from field: int32 value = 2;
   */
  value = 0;

  constructor(data?: PartialMessage<CountryCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.CountryCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CountryCount {
    return new CountryCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CountryCount {
    return new CountryCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CountryCount {
    return new CountryCount().fromJsonString(jsonString, options);
  }

  static equals(a: CountryCount | PlainMessage<CountryCount> | undefined, b: CountryCount | PlainMessage<CountryCount> | undefined): boolean {
    return proto3.util.equals(CountryCount, a, b);
  }
}

/**
 * Data point representing a user's node count at a specific time (for Users processor)
 *
 * @generated from message xatu_public_contributors.UserDataPoint
 */
export class UserDataPoint extends Message<UserDataPoint> {
  /**
   * Extracted username
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Distinct node count for this user in the time slot
   *
   * @generated from field: int32 nodes = 2;
   */
  nodes = 0;

  constructor(data?: PartialMessage<UserDataPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.UserDataPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nodes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserDataPoint {
    return new UserDataPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserDataPoint {
    return new UserDataPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserDataPoint {
    return new UserDataPoint().fromJsonString(jsonString, options);
  }

  static equals(a: UserDataPoint | PlainMessage<UserDataPoint> | undefined, b: UserDataPoint | PlainMessage<UserDataPoint> | undefined): boolean {
    return proto3.util.equals(UserDataPoint, a, b);
  }
}

/**
 * Represents a collection of user data points for a specific timestamp (for Users processor)
 *
 * @generated from message xatu_public_contributors.UsersTimePoint
 */
export class UsersTimePoint extends Message<UsersTimePoint> {
  /**
   * Unix timestamp
   *
   * @generated from field: int64 time = 1;
   */
  time = protoInt64.zero;

  /**
   * @generated from field: repeated xatu_public_contributors.UserDataPoint users = 2;
   */
  users: UserDataPoint[] = [];

  constructor(data?: PartialMessage<UsersTimePoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.UsersTimePoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "users", kind: "message", T: UserDataPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsersTimePoint {
    return new UsersTimePoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsersTimePoint {
    return new UsersTimePoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsersTimePoint {
    return new UsersTimePoint().fromJsonString(jsonString, options);
  }

  static equals(a: UsersTimePoint | PlainMessage<UsersTimePoint> | undefined, b: UsersTimePoint | PlainMessage<UsersTimePoint> | undefined): boolean {
    return proto3.util.equals(UsersTimePoint, a, b);
  }
}

/**
 * Detailed information about a single node/client (for User Summaries processor)
 *
 * @generated from message xatu_public_contributors.NodeDetail
 */
export class NodeDetail extends Message<NodeDetail> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * Full meta_client_name
   *
   * @generated from field: string client_name = 2;
   */
  clientName = "";

  /**
   * @generated from field: string consensus_client = 3;
   */
  consensusClient = "";

  /**
   * @generated from field: string consensus_version = 4;
   */
  consensusVersion = "";

  /**
   * @generated from field: string country = 5;
   */
  country = "";

  /**
   * @generated from field: string city = 6;
   */
  city = "";

  /**
   * @generated from field: string continent = 7;
   */
  continent = "";

  /**
   * @generated from field: int64 latest_slot = 8;
   */
  latestSlot = protoInt64.zero;

  /**
   * Unix timestamp
   *
   * @generated from field: int64 latest_slot_start_date_time = 9;
   */
  latestSlotStartDateTime = protoInt64.zero;

  /**
   * @generated from field: string client_implementation = 10;
   */
  clientImplementation = "";

  /**
   * @generated from field: string client_version = 11;
   */
  clientVersion = "";

  constructor(data?: PartialMessage<NodeDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.NodeDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "client_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "consensus_client", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "consensus_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "continent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "latest_slot", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "latest_slot_start_date_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 10, name: "client_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeDetail {
    return new NodeDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeDetail {
    return new NodeDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeDetail {
    return new NodeDetail().fromJsonString(jsonString, options);
  }

  static equals(a: NodeDetail | PlainMessage<NodeDetail> | undefined, b: NodeDetail | PlainMessage<NodeDetail> | undefined): boolean {
    return proto3.util.equals(NodeDetail, a, b);
  }
}

/**
 * Summary data for a single user (for User Summaries processor)
 *
 * @generated from message xatu_public_contributors.UserSummary
 */
export class UserSummary extends Message<UserSummary> {
  /**
   * Extracted username
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: int32 node_count = 2;
   */
  nodeCount = 0;

  /**
   * @generated from field: repeated xatu_public_contributors.NodeDetail nodes = 3;
   */
  nodes: NodeDetail[] = [];

  /**
   * Unix timestamp of when the summary was generated
   *
   * @generated from field: int64 updated_at = 4;
   */
  updatedAt = protoInt64.zero;

  constructor(data?: PartialMessage<UserSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.UserSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "nodes", kind: "message", T: NodeDetail, repeated: true },
    { no: 4, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserSummary {
    return new UserSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserSummary {
    return new UserSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserSummary {
    return new UserSummary().fromJsonString(jsonString, options);
  }

  static equals(a: UserSummary | PlainMessage<UserSummary> | undefined, b: UserSummary | PlainMessage<UserSummary> | undefined): boolean {
    return proto3.util.equals(UserSummary, a, b);
  }
}

/**
 * Global summary listing all contributors (for User Summaries processor)
 *
 * @generated from message xatu_public_contributors.GlobalUserSummary
 */
export class GlobalUserSummary extends Message<GlobalUserSummary> {
  /**
   * @generated from field: repeated xatu_public_contributors.UserSummary contributors = 1;
   */
  contributors: UserSummary[] = [];

  /**
   * Unix timestamp of when the summary was generated
   *
   * @generated from field: int64 updated_at = 2;
   */
  updatedAt = protoInt64.zero;

  constructor(data?: PartialMessage<GlobalUserSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GlobalUserSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contributors", kind: "message", T: UserSummary, repeated: true },
    { no: 2, name: "updated_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GlobalUserSummary {
    return new GlobalUserSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GlobalUserSummary {
    return new GlobalUserSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GlobalUserSummary {
    return new GlobalUserSummary().fromJsonString(jsonString, options);
  }

  static equals(a: GlobalUserSummary | PlainMessage<GlobalUserSummary> | undefined, b: GlobalUserSummary | PlainMessage<GlobalUserSummary> | undefined): boolean {
    return proto3.util.equals(GlobalUserSummary, a, b);
  }
}

/**
 * Top networks by node count
 *
 * @generated from message xatu_public_contributors.TopNetworks
 */
export class TopNetworks extends Message<TopNetworks> {
  /**
   * @generated from field: repeated xatu_public_contributors.NetworkStats networks = 1;
   */
  networks: NetworkStats[] = [];

  constructor(data?: PartialMessage<TopNetworks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.TopNetworks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "networks", kind: "message", T: NetworkStats, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopNetworks {
    return new TopNetworks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopNetworks {
    return new TopNetworks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopNetworks {
    return new TopNetworks().fromJsonString(jsonString, options);
  }

  static equals(a: TopNetworks | PlainMessage<TopNetworks> | undefined, b: TopNetworks | PlainMessage<TopNetworks> | undefined): boolean {
    return proto3.util.equals(TopNetworks, a, b);
  }
}

/**
 * Request to get summary data
 *
 * @generated from message xatu_public_contributors.GetSummaryRequest
 */
export class GetSummaryRequest extends Message<GetSummaryRequest> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  constructor(data?: PartialMessage<GetSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetSummaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSummaryRequest {
    return new GetSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSummaryRequest {
    return new GetSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSummaryRequest {
    return new GetSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSummaryRequest | PlainMessage<GetSummaryRequest> | undefined, b: GetSummaryRequest | PlainMessage<GetSummaryRequest> | undefined): boolean {
    return proto3.util.equals(GetSummaryRequest, a, b);
  }
}

/**
 * Response containing summary data
 *
 * @generated from message xatu_public_contributors.GetSummaryResponse
 */
export class GetSummaryResponse extends Message<GetSummaryResponse> {
  /**
   * @generated from field: xatu_public_contributors.SummaryData summary = 1;
   */
  summary?: SummaryData;

  constructor(data?: PartialMessage<GetSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetSummaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "message", T: SummaryData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSummaryResponse {
    return new GetSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSummaryResponse {
    return new GetSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSummaryResponse {
    return new GetSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSummaryResponse | PlainMessage<GetSummaryResponse> | undefined, b: GetSummaryResponse | PlainMessage<GetSummaryResponse> | undefined): boolean {
    return proto3.util.equals(GetSummaryResponse, a, b);
  }
}

/**
 * Request to get country data
 *
 * @generated from message xatu_public_contributors.GetCountryDataRequest
 */
export class GetCountryDataRequest extends Message<GetCountryDataRequest> {
  /**
   * Optional time range parameters could be added here
   *
   * @generated from field: string network = 1;
   */
  network = "";

  constructor(data?: PartialMessage<GetCountryDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetCountryDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountryDataRequest {
    return new GetCountryDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountryDataRequest {
    return new GetCountryDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountryDataRequest {
    return new GetCountryDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountryDataRequest | PlainMessage<GetCountryDataRequest> | undefined, b: GetCountryDataRequest | PlainMessage<GetCountryDataRequest> | undefined): boolean {
    return proto3.util.equals(GetCountryDataRequest, a, b);
  }
}

/**
 * Response containing country data
 *
 * @generated from message xatu_public_contributors.GetCountryDataResponse
 */
export class GetCountryDataResponse extends Message<GetCountryDataResponse> {
  /**
   * @generated from field: repeated xatu_public_contributors.CountryDataPoint data_points = 1;
   */
  dataPoints: CountryDataPoint[] = [];

  constructor(data?: PartialMessage<GetCountryDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetCountryDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_points", kind: "message", T: CountryDataPoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountryDataResponse {
    return new GetCountryDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountryDataResponse {
    return new GetCountryDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountryDataResponse {
    return new GetCountryDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountryDataResponse | PlainMessage<GetCountryDataResponse> | undefined, b: GetCountryDataResponse | PlainMessage<GetCountryDataResponse> | undefined): boolean {
    return proto3.util.equals(GetCountryDataResponse, a, b);
  }
}

/**
 * Request to get user data (for Users processor time series)
 *
 * @generated from message xatu_public_contributors.GetUsersDataRequest
 */
export class GetUsersDataRequest extends Message<GetUsersDataRequest> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * e.g., "1h", "24h"
   *
   * @generated from field: string window = 2;
   */
  window = "";

  constructor(data?: PartialMessage<GetUsersDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetUsersDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "window", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersDataRequest {
    return new GetUsersDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersDataRequest {
    return new GetUsersDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersDataRequest {
    return new GetUsersDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersDataRequest | PlainMessage<GetUsersDataRequest> | undefined, b: GetUsersDataRequest | PlainMessage<GetUsersDataRequest> | undefined): boolean {
    return proto3.util.equals(GetUsersDataRequest, a, b);
  }
}

/**
 * Response containing user data (for Users processor time series)
 *
 * @generated from message xatu_public_contributors.GetUsersDataResponse
 */
export class GetUsersDataResponse extends Message<GetUsersDataResponse> {
  /**
   * @generated from field: repeated xatu_public_contributors.UsersTimePoint data_points = 1;
   */
  dataPoints: UsersTimePoint[] = [];

  constructor(data?: PartialMessage<GetUsersDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetUsersDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data_points", kind: "message", T: UsersTimePoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUsersDataResponse {
    return new GetUsersDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUsersDataResponse {
    return new GetUsersDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUsersDataResponse {
    return new GetUsersDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUsersDataResponse | PlainMessage<GetUsersDataResponse> | undefined, b: GetUsersDataResponse | PlainMessage<GetUsersDataResponse> | undefined): boolean {
    return proto3.util.equals(GetUsersDataResponse, a, b);
  }
}

/**
 * Request to get user summary (for User Summaries processor)
 *
 * @generated from message xatu_public_contributors.GetUserSummaryRequest
 */
export class GetUserSummaryRequest extends Message<GetUserSummaryRequest> {
  /**
   * Specific user to fetch
   *
   * @generated from field: string username = 1;
   */
  username = "";

  constructor(data?: PartialMessage<GetUserSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetUserSummaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserSummaryRequest {
    return new GetUserSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserSummaryRequest {
    return new GetUserSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserSummaryRequest {
    return new GetUserSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserSummaryRequest | PlainMessage<GetUserSummaryRequest> | undefined, b: GetUserSummaryRequest | PlainMessage<GetUserSummaryRequest> | undefined): boolean {
    return proto3.util.equals(GetUserSummaryRequest, a, b);
  }
}

/**
 * Response containing user summary (for User Summaries processor)
 *
 * @generated from message xatu_public_contributors.GetUserSummaryResponse
 */
export class GetUserSummaryResponse extends Message<GetUserSummaryResponse> {
  /**
   * @generated from field: xatu_public_contributors.UserSummary user_summary = 1;
   */
  userSummary?: UserSummary;

  constructor(data?: PartialMessage<GetUserSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetUserSummaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_summary", kind: "message", T: UserSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserSummaryResponse {
    return new GetUserSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserSummaryResponse {
    return new GetUserSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserSummaryResponse {
    return new GetUserSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserSummaryResponse | PlainMessage<GetUserSummaryResponse> | undefined, b: GetUserSummaryResponse | PlainMessage<GetUserSummaryResponse> | undefined): boolean {
    return proto3.util.equals(GetUserSummaryResponse, a, b);
  }
}

/**
 * Request to get the global user summary list (for User Summaries processor)
 *
 * @generated from message xatu_public_contributors.GetGlobalUserSummaryRequest
 */
export class GetGlobalUserSummaryRequest extends Message<GetGlobalUserSummaryRequest> {
  constructor(data?: PartialMessage<GetGlobalUserSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetGlobalUserSummaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGlobalUserSummaryRequest {
    return new GetGlobalUserSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGlobalUserSummaryRequest {
    return new GetGlobalUserSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGlobalUserSummaryRequest {
    return new GetGlobalUserSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGlobalUserSummaryRequest | PlainMessage<GetGlobalUserSummaryRequest> | undefined, b: GetGlobalUserSummaryRequest | PlainMessage<GetGlobalUserSummaryRequest> | undefined): boolean {
    return proto3.util.equals(GetGlobalUserSummaryRequest, a, b);
  }
}

/**
 * Response containing the global user summary list (for User Summaries processor)
 *
 * @generated from message xatu_public_contributors.GetGlobalUserSummaryResponse
 */
export class GetGlobalUserSummaryResponse extends Message<GetGlobalUserSummaryResponse> {
  /**
   * @generated from field: xatu_public_contributors.GlobalUserSummary summary = 1;
   */
  summary?: GlobalUserSummary;

  constructor(data?: PartialMessage<GetGlobalUserSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetGlobalUserSummaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "summary", kind: "message", T: GlobalUserSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGlobalUserSummaryResponse {
    return new GetGlobalUserSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGlobalUserSummaryResponse {
    return new GetGlobalUserSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGlobalUserSummaryResponse {
    return new GetGlobalUserSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGlobalUserSummaryResponse | PlainMessage<GetGlobalUserSummaryResponse> | undefined, b: GetGlobalUserSummaryResponse | PlainMessage<GetGlobalUserSummaryResponse> | undefined): boolean {
    return proto3.util.equals(GetGlobalUserSummaryResponse, a, b);
  }
}

/**
 * Request to get top networks
 *
 * @generated from message xatu_public_contributors.GetTopNetworksRequest
 */
export class GetTopNetworksRequest extends Message<GetTopNetworksRequest> {
  /**
   * Number of top networks to return
   *
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  constructor(data?: PartialMessage<GetTopNetworksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetTopNetworksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopNetworksRequest {
    return new GetTopNetworksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopNetworksRequest {
    return new GetTopNetworksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopNetworksRequest {
    return new GetTopNetworksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopNetworksRequest | PlainMessage<GetTopNetworksRequest> | undefined, b: GetTopNetworksRequest | PlainMessage<GetTopNetworksRequest> | undefined): boolean {
    return proto3.util.equals(GetTopNetworksRequest, a, b);
  }
}

/**
 * Response containing top networks
 *
 * @generated from message xatu_public_contributors.GetTopNetworksResponse
 */
export class GetTopNetworksResponse extends Message<GetTopNetworksResponse> {
  /**
   * @generated from field: xatu_public_contributors.TopNetworks top_networks = 1;
   */
  topNetworks?: TopNetworks;

  constructor(data?: PartialMessage<GetTopNetworksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_public_contributors.GetTopNetworksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "top_networks", kind: "message", T: TopNetworks },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopNetworksResponse {
    return new GetTopNetworksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopNetworksResponse {
    return new GetTopNetworksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopNetworksResponse {
    return new GetTopNetworksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopNetworksResponse | PlainMessage<GetTopNetworksResponse> | undefined, b: GetTopNetworksResponse | PlainMessage<GetTopNetworksResponse> | undefined): boolean {
    return proto3.util.equals(GetTopNetworksResponse, a, b);
  }
}

