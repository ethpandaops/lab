// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file backend/pkg/server/proto/beacon_slots/beacon_slots.proto (package beacon_slots, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message beacon_slots.GetSlotDataRequest
 */
export class GetSlotDataRequest extends Message<GetSlotDataRequest> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: int64 slot = 2;
   */
  slot = protoInt64.zero;

  constructor(data?: PartialMessage<GetSlotDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.GetSlotDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slot", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSlotDataRequest {
    return new GetSlotDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSlotDataRequest {
    return new GetSlotDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSlotDataRequest {
    return new GetSlotDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSlotDataRequest | PlainMessage<GetSlotDataRequest> | undefined, b: GetSlotDataRequest | PlainMessage<GetSlotDataRequest> | undefined): boolean {
    return proto3.util.equals(GetSlotDataRequest, a, b);
  }
}

/**
 * @generated from message beacon_slots.GetSlotDataResponse
 */
export class GetSlotDataResponse extends Message<GetSlotDataResponse> {
  /**
   * @generated from field: beacon_slots.BeaconSlotData data = 1;
   */
  data?: BeaconSlotData;

  constructor(data?: PartialMessage<GetSlotDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.GetSlotDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: BeaconSlotData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSlotDataResponse {
    return new GetSlotDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSlotDataResponse {
    return new GetSlotDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSlotDataResponse {
    return new GetSlotDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSlotDataResponse | PlainMessage<GetSlotDataResponse> | undefined, b: GetSlotDataResponse | PlainMessage<GetSlotDataResponse> | undefined): boolean {
    return proto3.util.equals(GetSlotDataResponse, a, b);
  }
}

/**
 * Geo location information for a node
 *
 * @generated from message beacon_slots.Geo
 */
export class Geo extends Message<Geo> {
  /**
   * @generated from field: string city = 1;
   */
  city = "";

  /**
   * @generated from field: string country = 2;
   */
  country = "";

  /**
   * @generated from field: string continent = 3;
   */
  continent = "";

  /**
   * @generated from field: double latitude = 4;
   */
  latitude = 0;

  /**
   * @generated from field: double longitude = 5;
   */
  longitude = 0;

  constructor(data?: PartialMessage<Geo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.Geo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "continent", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Geo {
    return new Geo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Geo {
    return new Geo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Geo {
    return new Geo().fromJsonString(jsonString, options);
  }

  static equals(a: Geo | PlainMessage<Geo> | undefined, b: Geo | PlainMessage<Geo> | undefined): boolean {
    return proto3.util.equals(Geo, a, b);
  }
}

/**
 * Node information, keyed by meta_client_name
 *
 * @generated from message beacon_slots.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: beacon_slots.Geo geo = 3;
   */
  geo?: Geo;

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "geo", kind: "message", T: Geo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * Proposer information (only slot and proposer_validator_index)
 *
 * @generated from message beacon_slots.Proposer
 */
export class Proposer extends Message<Proposer> {
  /**
   * @generated from field: int64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * @generated from field: int64 proposer_validator_index = 2 [json_name = "proposer_validator_index"];
   */
  proposerValidatorIndex = protoInt64.zero;

  constructor(data?: PartialMessage<Proposer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.Proposer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "proposer_validator_index", jsonName: "proposer_validator_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proposer {
    return new Proposer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proposer {
    return new Proposer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proposer {
    return new Proposer().fromJsonString(jsonString, options);
  }

  static equals(a: Proposer | PlainMessage<Proposer> | undefined, b: Proposer | PlainMessage<Proposer> | undefined): boolean {
    return proto3.util.equals(Proposer, a, b);
  }
}

/**
 * Block data, matching the target JSON structure precisely
 *
 * @generated from message beacon_slots.BlockData
 */
export class BlockData extends Message<BlockData> {
  /**
   * @generated from field: int64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * @generated from field: string slot_start_date_time = 2 [json_name = "slot_start_date_time"];
   */
  slotStartDateTime = "";

  /**
   * @generated from field: int64 epoch = 3;
   */
  epoch = protoInt64.zero;

  /**
   * @generated from field: string epoch_start_date_time = 4 [json_name = "epoch_start_date_time"];
   */
  epochStartDateTime = "";

  /**
   * @generated from field: string block_root = 5 [json_name = "block_root"];
   */
  blockRoot = "";

  /**
   * @generated from field: string block_version = 6 [json_name = "block_version"];
   */
  blockVersion = "";

  /**
   * @generated from field: int64 block_total_bytes = 7 [json_name = "block_total_bytes"];
   */
  blockTotalBytes = protoInt64.zero;

  /**
   * @generated from field: int64 block_total_bytes_compressed = 8 [json_name = "block_total_bytes_compressed"];
   */
  blockTotalBytesCompressed = protoInt64.zero;

  /**
   * @generated from field: string parent_root = 9 [json_name = "parent_root"];
   */
  parentRoot = "";

  /**
   * @generated from field: string state_root = 10 [json_name = "state_root"];
   */
  stateRoot = "";

  /**
   * @generated from field: int64 proposer_index = 11 [json_name = "proposer_index"];
   */
  proposerIndex = protoInt64.zero;

  /**
   * @generated from field: string eth1_data_block_hash = 12 [json_name = "eth1_data_block_hash"];
   */
  eth1DataBlockHash = "";

  /**
   * @generated from field: string eth1_data_deposit_root = 13 [json_name = "eth1_data_deposit_root"];
   */
  eth1DataDepositRoot = "";

  /**
   * @generated from field: string execution_payload_block_hash = 14 [json_name = "execution_payload_block_hash"];
   */
  executionPayloadBlockHash = "";

  /**
   * @generated from field: int64 execution_payload_block_number = 15 [json_name = "execution_payload_block_number"];
   */
  executionPayloadBlockNumber = protoInt64.zero;

  /**
   * @generated from field: string execution_payload_fee_recipient = 16 [json_name = "execution_payload_fee_recipient"];
   */
  executionPayloadFeeRecipient = "";

  /**
   * @generated from field: int64 execution_payload_base_fee_per_gas = 17 [json_name = "execution_payload_base_fee_per_gas"];
   */
  executionPayloadBaseFeePerGas = protoInt64.zero;

  /**
   * @generated from field: int64 execution_payload_blob_gas_used = 18 [json_name = "execution_payload_blob_gas_used"];
   */
  executionPayloadBlobGasUsed = protoInt64.zero;

  /**
   * @generated from field: int64 execution_payload_excess_blob_gas = 19 [json_name = "execution_payload_excess_blob_gas"];
   */
  executionPayloadExcessBlobGas = protoInt64.zero;

  /**
   * @generated from field: int64 execution_payload_gas_limit = 20 [json_name = "execution_payload_gas_limit"];
   */
  executionPayloadGasLimit = protoInt64.zero;

  /**
   * @generated from field: int64 execution_payload_gas_used = 21 [json_name = "execution_payload_gas_used"];
   */
  executionPayloadGasUsed = protoInt64.zero;

  /**
   * @generated from field: string execution_payload_state_root = 22 [json_name = "execution_payload_state_root"];
   */
  executionPayloadStateRoot = "";

  /**
   * @generated from field: string execution_payload_parent_hash = 23 [json_name = "execution_payload_parent_hash"];
   */
  executionPayloadParentHash = "";

  /**
   * @generated from field: int64 execution_payload_transactions_count = 24 [json_name = "execution_payload_transactions_count"];
   */
  executionPayloadTransactionsCount = protoInt64.zero;

  /**
   * @generated from field: int64 execution_payload_transactions_total_bytes = 25 [json_name = "execution_payload_transactions_total_bytes"];
   */
  executionPayloadTransactionsTotalBytes = protoInt64.zero;

  /**
   * @generated from field: int64 execution_payload_transactions_total_bytes_compressed = 26 [json_name = "execution_payload_transactions_total_bytes_compressed"];
   */
  executionPayloadTransactionsTotalBytesCompressed = protoInt64.zero;

  constructor(data?: PartialMessage<BlockData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.BlockData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "slot_start_date_time", jsonName: "slot_start_date_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "epoch", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "epoch_start_date_time", jsonName: "epoch_start_date_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "block_root", jsonName: "block_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "block_version", jsonName: "block_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "block_total_bytes", jsonName: "block_total_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "block_total_bytes_compressed", jsonName: "block_total_bytes_compressed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "parent_root", jsonName: "parent_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "state_root", jsonName: "state_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "proposer_index", jsonName: "proposer_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "eth1_data_block_hash", jsonName: "eth1_data_block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "eth1_data_deposit_root", jsonName: "eth1_data_deposit_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "execution_payload_block_hash", jsonName: "execution_payload_block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "execution_payload_block_number", jsonName: "execution_payload_block_number", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "execution_payload_fee_recipient", jsonName: "execution_payload_fee_recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "execution_payload_base_fee_per_gas", jsonName: "execution_payload_base_fee_per_gas", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "execution_payload_blob_gas_used", jsonName: "execution_payload_blob_gas_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "execution_payload_excess_blob_gas", jsonName: "execution_payload_excess_blob_gas", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "execution_payload_gas_limit", jsonName: "execution_payload_gas_limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 21, name: "execution_payload_gas_used", jsonName: "execution_payload_gas_used", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 22, name: "execution_payload_state_root", jsonName: "execution_payload_state_root", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "execution_payload_parent_hash", jsonName: "execution_payload_parent_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "execution_payload_transactions_count", jsonName: "execution_payload_transactions_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 25, name: "execution_payload_transactions_total_bytes", jsonName: "execution_payload_transactions_total_bytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 26, name: "execution_payload_transactions_total_bytes_compressed", jsonName: "execution_payload_transactions_total_bytes_compressed", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockData {
    return new BlockData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockData {
    return new BlockData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockData {
    return new BlockData().fromJsonString(jsonString, options);
  }

  static equals(a: BlockData | PlainMessage<BlockData> | undefined, b: BlockData | PlainMessage<BlockData> | undefined): boolean {
    return proto3.util.equals(BlockData, a, b);
  }
}

/**
 * Attestation window
 *
 * @generated from message beacon_slots.AttestationWindow
 */
export class AttestationWindow extends Message<AttestationWindow> {
  /**
   * @generated from field: int64 start_ms = 1 [json_name = "start_ms"];
   */
  startMs = protoInt64.zero;

  /**
   * @generated from field: int64 end_ms = 2 [json_name = "end_ms"];
   */
  endMs = protoInt64.zero;

  /**
   * @generated from field: repeated int64 validator_indices = 3 [json_name = "validator_indices"];
   */
  validatorIndices: bigint[] = [];

  constructor(data?: PartialMessage<AttestationWindow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.AttestationWindow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_ms", jsonName: "start_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "end_ms", jsonName: "end_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "validator_indices", jsonName: "validator_indices", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttestationWindow {
    return new AttestationWindow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttestationWindow {
    return new AttestationWindow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttestationWindow {
    return new AttestationWindow().fromJsonString(jsonString, options);
  }

  static equals(a: AttestationWindow | PlainMessage<AttestationWindow> | undefined, b: AttestationWindow | PlainMessage<AttestationWindow> | undefined): boolean {
    return proto3.util.equals(AttestationWindow, a, b);
  }
}

/**
 * Attestations data
 *
 * @generated from message beacon_slots.AttestationsData
 */
export class AttestationsData extends Message<AttestationsData> {
  /**
   * @generated from field: repeated beacon_slots.AttestationWindow windows = 1;
   */
  windows: AttestationWindow[] = [];

  /**
   * @generated from field: int64 maximum_votes = 2 [json_name = "maximum_votes"];
   */
  maximumVotes = protoInt64.zero;

  constructor(data?: PartialMessage<AttestationsData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.AttestationsData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "windows", kind: "message", T: AttestationWindow, repeated: true },
    { no: 2, name: "maximum_votes", jsonName: "maximum_votes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttestationsData {
    return new AttestationsData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttestationsData {
    return new AttestationsData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttestationsData {
    return new AttestationsData().fromJsonString(jsonString, options);
  }

  static equals(a: AttestationsData | PlainMessage<AttestationsData> | undefined, b: AttestationsData | PlainMessage<AttestationsData> | undefined): boolean {
    return proto3.util.equals(AttestationsData, a, b);
  }
}

/**
 * Intermediate message for nested blob timing maps
 *
 * @generated from message beacon_slots.BlobTimingMap
 */
export class BlobTimingMap extends Message<BlobTimingMap> {
  /**
   * map blob_index -> ms
   *
   * @generated from field: map<int64, int64> timings = 1;
   */
  timings: { [key: string]: bigint } = {};

  constructor(data?: PartialMessage<BlobTimingMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.BlobTimingMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timings", kind: "map", K: 3 /* ScalarType.INT64 */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlobTimingMap {
    return new BlobTimingMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlobTimingMap {
    return new BlobTimingMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlobTimingMap {
    return new BlobTimingMap().fromJsonString(jsonString, options);
  }

  static equals(a: BlobTimingMap | PlainMessage<BlobTimingMap> | undefined, b: BlobTimingMap | PlainMessage<BlobTimingMap> | undefined): boolean {
    return proto3.util.equals(BlobTimingMap, a, b);
  }
}

/**
 * @generated from message beacon_slots.BlockArrivalTime
 */
export class BlockArrivalTime extends Message<BlockArrivalTime> {
  /**
   * @generated from field: int64 slot_time = 1 [json_name = "slot_time"];
   */
  slotTime = protoInt64.zero;

  /**
   * @generated from field: string meta_client_name = 2 [json_name = "meta_client_name"];
   */
  metaClientName = "";

  /**
   * @generated from field: string meta_client_geo_city = 3 [json_name = "meta_client_geo_city"];
   */
  metaClientGeoCity = "";

  /**
   * @generated from field: string meta_client_geo_country = 4 [json_name = "meta_client_geo_country"];
   */
  metaClientGeoCountry = "";

  /**
   * @generated from field: string meta_client_geo_continent_code = 5 [json_name = "meta_client_geo_continent_code"];
   */
  metaClientGeoContinentCode = "";

  constructor(data?: PartialMessage<BlockArrivalTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.BlockArrivalTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_time", jsonName: "slot_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "meta_client_name", jsonName: "meta_client_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "meta_client_geo_city", jsonName: "meta_client_geo_city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "meta_client_geo_country", jsonName: "meta_client_geo_country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "meta_client_geo_continent_code", jsonName: "meta_client_geo_continent_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockArrivalTime {
    return new BlockArrivalTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockArrivalTime {
    return new BlockArrivalTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockArrivalTime {
    return new BlockArrivalTime().fromJsonString(jsonString, options);
  }

  static equals(a: BlockArrivalTime | PlainMessage<BlockArrivalTime> | undefined, b: BlockArrivalTime | PlainMessage<BlockArrivalTime> | undefined): boolean {
    return proto3.util.equals(BlockArrivalTime, a, b);
  }
}

/**
 * @generated from message beacon_slots.BlobArrivalTime
 */
export class BlobArrivalTime extends Message<BlobArrivalTime> {
  /**
   * @generated from field: int64 slot_time = 1 [json_name = "slot_time"];
   */
  slotTime = protoInt64.zero;

  /**
   * @generated from field: string meta_client_name = 2 [json_name = "meta_client_name"];
   */
  metaClientName = "";

  /**
   * @generated from field: string meta_client_geo_city = 3 [json_name = "meta_client_geo_city"];
   */
  metaClientGeoCity = "";

  /**
   * @generated from field: string meta_client_geo_country = 4 [json_name = "meta_client_geo_country"];
   */
  metaClientGeoCountry = "";

  /**
   * @generated from field: string meta_client_geo_continent_code = 5 [json_name = "meta_client_geo_continent_code"];
   */
  metaClientGeoContinentCode = "";

  /**
   * @generated from field: int64 blob_index = 6 [json_name = "blob_index"];
   */
  blobIndex = protoInt64.zero;

  constructor(data?: PartialMessage<BlobArrivalTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.BlobArrivalTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_time", jsonName: "slot_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "meta_client_name", jsonName: "meta_client_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "meta_client_geo_city", jsonName: "meta_client_geo_city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "meta_client_geo_country", jsonName: "meta_client_geo_country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "meta_client_geo_continent_code", jsonName: "meta_client_geo_continent_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "blob_index", jsonName: "blob_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlobArrivalTime {
    return new BlobArrivalTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlobArrivalTime {
    return new BlobArrivalTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlobArrivalTime {
    return new BlobArrivalTime().fromJsonString(jsonString, options);
  }

  static equals(a: BlobArrivalTime | PlainMessage<BlobArrivalTime> | undefined, b: BlobArrivalTime | PlainMessage<BlobArrivalTime> | undefined): boolean {
    return proto3.util.equals(BlobArrivalTime, a, b);
  }
}

/**
 * @generated from message beacon_slots.BlobArrivalTimes
 */
export class BlobArrivalTimes extends Message<BlobArrivalTimes> {
  /**
   * @generated from field: repeated beacon_slots.BlobArrivalTime arrival_times = 1 [json_name = "arrival_times"];
   */
  arrivalTimes: BlobArrivalTime[] = [];

  constructor(data?: PartialMessage<BlobArrivalTimes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.BlobArrivalTimes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "arrival_times", jsonName: "arrival_times", kind: "message", T: BlobArrivalTime, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlobArrivalTimes {
    return new BlobArrivalTimes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlobArrivalTimes {
    return new BlobArrivalTimes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlobArrivalTimes {
    return new BlobArrivalTimes().fromJsonString(jsonString, options);
  }

  static equals(a: BlobArrivalTimes | PlainMessage<BlobArrivalTimes> | undefined, b: BlobArrivalTimes | PlainMessage<BlobArrivalTimes> | undefined): boolean {
    return proto3.util.equals(BlobArrivalTimes, a, b);
  }
}

/**
 * FullTimings data includes timing data with metadata and geo location
 *
 * @generated from message beacon_slots.FullTimings
 */
export class FullTimings extends Message<FullTimings> {
  /**
   * map meta_client -> BlockArrivalTime
   *
   * @generated from field: map<string, beacon_slots.BlockArrivalTime> block_seen = 1 [json_name = "block_seen"];
   */
  blockSeen: { [key: string]: BlockArrivalTime } = {};

  /**
   * map meta_client -> BlobArrivalTimes
   *
   * @generated from field: map<string, beacon_slots.BlobArrivalTimes> blob_seen = 2 [json_name = "blob_seen"];
   */
  blobSeen: { [key: string]: BlobArrivalTimes } = {};

  /**
   * map meta_client -> BlockArrivalTime
   *
   * @generated from field: map<string, beacon_slots.BlockArrivalTime> block_first_seen_p2p = 3 [json_name = "block_first_seen_p2p"];
   */
  blockFirstSeenP2p: { [key: string]: BlockArrivalTime } = {};

  /**
   * map meta_client -> BlobArrivalTimes
   *
   * @generated from field: map<string, beacon_slots.BlobArrivalTimes> blob_first_seen_p2p = 4 [json_name = "blob_first_seen_p2p"];
   */
  blobFirstSeenP2p: { [key: string]: BlobArrivalTimes } = {};

  constructor(data?: PartialMessage<FullTimings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.FullTimings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_seen", jsonName: "block_seen", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: BlockArrivalTime} },
    { no: 2, name: "blob_seen", jsonName: "blob_seen", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: BlobArrivalTimes} },
    { no: 3, name: "block_first_seen_p2p", jsonName: "block_first_seen_p2p", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: BlockArrivalTime} },
    { no: 4, name: "blob_first_seen_p2p", jsonName: "blob_first_seen_p2p", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: BlobArrivalTimes} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullTimings {
    return new FullTimings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullTimings {
    return new FullTimings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullTimings {
    return new FullTimings().fromJsonString(jsonString, options);
  }

  static equals(a: FullTimings | PlainMessage<FullTimings> | undefined, b: FullTimings | PlainMessage<FullTimings> | undefined): boolean {
    return proto3.util.equals(FullTimings, a, b);
  }
}

/**
 * SlimTimings data is a slimmed down version of FullTimings that drops the metadata and geo location
 *
 * @generated from message beacon_slots.SlimTimings
 */
export class SlimTimings extends Message<SlimTimings> {
  /**
   * map meta_client -> ms
   *
   * @generated from field: map<string, int64> block_seen = 1 [json_name = "block_seen"];
   */
  blockSeen: { [key: string]: bigint } = {};

  /**
   * map meta_client -> BlobTimingMap
   *
   * @generated from field: map<string, beacon_slots.BlobTimingMap> blob_seen = 2 [json_name = "blob_seen"];
   */
  blobSeen: { [key: string]: BlobTimingMap } = {};

  /**
   * map meta_client -> ms
   *
   * @generated from field: map<string, int64> block_first_seen_p2p = 3 [json_name = "block_first_seen_p2p"];
   */
  blockFirstSeenP2p: { [key: string]: bigint } = {};

  /**
   * map meta_client -> BlobTimingMap
   *
   * @generated from field: map<string, beacon_slots.BlobTimingMap> blob_first_seen_p2p = 4 [json_name = "blob_first_seen_p2p"];
   */
  blobFirstSeenP2p: { [key: string]: BlobTimingMap } = {};

  constructor(data?: PartialMessage<SlimTimings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.SlimTimings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_seen", jsonName: "block_seen", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
    { no: 2, name: "blob_seen", jsonName: "blob_seen", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: BlobTimingMap} },
    { no: 3, name: "block_first_seen_p2p", jsonName: "block_first_seen_p2p", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 3 /* ScalarType.INT64 */} },
    { no: 4, name: "blob_first_seen_p2p", jsonName: "blob_first_seen_p2p", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: BlobTimingMap} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SlimTimings {
    return new SlimTimings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SlimTimings {
    return new SlimTimings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SlimTimings {
    return new SlimTimings().fromJsonString(jsonString, options);
  }

  static equals(a: SlimTimings | PlainMessage<SlimTimings> | undefined, b: SlimTimings | PlainMessage<SlimTimings> | undefined): boolean {
    return proto3.util.equals(SlimTimings, a, b);
  }
}

/**
 * MEV Relay Bid data
 *
 * @generated from message beacon_slots.RelayBid
 */
export class RelayBid extends Message<RelayBid> {
  /**
   * @generated from field: uint64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * @generated from field: string parent_hash = 2 [json_name = "parent_hash"];
   */
  parentHash = "";

  /**
   * @generated from field: string block_hash = 3 [json_name = "block_hash"];
   */
  blockHash = "";

  /**
   * @generated from field: string builder_pubkey = 4 [json_name = "builder_pubkey"];
   */
  builderPubkey = "";

  /**
   * @generated from field: string proposer_pubkey = 5 [json_name = "proposer_pubkey"];
   */
  proposerPubkey = "";

  /**
   * @generated from field: string proposer_fee_recipient = 6 [json_name = "proposer_fee_recipient"];
   */
  proposerFeeRecipient = "";

  /**
   * String representation of UInt256
   *
   * @generated from field: string value = 7;
   */
  value = "";

  /**
   * Field name/type to be verified in implementation phase
   *
   * @generated from field: uint64 gas_limit = 8 [json_name = "gas_limit"];
   */
  gasLimit = protoInt64.zero;

  /**
   * Field name/type to be verified in implementation phase
   *
   * @generated from field: uint64 gas_used = 9 [json_name = "gas_used"];
   */
  gasUsed = protoInt64.zero;

  /**
   * Time relative to slot start in ms
   *
   * @generated from field: int32 slot_time = 10 [json_name = "slot_time"];
   */
  slotTime = 0;

  /**
   * Time bucket (granularity) in ms
   *
   * @generated from field: int32 time_bucket = 11 [json_name = "time_bucket"];
   */
  timeBucket = 0;

  constructor(data?: PartialMessage<RelayBid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.RelayBid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "parent_hash", jsonName: "parent_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "block_hash", jsonName: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "builder_pubkey", jsonName: "builder_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "proposer_pubkey", jsonName: "proposer_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "proposer_fee_recipient", jsonName: "proposer_fee_recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "gas_limit", jsonName: "gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "gas_used", jsonName: "gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "slot_time", jsonName: "slot_time", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "time_bucket", jsonName: "time_bucket", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelayBid {
    return new RelayBid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelayBid {
    return new RelayBid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelayBid {
    return new RelayBid().fromJsonString(jsonString, options);
  }

  static equals(a: RelayBid | PlainMessage<RelayBid> | undefined, b: RelayBid | PlainMessage<RelayBid> | undefined): boolean {
    return proto3.util.equals(RelayBid, a, b);
  }
}

/**
 * Wrapper message for repeated RelayBid
 *
 * @generated from message beacon_slots.RelayBids
 */
export class RelayBids extends Message<RelayBids> {
  /**
   * @generated from field: repeated beacon_slots.RelayBid bids = 1;
   */
  bids: RelayBid[] = [];

  constructor(data?: PartialMessage<RelayBids>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.RelayBids";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bids", kind: "message", T: RelayBid, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelayBids {
    return new RelayBids().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelayBids {
    return new RelayBids().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelayBids {
    return new RelayBids().fromJsonString(jsonString, options);
  }

  static equals(a: RelayBids | PlainMessage<RelayBids> | undefined, b: RelayBids | PlainMessage<RelayBids> | undefined): boolean {
    return proto3.util.equals(RelayBids, a, b);
  }
}

/**
 * MEV Delivered Payload data
 *
 * @generated from message beacon_slots.DeliveredPayload
 */
export class DeliveredPayload extends Message<DeliveredPayload> {
  /**
   * @generated from field: uint64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * @generated from field: string block_hash = 2 [json_name = "block_hash"];
   */
  blockHash = "";

  /**
   * @generated from field: uint64 block_number = 3 [json_name = "block_number"];
   */
  blockNumber = protoInt64.zero;

  /**
   * @generated from field: string proposer_pubkey = 4 [json_name = "proposer_pubkey"];
   */
  proposerPubkey = "";

  /**
   * @generated from field: string proposer_fee_recipient = 5 [json_name = "proposer_fee_recipient"];
   */
  proposerFeeRecipient = "";

  constructor(data?: PartialMessage<DeliveredPayload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.DeliveredPayload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "block_hash", jsonName: "block_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "block_number", jsonName: "block_number", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "proposer_pubkey", jsonName: "proposer_pubkey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "proposer_fee_recipient", jsonName: "proposer_fee_recipient", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeliveredPayload {
    return new DeliveredPayload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeliveredPayload {
    return new DeliveredPayload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeliveredPayload {
    return new DeliveredPayload().fromJsonString(jsonString, options);
  }

  static equals(a: DeliveredPayload | PlainMessage<DeliveredPayload> | undefined, b: DeliveredPayload | PlainMessage<DeliveredPayload> | undefined): boolean {
    return proto3.util.equals(DeliveredPayload, a, b);
  }
}

/**
 * Wrapper message for repeated DeliveredPayload
 *
 * @generated from message beacon_slots.DeliveredPayloads
 */
export class DeliveredPayloads extends Message<DeliveredPayloads> {
  /**
   * @generated from field: repeated beacon_slots.DeliveredPayload payloads = 1;
   */
  payloads: DeliveredPayload[] = [];

  constructor(data?: PartialMessage<DeliveredPayloads>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.DeliveredPayloads";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payloads", kind: "message", T: DeliveredPayload, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeliveredPayloads {
    return new DeliveredPayloads().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeliveredPayloads {
    return new DeliveredPayloads().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeliveredPayloads {
    return new DeliveredPayloads().fromJsonString(jsonString, options);
  }

  static equals(a: DeliveredPayloads | PlainMessage<DeliveredPayloads> | undefined, b: DeliveredPayloads | PlainMessage<DeliveredPayloads> | undefined): boolean {
    return proto3.util.equals(DeliveredPayloads, a, b);
  }
}

/**
 * Top-level beacon slot data message
 *
 * @generated from message beacon_slots.BeaconSlotData
 */
export class BeaconSlotData extends Message<BeaconSlotData> {
  /**
   * @generated from field: int64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * @generated from field: string network = 2;
   */
  network = "";

  /**
   * @generated from field: string processed_at = 3 [json_name = "processed_at"];
   */
  processedAt = "";

  /**
   * @generated from field: int64 processing_time_ms = 4 [json_name = "processing_time_ms"];
   */
  processingTimeMs = protoInt64.zero;

  /**
   * @generated from field: beacon_slots.BlockData block = 5;
   */
  block?: BlockData;

  /**
   * @generated from field: beacon_slots.Proposer proposer = 6;
   */
  proposer?: Proposer;

  /**
   * @generated from field: string entity = 7;
   */
  entity = "";

  /**
   * @generated from field: map<string, beacon_slots.Node> nodes = 8;
   */
  nodes: { [key: string]: Node } = {};

  /**
   * @generated from field: beacon_slots.SlimTimings timings = 9;
   */
  timings?: SlimTimings;

  /**
   * @generated from field: beacon_slots.AttestationsData attestations = 10;
   */
  attestations?: AttestationsData;

  /**
   * Keyed by relay_name, stores list of bids via wrapper
   *
   * @generated from field: map<string, beacon_slots.RelayBids> relay_bids = 11 [json_name = "relay_bids"];
   */
  relayBids: { [key: string]: RelayBids } = {};

  /**
   * Keyed by relay_name, stores list of payloads via wrapper
   *
   * @generated from field: map<string, beacon_slots.DeliveredPayloads> delivered_payloads = 12 [json_name = "delivered_payloads"];
   */
  deliveredPayloads: { [key: string]: DeliveredPayloads } = {};

  constructor(data?: PartialMessage<BeaconSlotData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.BeaconSlotData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "processed_at", jsonName: "processed_at", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "processing_time_ms", jsonName: "processing_time_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "block", kind: "message", T: BlockData },
    { no: 6, name: "proposer", kind: "message", T: Proposer },
    { no: 7, name: "entity", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "nodes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Node} },
    { no: 9, name: "timings", kind: "message", T: SlimTimings },
    { no: 10, name: "attestations", kind: "message", T: AttestationsData },
    { no: 11, name: "relay_bids", jsonName: "relay_bids", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: RelayBids} },
    { no: 12, name: "delivered_payloads", jsonName: "delivered_payloads", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DeliveredPayloads} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BeaconSlotData {
    return new BeaconSlotData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BeaconSlotData {
    return new BeaconSlotData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BeaconSlotData {
    return new BeaconSlotData().fromJsonString(jsonString, options);
  }

  static equals(a: BeaconSlotData | PlainMessage<BeaconSlotData> | undefined, b: BeaconSlotData | PlainMessage<BeaconSlotData> | undefined): boolean {
    return proto3.util.equals(BeaconSlotData, a, b);
  }
}

/**
 * LocallyBuiltBlockMetadata contains metadata about the locally built block
 *
 * @generated from message beacon_slots.LocallyBuiltBlockMetadata
 */
export class LocallyBuiltBlockMetadata extends Message<LocallyBuiltBlockMetadata> {
  /**
   * @generated from field: string meta_client_name = 1;
   */
  metaClientName = "";

  /**
   * @generated from field: google.protobuf.Timestamp event_date_time = 2;
   */
  eventDateTime?: Timestamp;

  /**
   * @generated from field: string meta_client_version = 3;
   */
  metaClientVersion = "";

  /**
   * @generated from field: string meta_client_implementation = 4;
   */
  metaClientImplementation = "";

  /**
   * @generated from field: string meta_client_geo_city = 5;
   */
  metaClientGeoCity = "";

  /**
   * @generated from field: string meta_client_geo_country = 7;
   */
  metaClientGeoCountry = "";

  /**
   * @generated from field: string meta_client_geo_country_code = 8;
   */
  metaClientGeoCountryCode = "";

  /**
   * @generated from field: string meta_client_geo_continent_code = 9;
   */
  metaClientGeoContinentCode = "";

  /**
   * @generated from field: double meta_client_geo_longitude = 10;
   */
  metaClientGeoLongitude = 0;

  /**
   * @generated from field: double meta_client_geo_latitude = 11;
   */
  metaClientGeoLatitude = 0;

  /**
   * @generated from field: string meta_consensus_version = 12;
   */
  metaConsensusVersion = "";

  /**
   * @generated from field: string meta_consensus_implementation = 13;
   */
  metaConsensusImplementation = "";

  /**
   * @generated from field: string meta_network_name = 14;
   */
  metaNetworkName = "";

  constructor(data?: PartialMessage<LocallyBuiltBlockMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.LocallyBuiltBlockMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta_client_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "event_date_time", kind: "message", T: Timestamp },
    { no: 3, name: "meta_client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "meta_client_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "meta_client_geo_city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "meta_client_geo_country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "meta_client_geo_country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "meta_client_geo_continent_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "meta_client_geo_longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: "meta_client_geo_latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "meta_consensus_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "meta_consensus_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "meta_network_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocallyBuiltBlockMetadata {
    return new LocallyBuiltBlockMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocallyBuiltBlockMetadata {
    return new LocallyBuiltBlockMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocallyBuiltBlockMetadata {
    return new LocallyBuiltBlockMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: LocallyBuiltBlockMetadata | PlainMessage<LocallyBuiltBlockMetadata> | undefined, b: LocallyBuiltBlockMetadata | PlainMessage<LocallyBuiltBlockMetadata> | undefined): boolean {
    return proto3.util.equals(LocallyBuiltBlockMetadata, a, b);
  }
}

/**
 * LocallyBuiltBlock represents a locally built block
 *
 * @generated from message beacon_slots.LocallyBuiltBlock
 */
export class LocallyBuiltBlock extends Message<LocallyBuiltBlock> {
  /**
   * @generated from field: uint64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp slot_start_date_time = 2;
   */
  slotStartDateTime?: Timestamp;

  /**
   * @generated from field: beacon_slots.LocallyBuiltBlockMetadata metadata = 4;
   */
  metadata?: LocallyBuiltBlockMetadata;

  /**
   * @generated from field: string block_version = 5;
   */
  blockVersion = "";

  /**
   * @generated from field: uint32 block_total_bytes = 6;
   */
  blockTotalBytes = 0;

  /**
   * @generated from field: uint32 block_total_bytes_compressed = 7;
   */
  blockTotalBytesCompressed = 0;

  /**
   * @generated from field: uint64 execution_payload_value = 8;
   */
  executionPayloadValue = protoInt64.zero;

  /**
   * @generated from field: uint64 consensus_payload_value = 9;
   */
  consensusPayloadValue = protoInt64.zero;

  /**
   * @generated from field: uint32 execution_payload_block_number = 10;
   */
  executionPayloadBlockNumber = 0;

  /**
   * @generated from field: uint64 execution_payload_gas_limit = 11;
   */
  executionPayloadGasLimit = protoInt64.zero;

  /**
   * @generated from field: uint64 execution_payload_gas_used = 12;
   */
  executionPayloadGasUsed = protoInt64.zero;

  /**
   * @generated from field: uint32 execution_payload_transactions_count = 13;
   */
  executionPayloadTransactionsCount = 0;

  /**
   * @generated from field: uint32 execution_payload_transactions_total_bytes = 14;
   */
  executionPayloadTransactionsTotalBytes = 0;

  /**
   * @generated from field: uint32 execution_payload_transactions_total_bytes_compressed = 15;
   */
  executionPayloadTransactionsTotalBytesCompressed = 0;

  constructor(data?: PartialMessage<LocallyBuiltBlock>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.LocallyBuiltBlock";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "slot_start_date_time", kind: "message", T: Timestamp },
    { no: 4, name: "metadata", kind: "message", T: LocallyBuiltBlockMetadata },
    { no: 5, name: "block_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "block_total_bytes", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "block_total_bytes_compressed", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 8, name: "execution_payload_value", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 9, name: "consensus_payload_value", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 10, name: "execution_payload_block_number", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 11, name: "execution_payload_gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 12, name: "execution_payload_gas_used", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 13, name: "execution_payload_transactions_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 14, name: "execution_payload_transactions_total_bytes", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 15, name: "execution_payload_transactions_total_bytes_compressed", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocallyBuiltBlock {
    return new LocallyBuiltBlock().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocallyBuiltBlock {
    return new LocallyBuiltBlock().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocallyBuiltBlock {
    return new LocallyBuiltBlock().fromJsonString(jsonString, options);
  }

  static equals(a: LocallyBuiltBlock | PlainMessage<LocallyBuiltBlock> | undefined, b: LocallyBuiltBlock | PlainMessage<LocallyBuiltBlock> | undefined): boolean {
    return proto3.util.equals(LocallyBuiltBlock, a, b);
  }
}

/**
 * LocallyBuiltSlotBlocks represents all locally built blocks observed for a specific slot
 *
 * @generated from message beacon_slots.LocallyBuiltSlotBlocks
 */
export class LocallyBuiltSlotBlocks extends Message<LocallyBuiltSlotBlocks> {
  /**
   * @generated from field: uint64 slot = 1;
   */
  slot = protoInt64.zero;

  /**
   * @generated from field: repeated beacon_slots.LocallyBuiltBlock blocks = 2;
   */
  blocks: LocallyBuiltBlock[] = [];

  constructor(data?: PartialMessage<LocallyBuiltSlotBlocks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.LocallyBuiltSlotBlocks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "blocks", kind: "message", T: LocallyBuiltBlock, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocallyBuiltSlotBlocks {
    return new LocallyBuiltSlotBlocks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocallyBuiltSlotBlocks {
    return new LocallyBuiltSlotBlocks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocallyBuiltSlotBlocks {
    return new LocallyBuiltSlotBlocks().fromJsonString(jsonString, options);
  }

  static equals(a: LocallyBuiltSlotBlocks | PlainMessage<LocallyBuiltSlotBlocks> | undefined, b: LocallyBuiltSlotBlocks | PlainMessage<LocallyBuiltSlotBlocks> | undefined): boolean {
    return proto3.util.equals(LocallyBuiltSlotBlocks, a, b);
  }
}

/**
 * Request for GetRecentLocallyBuiltBlocks
 *
 * @generated from message beacon_slots.GetRecentLocallyBuiltBlocksRequest
 */
export class GetRecentLocallyBuiltBlocksRequest extends Message<GetRecentLocallyBuiltBlocksRequest> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  constructor(data?: PartialMessage<GetRecentLocallyBuiltBlocksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.GetRecentLocallyBuiltBlocksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecentLocallyBuiltBlocksRequest {
    return new GetRecentLocallyBuiltBlocksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecentLocallyBuiltBlocksRequest {
    return new GetRecentLocallyBuiltBlocksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecentLocallyBuiltBlocksRequest {
    return new GetRecentLocallyBuiltBlocksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecentLocallyBuiltBlocksRequest | PlainMessage<GetRecentLocallyBuiltBlocksRequest> | undefined, b: GetRecentLocallyBuiltBlocksRequest | PlainMessage<GetRecentLocallyBuiltBlocksRequest> | undefined): boolean {
    return proto3.util.equals(GetRecentLocallyBuiltBlocksRequest, a, b);
  }
}

/**
 * Response for GetRecentLocallyBuiltBlocks
 *
 * @generated from message beacon_slots.GetRecentLocallyBuiltBlocksResponse
 */
export class GetRecentLocallyBuiltBlocksResponse extends Message<GetRecentLocallyBuiltBlocksResponse> {
  /**
   * @generated from field: repeated beacon_slots.LocallyBuiltSlotBlocks slot_blocks = 1;
   */
  slotBlocks: LocallyBuiltSlotBlocks[] = [];

  constructor(data?: PartialMessage<GetRecentLocallyBuiltBlocksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.GetRecentLocallyBuiltBlocksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_blocks", kind: "message", T: LocallyBuiltSlotBlocks, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecentLocallyBuiltBlocksResponse {
    return new GetRecentLocallyBuiltBlocksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecentLocallyBuiltBlocksResponse {
    return new GetRecentLocallyBuiltBlocksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecentLocallyBuiltBlocksResponse {
    return new GetRecentLocallyBuiltBlocksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecentLocallyBuiltBlocksResponse | PlainMessage<GetRecentLocallyBuiltBlocksResponse> | undefined, b: GetRecentLocallyBuiltBlocksResponse | PlainMessage<GetRecentLocallyBuiltBlocksResponse> | undefined): boolean {
    return proto3.util.equals(GetRecentLocallyBuiltBlocksResponse, a, b);
  }
}

/**
 * Request for GetRecentValidatorBlocks
 *
 * @generated from message beacon_slots.GetRecentValidatorBlocksRequest
 */
export class GetRecentValidatorBlocksRequest extends Message<GetRecentValidatorBlocksRequest> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  constructor(data?: PartialMessage<GetRecentValidatorBlocksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.GetRecentValidatorBlocksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecentValidatorBlocksRequest {
    return new GetRecentValidatorBlocksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecentValidatorBlocksRequest {
    return new GetRecentValidatorBlocksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecentValidatorBlocksRequest {
    return new GetRecentValidatorBlocksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecentValidatorBlocksRequest | PlainMessage<GetRecentValidatorBlocksRequest> | undefined, b: GetRecentValidatorBlocksRequest | PlainMessage<GetRecentValidatorBlocksRequest> | undefined): boolean {
    return proto3.util.equals(GetRecentValidatorBlocksRequest, a, b);
  }
}

/**
 * Response for GetRecentValidatorBlocks
 *
 * @generated from message beacon_slots.GetRecentValidatorBlocksResponse
 */
export class GetRecentValidatorBlocksResponse extends Message<GetRecentValidatorBlocksResponse> {
  /**
   * @generated from field: repeated beacon_slots.LocallyBuiltSlotBlocks slot_blocks = 1;
   */
  slotBlocks: LocallyBuiltSlotBlocks[] = [];

  constructor(data?: PartialMessage<GetRecentValidatorBlocksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_slots.GetRecentValidatorBlocksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slot_blocks", kind: "message", T: LocallyBuiltSlotBlocks, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRecentValidatorBlocksResponse {
    return new GetRecentValidatorBlocksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRecentValidatorBlocksResponse {
    return new GetRecentValidatorBlocksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRecentValidatorBlocksResponse {
    return new GetRecentValidatorBlocksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRecentValidatorBlocksResponse | PlainMessage<GetRecentValidatorBlocksResponse> | undefined, b: GetRecentValidatorBlocksResponse | PlainMessage<GetRecentValidatorBlocksResponse> | undefined): boolean {
    return proto3.util.equals(GetRecentValidatorBlocksResponse, a, b);
  }
}

