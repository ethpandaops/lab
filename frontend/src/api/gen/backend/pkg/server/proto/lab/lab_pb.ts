// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file backend/pkg/server/proto/lab/lab.proto (package lab, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * FrontendConfig is the frontend configuration for the lab. Data here is used to populate the frontend UI,
 * and is exposed publically.
 *
 * @generated from message lab.FrontendConfig
 */
export class FrontendConfig extends Message<FrontendConfig> {
  /**
   * @generated from field: lab.FrontendConfig.Config config = 1;
   */
  config?: FrontendConfig_Config;

  constructor(data?: PartialMessage<FrontendConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "config", kind: "message", T: FrontendConfig_Config },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig {
    return new FrontendConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig {
    return new FrontendConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig {
    return new FrontendConfig().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig | PlainMessage<FrontendConfig> | undefined, b: FrontendConfig | PlainMessage<FrontendConfig> | undefined): boolean {
    return proto3.util.equals(FrontendConfig, a, b);
  }
}

/**
 * Config is the configuration for the lab
 *
 * @generated from message lab.FrontendConfig.Config
 */
export class FrontendConfig_Config extends Message<FrontendConfig_Config> {
  /**
   * @generated from field: lab.FrontendConfig.Modules modules = 1;
   */
  modules?: FrontendConfig_Modules;

  /**
   * @generated from field: lab.FrontendConfig.EthereumConfig ethereum = 2;
   */
  ethereum?: FrontendConfig_EthereumConfig;

  constructor(data?: PartialMessage<FrontendConfig_Config>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.Config";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "modules", kind: "message", T: FrontendConfig_Modules },
    { no: 2, name: "ethereum", kind: "message", T: FrontendConfig_EthereumConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_Config {
    return new FrontendConfig_Config().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_Config {
    return new FrontendConfig_Config().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_Config {
    return new FrontendConfig_Config().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_Config | PlainMessage<FrontendConfig_Config> | undefined, b: FrontendConfig_Config | PlainMessage<FrontendConfig_Config> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_Config, a, b);
  }
}

/**
 * Modules is the configuration for the modules
 *
 * @generated from message lab.FrontendConfig.Modules
 */
export class FrontendConfig_Modules extends Message<FrontendConfig_Modules> {
  /**
   * @generated from field: lab.FrontendConfig.BeaconChainTimingsModule beacon_chain_timings = 1;
   */
  beaconChainTimings?: FrontendConfig_BeaconChainTimingsModule;

  /**
   * @generated from field: lab.FrontendConfig.BeaconModule beacon = 3;
   */
  beacon?: FrontendConfig_BeaconModule;

  constructor(data?: PartialMessage<FrontendConfig_Modules>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.Modules";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "beacon_chain_timings", kind: "message", T: FrontendConfig_BeaconChainTimingsModule },
    { no: 3, name: "beacon", kind: "message", T: FrontendConfig_BeaconModule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_Modules {
    return new FrontendConfig_Modules().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_Modules {
    return new FrontendConfig_Modules().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_Modules {
    return new FrontendConfig_Modules().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_Modules | PlainMessage<FrontendConfig_Modules> | undefined, b: FrontendConfig_Modules | PlainMessage<FrontendConfig_Modules> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_Modules, a, b);
  }
}

/**
 * BeaconChainTimingsModule represents the beacon chain timings module configuration
 *
 * @generated from message lab.FrontendConfig.BeaconChainTimingsModule
 */
export class FrontendConfig_BeaconChainTimingsModule extends Message<FrontendConfig_BeaconChainTimingsModule> {
  /**
   * @generated from field: repeated string networks = 1;
   */
  networks: string[] = [];

  /**
   * @generated from field: repeated lab.FrontendConfig.TimeWindow time_windows = 2;
   */
  timeWindows: FrontendConfig_TimeWindow[] = [];

  /**
   * @generated from field: string path_prefix = 3;
   */
  pathPrefix = "";

  /**
   * @generated from field: bool enabled = 4;
   */
  enabled = false;

  constructor(data?: PartialMessage<FrontendConfig_BeaconChainTimingsModule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.BeaconChainTimingsModule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "networks", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "time_windows", kind: "message", T: FrontendConfig_TimeWindow, repeated: true },
    { no: 3, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_BeaconChainTimingsModule {
    return new FrontendConfig_BeaconChainTimingsModule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_BeaconChainTimingsModule {
    return new FrontendConfig_BeaconChainTimingsModule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_BeaconChainTimingsModule {
    return new FrontendConfig_BeaconChainTimingsModule().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_BeaconChainTimingsModule | PlainMessage<FrontendConfig_BeaconChainTimingsModule> | undefined, b: FrontendConfig_BeaconChainTimingsModule | PlainMessage<FrontendConfig_BeaconChainTimingsModule> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_BeaconChainTimingsModule, a, b);
  }
}

/**
 * BeaconModule represents the beacon module configuration
 *
 * @generated from message lab.FrontendConfig.BeaconModule
 */
export class FrontendConfig_BeaconModule extends Message<FrontendConfig_BeaconModule> {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: string path_prefix = 3;
   */
  pathPrefix = "";

  /**
   * @generated from field: map<string, lab.FrontendConfig.BeaconNetworkConfig> networks = 4;
   */
  networks: { [key: string]: FrontendConfig_BeaconNetworkConfig } = {};

  constructor(data?: PartialMessage<FrontendConfig_BeaconModule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.BeaconModule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "networks", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: FrontendConfig_BeaconNetworkConfig} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_BeaconModule {
    return new FrontendConfig_BeaconModule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_BeaconModule {
    return new FrontendConfig_BeaconModule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_BeaconModule {
    return new FrontendConfig_BeaconModule().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_BeaconModule | PlainMessage<FrontendConfig_BeaconModule> | undefined, b: FrontendConfig_BeaconModule | PlainMessage<FrontendConfig_BeaconModule> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_BeaconModule, a, b);
  }
}

/**
 * TimeWindow represents a time window configuration
 *
 * @generated from message lab.FrontendConfig.TimeWindow
 */
export class FrontendConfig_TimeWindow extends Message<FrontendConfig_TimeWindow> {
  /**
   * @generated from field: string file = 1;
   */
  file = "";

  /**
   * @generated from field: string step = 2;
   */
  step = "";

  /**
   * @generated from field: string label = 3;
   */
  label = "";

  /**
   * @generated from field: string range = 4;
   */
  range = "";

  constructor(data?: PartialMessage<FrontendConfig_TimeWindow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.TimeWindow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "step", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_TimeWindow {
    return new FrontendConfig_TimeWindow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_TimeWindow {
    return new FrontendConfig_TimeWindow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_TimeWindow {
    return new FrontendConfig_TimeWindow().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_TimeWindow | PlainMessage<FrontendConfig_TimeWindow> | undefined, b: FrontendConfig_TimeWindow | PlainMessage<FrontendConfig_TimeWindow> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_TimeWindow, a, b);
  }
}

/**
 * BeaconNetworkConfig represents beacon network-specific configuration
 *
 * @generated from message lab.FrontendConfig.BeaconNetworkConfig
 */
export class FrontendConfig_BeaconNetworkConfig extends Message<FrontendConfig_BeaconNetworkConfig> {
  /**
   * @generated from field: int32 head_lag_slots = 1;
   */
  headLagSlots = 0;

  /**
   * @generated from field: int32 backlog_days = 2;
   */
  backlogDays = 0;

  constructor(data?: PartialMessage<FrontendConfig_BeaconNetworkConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.BeaconNetworkConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "head_lag_slots", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "backlog_days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_BeaconNetworkConfig {
    return new FrontendConfig_BeaconNetworkConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_BeaconNetworkConfig {
    return new FrontendConfig_BeaconNetworkConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_BeaconNetworkConfig {
    return new FrontendConfig_BeaconNetworkConfig().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_BeaconNetworkConfig | PlainMessage<FrontendConfig_BeaconNetworkConfig> | undefined, b: FrontendConfig_BeaconNetworkConfig | PlainMessage<FrontendConfig_BeaconNetworkConfig> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_BeaconNetworkConfig, a, b);
  }
}

/**
 * EthereumConfig represents Ethereum-specific configuration
 *
 * @generated from message lab.FrontendConfig.EthereumConfig
 */
export class FrontendConfig_EthereumConfig extends Message<FrontendConfig_EthereumConfig> {
  /**
   * @generated from field: map<string, lab.FrontendConfig.Network> networks = 1;
   */
  networks: { [key: string]: FrontendConfig_Network } = {};

  constructor(data?: PartialMessage<FrontendConfig_EthereumConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.EthereumConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "networks", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: FrontendConfig_Network} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_EthereumConfig {
    return new FrontendConfig_EthereumConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_EthereumConfig {
    return new FrontendConfig_EthereumConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_EthereumConfig {
    return new FrontendConfig_EthereumConfig().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_EthereumConfig | PlainMessage<FrontendConfig_EthereumConfig> | undefined, b: FrontendConfig_EthereumConfig | PlainMessage<FrontendConfig_EthereumConfig> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_EthereumConfig, a, b);
  }
}

/**
 * Network represents an Ethereum network configuration
 *
 * @generated from message lab.FrontendConfig.Network
 */
export class FrontendConfig_Network extends Message<FrontendConfig_Network> {
  /**
   * @generated from field: int64 genesis_time = 1;
   */
  genesisTime = protoInt64.zero;

  /**
   * @generated from field: lab.FrontendConfig.ForkConfig forks = 2;
   */
  forks?: FrontendConfig_ForkConfig;

  constructor(data?: PartialMessage<FrontendConfig_Network>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.Network";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "genesis_time", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "forks", kind: "message", T: FrontendConfig_ForkConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_Network {
    return new FrontendConfig_Network().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_Network {
    return new FrontendConfig_Network().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_Network {
    return new FrontendConfig_Network().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_Network | PlainMessage<FrontendConfig_Network> | undefined, b: FrontendConfig_Network | PlainMessage<FrontendConfig_Network> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_Network, a, b);
  }
}

/**
 * ForkConfig represents fork configurations
 *
 * @generated from message lab.FrontendConfig.ForkConfig
 */
export class FrontendConfig_ForkConfig extends Message<FrontendConfig_ForkConfig> {
  /**
   * @generated from field: lab.FrontendConfig.ConsensusConfig consensus = 1;
   */
  consensus?: FrontendConfig_ConsensusConfig;

  constructor(data?: PartialMessage<FrontendConfig_ForkConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.ForkConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "consensus", kind: "message", T: FrontendConfig_ConsensusConfig },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_ForkConfig {
    return new FrontendConfig_ForkConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_ForkConfig {
    return new FrontendConfig_ForkConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_ForkConfig {
    return new FrontendConfig_ForkConfig().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_ForkConfig | PlainMessage<FrontendConfig_ForkConfig> | undefined, b: FrontendConfig_ForkConfig | PlainMessage<FrontendConfig_ForkConfig> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_ForkConfig, a, b);
  }
}

/**
 * ConsensusConfig represents consensus layer fork configurations
 *
 * @generated from message lab.FrontendConfig.ConsensusConfig
 */
export class FrontendConfig_ConsensusConfig extends Message<FrontendConfig_ConsensusConfig> {
  /**
   * @generated from field: lab.FrontendConfig.ForkDetails electra = 1;
   */
  electra?: FrontendConfig_ForkDetails;

  constructor(data?: PartialMessage<FrontendConfig_ConsensusConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.ConsensusConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "electra", kind: "message", T: FrontendConfig_ForkDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_ConsensusConfig {
    return new FrontendConfig_ConsensusConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_ConsensusConfig {
    return new FrontendConfig_ConsensusConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_ConsensusConfig {
    return new FrontendConfig_ConsensusConfig().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_ConsensusConfig | PlainMessage<FrontendConfig_ConsensusConfig> | undefined, b: FrontendConfig_ConsensusConfig | PlainMessage<FrontendConfig_ConsensusConfig> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_ConsensusConfig, a, b);
  }
}

/**
 * ForkDetails represents details about a specific fork
 *
 * @generated from message lab.FrontendConfig.ForkDetails
 */
export class FrontendConfig_ForkDetails extends Message<FrontendConfig_ForkDetails> {
  /**
   * @generated from field: int64 epoch = 1;
   */
  epoch = protoInt64.zero;

  /**
   * @generated from field: map<string, string> min_client_versions = 2;
   */
  minClientVersions: { [key: string]: string } = {};

  constructor(data?: PartialMessage<FrontendConfig_ForkDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lab.FrontendConfig.ForkDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epoch", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "min_client_versions", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FrontendConfig_ForkDetails {
    return new FrontendConfig_ForkDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FrontendConfig_ForkDetails {
    return new FrontendConfig_ForkDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FrontendConfig_ForkDetails {
    return new FrontendConfig_ForkDetails().fromJsonString(jsonString, options);
  }

  static equals(a: FrontendConfig_ForkDetails | PlainMessage<FrontendConfig_ForkDetails> | undefined, b: FrontendConfig_ForkDetails | PlainMessage<FrontendConfig_ForkDetails> | undefined): boolean {
    return proto3.util.equals(FrontendConfig_ForkDetails, a, b);
  }
}

