// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file backend/pkg/server/proto/xatu_cbt/xatu_cbt.proto (package xatu_cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message xatu_cbt.GetNetworksRequest
 */
export class GetNetworksRequest extends Message<GetNetworksRequest> {
  constructor(data?: PartialMessage<GetNetworksRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_cbt.GetNetworksRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNetworksRequest {
    return new GetNetworksRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNetworksRequest {
    return new GetNetworksRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNetworksRequest {
    return new GetNetworksRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNetworksRequest | PlainMessage<GetNetworksRequest> | undefined, b: GetNetworksRequest | PlainMessage<GetNetworksRequest> | undefined): boolean {
    return proto3.util.equals(GetNetworksRequest, a, b);
  }
}

/**
 * @generated from message xatu_cbt.GetNetworksResponse
 */
export class GetNetworksResponse extends Message<GetNetworksResponse> {
  /**
   * @generated from field: repeated xatu_cbt.NetworkInfo networks = 1;
   */
  networks: NetworkInfo[] = [];

  constructor(data?: PartialMessage<GetNetworksResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_cbt.GetNetworksResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "networks", kind: "message", T: NetworkInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNetworksResponse {
    return new GetNetworksResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNetworksResponse {
    return new GetNetworksResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNetworksResponse {
    return new GetNetworksResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNetworksResponse | PlainMessage<GetNetworksResponse> | undefined, b: GetNetworksResponse | PlainMessage<GetNetworksResponse> | undefined): boolean {
    return proto3.util.equals(GetNetworksResponse, a, b);
  }
}

/**
 * @generated from message xatu_cbt.NetworkInfo
 */
export class NetworkInfo extends Message<NetworkInfo> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool enabled = 2;
   */
  enabled = false;

  constructor(data?: PartialMessage<NetworkInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_cbt.NetworkInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NetworkInfo {
    return new NetworkInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NetworkInfo {
    return new NetworkInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NetworkInfo {
    return new NetworkInfo().fromJsonString(jsonString, options);
  }

  static equals(a: NetworkInfo | PlainMessage<NetworkInfo> | undefined, b: NetworkInfo | PlainMessage<NetworkInfo> | undefined): boolean {
    return proto3.util.equals(NetworkInfo, a, b);
  }
}

/**
 * @generated from message xatu_cbt.GetContributorsRequest
 */
export class GetContributorsRequest extends Message<GetContributorsRequest> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  constructor(data?: PartialMessage<GetContributorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_cbt.GetContributorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContributorsRequest {
    return new GetContributorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContributorsRequest {
    return new GetContributorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContributorsRequest {
    return new GetContributorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetContributorsRequest | PlainMessage<GetContributorsRequest> | undefined, b: GetContributorsRequest | PlainMessage<GetContributorsRequest> | undefined): boolean {
    return proto3.util.equals(GetContributorsRequest, a, b);
  }
}

/**
 * @generated from message xatu_cbt.GetContributorsResponse
 */
export class GetContributorsResponse extends Message<GetContributorsResponse> {
  /**
   * @generated from field: repeated xatu_cbt.Contributor contributors = 1;
   */
  contributors: Contributor[] = [];

  constructor(data?: PartialMessage<GetContributorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_cbt.GetContributorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contributors", kind: "message", T: Contributor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContributorsResponse {
    return new GetContributorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContributorsResponse {
    return new GetContributorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContributorsResponse {
    return new GetContributorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetContributorsResponse | PlainMessage<GetContributorsResponse> | undefined, b: GetContributorsResponse | PlainMessage<GetContributorsResponse> | undefined): boolean {
    return proto3.util.equals(GetContributorsResponse, a, b);
  }
}

/**
 * @generated from message xatu_cbt.Contributor
 */
export class Contributor extends Message<Contributor> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string node_id = 2;
   */
  nodeId = "";

  /**
   * individual, internal, unclassified
   *
   * @generated from field: string classification = 3;
   */
  classification = "";

  /**
   * @generated from field: string meta_client_name = 4;
   */
  metaClientName = "";

  /**
   * @generated from field: string meta_client_version = 5;
   */
  metaClientVersion = "";

  /**
   * @generated from field: string meta_client_implementation = 6;
   */
  metaClientImplementation = "";

  /**
   * @generated from field: string meta_client_geo_city = 7;
   */
  metaClientGeoCity = "";

  /**
   * @generated from field: string meta_client_geo_country = 8;
   */
  metaClientGeoCountry = "";

  /**
   * @generated from field: string meta_client_geo_country_code = 9;
   */
  metaClientGeoCountryCode = "";

  /**
   * @generated from field: string meta_client_geo_continent_code = 10;
   */
  metaClientGeoContinentCode = "";

  /**
   * @generated from field: string meta_consensus_version = 11;
   */
  metaConsensusVersion = "";

  /**
   * @generated from field: string meta_consensus_implementation = 12;
   */
  metaConsensusImplementation = "";

  /**
   * @generated from field: string last_seen_date_time = 13;
   */
  lastSeenDateTime = "";

  constructor(data?: PartialMessage<Contributor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_cbt.Contributor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "node_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "classification", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "meta_client_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "meta_client_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "meta_client_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "meta_client_geo_city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "meta_client_geo_country", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "meta_client_geo_country_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "meta_client_geo_continent_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "meta_consensus_version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "meta_consensus_implementation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "last_seen_date_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contributor {
    return new Contributor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contributor {
    return new Contributor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contributor {
    return new Contributor().fromJsonString(jsonString, options);
  }

  static equals(a: Contributor | PlainMessage<Contributor> | undefined, b: Contributor | PlainMessage<Contributor> | undefined): boolean {
    return proto3.util.equals(Contributor, a, b);
  }
}

