// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file backend/pkg/server/proto/xatu_cbt/xatu_cbt.proto (package xatu_cbt, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * GetDataAvailabilityRequest defines the request for checking data availability across tables.
 *
 * @generated from message xatu_cbt.GetDataAvailabilityRequest
 */
export class GetDataAvailabilityRequest extends Message<GetDataAvailabilityRequest> {
  /**
   * List of transformation tables to check for availability.
   * Format: table names without the network prefix (e.g., "fct_attestation_correctness_head").
   *
   * @generated from field: repeated string tables = 1;
   */
  tables: string[] = [];

  constructor(data?: PartialMessage<GetDataAvailabilityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_cbt.GetDataAvailabilityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tables", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataAvailabilityRequest {
    return new GetDataAvailabilityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataAvailabilityRequest {
    return new GetDataAvailabilityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataAvailabilityRequest {
    return new GetDataAvailabilityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataAvailabilityRequest | PlainMessage<GetDataAvailabilityRequest> | undefined, b: GetDataAvailabilityRequest | PlainMessage<GetDataAvailabilityRequest> | undefined): boolean {
    return proto3.util.equals(GetDataAvailabilityRequest, a, b);
  }
}

/**
 * GetDataAvailabilityResponse returns the data availability information.
 *
 * @generated from message xatu_cbt.GetDataAvailabilityResponse
 */
export class GetDataAvailabilityResponse extends Message<GetDataAvailabilityResponse> {
  /**
   * Earliest available slot number.
   *
   * @generated from field: uint64 min_slot = 1;
   */
  minSlot = protoInt64.zero;

  /**
   * Latest available slot number.
   *
   * @generated from field: uint64 max_slot = 2;
   */
  maxSlot = protoInt64.zero;

  constructor(data?: PartialMessage<GetDataAvailabilityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "xatu_cbt.GetDataAvailabilityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min_slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "max_slot", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDataAvailabilityResponse {
    return new GetDataAvailabilityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDataAvailabilityResponse {
    return new GetDataAvailabilityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDataAvailabilityResponse {
    return new GetDataAvailabilityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDataAvailabilityResponse | PlainMessage<GetDataAvailabilityResponse> | undefined, b: GetDataAvailabilityResponse | PlainMessage<GetDataAvailabilityResponse> | undefined): boolean {
    return proto3.util.equals(GetDataAvailabilityResponse, a, b);
  }
}

