// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file backend/pkg/server/proto/beacon_chain_timings/beacon_chain_timings.proto (package beacon_chain_timings, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * TimeWindowConfig represents a time window for processing
 *
 * @generated from message beacon_chain_timings.TimeWindowConfig
 */
export class TimeWindowConfig extends Message<TimeWindowConfig> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string file = 2;
   */
  file = "";

  /**
   * Duration in milliseconds
   *
   * @generated from field: int64 range_ms = 3;
   */
  rangeMs = protoInt64.zero;

  /**
   * Duration in milliseconds
   *
   * @generated from field: int64 step_ms = 4;
   */
  stepMs = protoInt64.zero;

  constructor(data?: PartialMessage<TimeWindowConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.TimeWindowConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "range_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "step_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeWindowConfig {
    return new TimeWindowConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeWindowConfig {
    return new TimeWindowConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeWindowConfig {
    return new TimeWindowConfig().fromJsonString(jsonString, options);
  }

  static equals(a: TimeWindowConfig | PlainMessage<TimeWindowConfig> | undefined, b: TimeWindowConfig | PlainMessage<TimeWindowConfig> | undefined): boolean {
    return proto3.util.equals(TimeWindowConfig, a, b);
  }
}

/**
 * @generated from message beacon_chain_timings.DataProcessorParams
 */
export class DataProcessorParams extends Message<DataProcessorParams> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: string window_name = 2;
   */
  windowName = "";

  constructor(data?: PartialMessage<DataProcessorParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.DataProcessorParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "window_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataProcessorParams {
    return new DataProcessorParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataProcessorParams {
    return new DataProcessorParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataProcessorParams {
    return new DataProcessorParams().fromJsonString(jsonString, options);
  }

  static equals(a: DataProcessorParams | PlainMessage<DataProcessorParams> | undefined, b: DataProcessorParams | PlainMessage<DataProcessorParams> | undefined): boolean {
    return proto3.util.equals(DataProcessorParams, a, b);
  }
}

/**
 * @generated from message beacon_chain_timings.BlockTimingsProcessorParams
 */
export class BlockTimingsProcessorParams extends Message<BlockTimingsProcessorParams> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: string window_name = 2;
   */
  windowName = "";

  constructor(data?: PartialMessage<BlockTimingsProcessorParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.BlockTimingsProcessorParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "window_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockTimingsProcessorParams {
    return new BlockTimingsProcessorParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockTimingsProcessorParams {
    return new BlockTimingsProcessorParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockTimingsProcessorParams {
    return new BlockTimingsProcessorParams().fromJsonString(jsonString, options);
  }

  static equals(a: BlockTimingsProcessorParams | PlainMessage<BlockTimingsProcessorParams> | undefined, b: BlockTimingsProcessorParams | PlainMessage<BlockTimingsProcessorParams> | undefined): boolean {
    return proto3.util.equals(BlockTimingsProcessorParams, a, b);
  }
}

/**
 * @generated from message beacon_chain_timings.SizeCDFProcessorParams
 */
export class SizeCDFProcessorParams extends Message<SizeCDFProcessorParams> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: string window_name = 2;
   */
  windowName = "";

  constructor(data?: PartialMessage<SizeCDFProcessorParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.SizeCDFProcessorParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "window_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SizeCDFProcessorParams {
    return new SizeCDFProcessorParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SizeCDFProcessorParams {
    return new SizeCDFProcessorParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SizeCDFProcessorParams {
    return new SizeCDFProcessorParams().fromJsonString(jsonString, options);
  }

  static equals(a: SizeCDFProcessorParams | PlainMessage<SizeCDFProcessorParams> | undefined, b: SizeCDFProcessorParams | PlainMessage<SizeCDFProcessorParams> | undefined): boolean {
    return proto3.util.equals(SizeCDFProcessorParams, a, b);
  }
}

/**
 * ProcessorState tracks the processing state for a specific processor
 *
 * @generated from message beacon_chain_timings.ProcessorState
 */
export class ProcessorState extends Message<ProcessorState> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: google.protobuf.Timestamp last_processed = 2;
   */
  lastProcessed?: Timestamp;

  constructor(data?: PartialMessage<ProcessorState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.ProcessorState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_processed", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessorState {
    return new ProcessorState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessorState {
    return new ProcessorState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessorState {
    return new ProcessorState().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessorState | PlainMessage<ProcessorState> | undefined, b: ProcessorState | PlainMessage<ProcessorState> | undefined): boolean {
    return proto3.util.equals(ProcessorState, a, b);
  }
}

/**
 * TimingData represents block timing statistics in time windows
 *
 * @generated from message beacon_chain_timings.TimingData
 */
export class TimingData extends Message<TimingData> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: repeated int64 timestamps = 3;
   */
  timestamps: bigint[] = [];

  /**
   * @generated from field: repeated double mins = 4;
   */
  mins: number[] = [];

  /**
   * @generated from field: repeated double maxs = 5;
   */
  maxs: number[] = [];

  /**
   * @generated from field: repeated double avgs = 6;
   */
  avgs: number[] = [];

  /**
   * @generated from field: repeated double p05s = 7;
   */
  p05s: number[] = [];

  /**
   * @generated from field: repeated double p50s = 8;
   */
  p50s: number[] = [];

  /**
   * @generated from field: repeated double p95s = 9;
   */
  p95s: number[] = [];

  /**
   * @generated from field: repeated int64 blocks = 10;
   */
  blocks: bigint[] = [];

  /**
   * validator -> timing categories
   *
   * @generated from field: map<string, beacon_chain_timings.TimingData.ValidatorCategory> validators = 11;
   */
  validators: { [key: string]: TimingData_ValidatorCategory } = {};

  constructor(data?: PartialMessage<TimingData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.TimingData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "timestamps", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 4, name: "mins", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 5, name: "maxs", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 6, name: "avgs", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 7, name: "p05s", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 8, name: "p50s", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 9, name: "p95s", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 10, name: "blocks", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 11, name: "validators", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: TimingData_ValidatorCategory} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimingData {
    return new TimingData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimingData {
    return new TimingData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimingData {
    return new TimingData().fromJsonString(jsonString, options);
  }

  static equals(a: TimingData | PlainMessage<TimingData> | undefined, b: TimingData | PlainMessage<TimingData> | undefined): boolean {
    return proto3.util.equals(TimingData, a, b);
  }
}

/**
 * Validator timing data
 *
 * @generated from message beacon_chain_timings.TimingData.ValidatorCategory
 */
export class TimingData_ValidatorCategory extends Message<TimingData_ValidatorCategory> {
  /**
   * timing category -> count
   *
   * @generated from field: map<string, int32> categories = 1;
   */
  categories: { [key: string]: number } = {};

  constructor(data?: PartialMessage<TimingData_ValidatorCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.TimingData.ValidatorCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categories", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 5 /* ScalarType.INT32 */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimingData_ValidatorCategory {
    return new TimingData_ValidatorCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimingData_ValidatorCategory {
    return new TimingData_ValidatorCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimingData_ValidatorCategory {
    return new TimingData_ValidatorCategory().fromJsonString(jsonString, options);
  }

  static equals(a: TimingData_ValidatorCategory | PlainMessage<TimingData_ValidatorCategory> | undefined, b: TimingData_ValidatorCategory | PlainMessage<TimingData_ValidatorCategory> | undefined): boolean {
    return proto3.util.equals(TimingData_ValidatorCategory, a, b);
  }
}

/**
 * SizeCDFData represents size CDF (Cumulative Distribution Function) data
 *
 * @generated from message beacon_chain_timings.SizeCDFData
 */
export class SizeCDFData extends Message<SizeCDFData> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: google.protobuf.Timestamp timestamp = 2;
   */
  timestamp?: Timestamp;

  /**
   * @generated from field: repeated int64 sizes_kb = 3;
   */
  sizesKb: bigint[] = [];

  /**
   * @generated from field: map<string, double> mev = 4;
   */
  mev: { [key: string]: number } = {};

  /**
   * @generated from field: map<string, double> non_mev = 5;
   */
  nonMev: { [key: string]: number } = {};

  /**
   * @generated from field: map<string, double> solo_mev = 6;
   */
  soloMev: { [key: string]: number } = {};

  /**
   * @generated from field: map<string, double> solo_non_mev = 7;
   */
  soloNonMev: { [key: string]: number } = {};

  /**
   * @generated from field: map<string, double> all = 8;
   */
  all: { [key: string]: number } = {};

  /**
   * @generated from field: map<string, beacon_chain_timings.SizeCDFData.DoubleList> arrival_times_ms = 9;
   */
  arrivalTimesMs: { [key: string]: SizeCDFData_DoubleList } = {};

  constructor(data?: PartialMessage<SizeCDFData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.SizeCDFData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timestamp", kind: "message", T: Timestamp },
    { no: 3, name: "sizes_kb", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
    { no: 4, name: "mev", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
    { no: 5, name: "non_mev", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
    { no: 6, name: "solo_mev", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
    { no: 7, name: "solo_non_mev", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
    { no: 8, name: "all", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 1 /* ScalarType.DOUBLE */} },
    { no: 9, name: "arrival_times_ms", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: SizeCDFData_DoubleList} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SizeCDFData {
    return new SizeCDFData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SizeCDFData {
    return new SizeCDFData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SizeCDFData {
    return new SizeCDFData().fromJsonString(jsonString, options);
  }

  static equals(a: SizeCDFData | PlainMessage<SizeCDFData> | undefined, b: SizeCDFData | PlainMessage<SizeCDFData> | undefined): boolean {
    return proto3.util.equals(SizeCDFData, a, b);
  }
}

/**
 * @generated from message beacon_chain_timings.SizeCDFData.DoubleList
 */
export class SizeCDFData_DoubleList extends Message<SizeCDFData_DoubleList> {
  /**
   * @generated from field: repeated double values = 1;
   */
  values: number[] = [];

  constructor(data?: PartialMessage<SizeCDFData_DoubleList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.SizeCDFData.DoubleList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "values", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SizeCDFData_DoubleList {
    return new SizeCDFData_DoubleList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SizeCDFData_DoubleList {
    return new SizeCDFData_DoubleList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SizeCDFData_DoubleList {
    return new SizeCDFData_DoubleList().fromJsonString(jsonString, options);
  }

  static equals(a: SizeCDFData_DoubleList | PlainMessage<SizeCDFData_DoubleList> | undefined, b: SizeCDFData_DoubleList | PlainMessage<SizeCDFData_DoubleList> | undefined): boolean {
    return proto3.util.equals(SizeCDFData_DoubleList, a, b);
  }
}

/**
 * Request and response messages for the service methods
 *
 * @generated from message beacon_chain_timings.GetTimingDataRequest
 */
export class GetTimingDataRequest extends Message<GetTimingDataRequest> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: string window_name = 2;
   */
  windowName = "";

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 3;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_time = 4;
   */
  endTime?: Timestamp;

  constructor(data?: PartialMessage<GetTimingDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.GetTimingDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "window_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_time", kind: "message", T: Timestamp },
    { no: 4, name: "end_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimingDataRequest {
    return new GetTimingDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimingDataRequest {
    return new GetTimingDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimingDataRequest {
    return new GetTimingDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimingDataRequest | PlainMessage<GetTimingDataRequest> | undefined, b: GetTimingDataRequest | PlainMessage<GetTimingDataRequest> | undefined): boolean {
    return proto3.util.equals(GetTimingDataRequest, a, b);
  }
}

/**
 * @generated from message beacon_chain_timings.GetTimingDataResponse
 */
export class GetTimingDataResponse extends Message<GetTimingDataResponse> {
  /**
   * @generated from field: repeated beacon_chain_timings.TimingData data = 1;
   */
  data: TimingData[] = [];

  constructor(data?: PartialMessage<GetTimingDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.GetTimingDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: TimingData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimingDataResponse {
    return new GetTimingDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimingDataResponse {
    return new GetTimingDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimingDataResponse {
    return new GetTimingDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimingDataResponse | PlainMessage<GetTimingDataResponse> | undefined, b: GetTimingDataResponse | PlainMessage<GetTimingDataResponse> | undefined): boolean {
    return proto3.util.equals(GetTimingDataResponse, a, b);
  }
}

/**
 * @generated from message beacon_chain_timings.GetSizeCDFDataRequest
 */
export class GetSizeCDFDataRequest extends Message<GetSizeCDFDataRequest> {
  /**
   * @generated from field: string network = 1;
   */
  network = "";

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_time = 3;
   */
  endTime?: Timestamp;

  constructor(data?: PartialMessage<GetSizeCDFDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.GetSizeCDFDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "network", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_time", kind: "message", T: Timestamp },
    { no: 3, name: "end_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSizeCDFDataRequest {
    return new GetSizeCDFDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSizeCDFDataRequest {
    return new GetSizeCDFDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSizeCDFDataRequest {
    return new GetSizeCDFDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSizeCDFDataRequest | PlainMessage<GetSizeCDFDataRequest> | undefined, b: GetSizeCDFDataRequest | PlainMessage<GetSizeCDFDataRequest> | undefined): boolean {
    return proto3.util.equals(GetSizeCDFDataRequest, a, b);
  }
}

/**
 * @generated from message beacon_chain_timings.GetSizeCDFDataResponse
 */
export class GetSizeCDFDataResponse extends Message<GetSizeCDFDataResponse> {
  /**
   * @generated from field: repeated beacon_chain_timings.SizeCDFData data = 1;
   */
  data: SizeCDFData[] = [];

  constructor(data?: PartialMessage<GetSizeCDFDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.GetSizeCDFDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: SizeCDFData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSizeCDFDataResponse {
    return new GetSizeCDFDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSizeCDFDataResponse {
    return new GetSizeCDFDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSizeCDFDataResponse {
    return new GetSizeCDFDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSizeCDFDataResponse | PlainMessage<GetSizeCDFDataResponse> | undefined, b: GetSizeCDFDataResponse | PlainMessage<GetSizeCDFDataResponse> | undefined): boolean {
    return proto3.util.equals(GetSizeCDFDataResponse, a, b);
  }
}

/**
 * State tracks processing state for all data types
 *
 * @generated from message beacon_chain_timings.State
 */
export class State extends Message<State> {
  /**
   * @generated from field: beacon_chain_timings.DataTypeState block_timings = 1;
   */
  blockTimings?: DataTypeState;

  /**
   * @generated from field: beacon_chain_timings.DataTypeState cdf = 2;
   */
  cdf?: DataTypeState;

  constructor(data?: PartialMessage<State>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.State";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "block_timings", kind: "message", T: DataTypeState },
    { no: 2, name: "cdf", kind: "message", T: DataTypeState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): State {
    return new State().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): State {
    return new State().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): State {
    return new State().fromJsonString(jsonString, options);
  }

  static equals(a: State | PlainMessage<State> | undefined, b: State | PlainMessage<State> | undefined): boolean {
    return proto3.util.equals(State, a, b);
  }
}

/**
 * DataTypeState tracks processing state for a specific data type
 * The key in last_processed is a combined network+window key like "network_name/window_file"
 *
 * @generated from message beacon_chain_timings.DataTypeState
 */
export class DataTypeState extends Message<DataTypeState> {
  /**
   * @generated from field: map<string, google.protobuf.Timestamp> last_processed = 1;
   */
  lastProcessed: { [key: string]: Timestamp } = {};

  constructor(data?: PartialMessage<DataTypeState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "beacon_chain_timings.DataTypeState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_processed", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Timestamp} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataTypeState {
    return new DataTypeState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataTypeState {
    return new DataTypeState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataTypeState {
    return new DataTypeState().fromJsonString(jsonString, options);
  }

  static equals(a: DataTypeState | PlainMessage<DataTypeState> | undefined, b: DataTypeState | PlainMessage<DataTypeState> | undefined): boolean {
    return proto3.util.equals(DataTypeState, a, b);
  }
}

