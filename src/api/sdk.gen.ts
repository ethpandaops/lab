// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type {
  FctAddressAccessChunked10000ServiceGetData,
  FctAddressAccessChunked10000ServiceGetErrors,
  FctAddressAccessChunked10000ServiceGetResponses,
  FctAddressAccessChunked10000ServiceListData,
  FctAddressAccessChunked10000ServiceListErrors,
  FctAddressAccessChunked10000ServiceListResponses,
  FctAddressAccessTotalServiceGetData,
  FctAddressAccessTotalServiceGetErrors,
  FctAddressAccessTotalServiceGetResponses,
  FctAddressAccessTotalServiceListData,
  FctAddressAccessTotalServiceListErrors,
  FctAddressAccessTotalServiceListResponses,
  FctAddressStorageSlotChunked10000ServiceGetData,
  FctAddressStorageSlotChunked10000ServiceGetErrors,
  FctAddressStorageSlotChunked10000ServiceGetResponses,
  FctAddressStorageSlotChunked10000ServiceListData,
  FctAddressStorageSlotChunked10000ServiceListErrors,
  FctAddressStorageSlotChunked10000ServiceListResponses,
  FctAddressStorageSlotExpiredTop100ByContractServiceGetData,
  FctAddressStorageSlotExpiredTop100ByContractServiceGetErrors,
  FctAddressStorageSlotExpiredTop100ByContractServiceGetResponses,
  FctAddressStorageSlotExpiredTop100ByContractServiceListData,
  FctAddressStorageSlotExpiredTop100ByContractServiceListErrors,
  FctAddressStorageSlotExpiredTop100ByContractServiceListResponses,
  FctAddressStorageSlotTop100ByContractServiceGetData,
  FctAddressStorageSlotTop100ByContractServiceGetErrors,
  FctAddressStorageSlotTop100ByContractServiceGetResponses,
  FctAddressStorageSlotTop100ByContractServiceListData,
  FctAddressStorageSlotTop100ByContractServiceListErrors,
  FctAddressStorageSlotTop100ByContractServiceListResponses,
  FctAddressStorageSlotTotalServiceGetData,
  FctAddressStorageSlotTotalServiceGetErrors,
  FctAddressStorageSlotTotalServiceGetResponses,
  FctAddressStorageSlotTotalServiceListData,
  FctAddressStorageSlotTotalServiceListErrors,
  FctAddressStorageSlotTotalServiceListResponses,
  FctAttestationCorrectnessByValidatorCanonicalServiceGetData,
  FctAttestationCorrectnessByValidatorCanonicalServiceGetErrors,
  FctAttestationCorrectnessByValidatorCanonicalServiceGetResponses,
  FctAttestationCorrectnessByValidatorCanonicalServiceListData,
  FctAttestationCorrectnessByValidatorCanonicalServiceListErrors,
  FctAttestationCorrectnessByValidatorCanonicalServiceListResponses,
  FctAttestationCorrectnessByValidatorHeadServiceGetData,
  FctAttestationCorrectnessByValidatorHeadServiceGetErrors,
  FctAttestationCorrectnessByValidatorHeadServiceGetResponses,
  FctAttestationCorrectnessByValidatorHeadServiceListData,
  FctAttestationCorrectnessByValidatorHeadServiceListErrors,
  FctAttestationCorrectnessByValidatorHeadServiceListResponses,
  FctAttestationCorrectnessCanonicalServiceGetData,
  FctAttestationCorrectnessCanonicalServiceGetErrors,
  FctAttestationCorrectnessCanonicalServiceGetResponses,
  FctAttestationCorrectnessCanonicalServiceListData,
  FctAttestationCorrectnessCanonicalServiceListErrors,
  FctAttestationCorrectnessCanonicalServiceListResponses,
  FctAttestationCorrectnessHeadServiceGetData,
  FctAttestationCorrectnessHeadServiceGetErrors,
  FctAttestationCorrectnessHeadServiceGetResponses,
  FctAttestationCorrectnessHeadServiceListData,
  FctAttestationCorrectnessHeadServiceListErrors,
  FctAttestationCorrectnessHeadServiceListResponses,
  FctAttestationFirstSeenChunked50MsServiceGetData,
  FctAttestationFirstSeenChunked50MsServiceGetErrors,
  FctAttestationFirstSeenChunked50MsServiceGetResponses,
  FctAttestationFirstSeenChunked50MsServiceListData,
  FctAttestationFirstSeenChunked50MsServiceListErrors,
  FctAttestationFirstSeenChunked50MsServiceListResponses,
  FctBlockBlobCountHeadServiceGetData,
  FctBlockBlobCountHeadServiceGetErrors,
  FctBlockBlobCountHeadServiceGetResponses,
  FctBlockBlobCountHeadServiceListData,
  FctBlockBlobCountHeadServiceListErrors,
  FctBlockBlobCountHeadServiceListResponses,
  FctBlockBlobCountServiceGetData,
  FctBlockBlobCountServiceGetErrors,
  FctBlockBlobCountServiceGetResponses,
  FctBlockBlobCountServiceListData,
  FctBlockBlobCountServiceListErrors,
  FctBlockBlobCountServiceListResponses,
  FctBlockBlobFirstSeenByNodeServiceGetData,
  FctBlockBlobFirstSeenByNodeServiceGetErrors,
  FctBlockBlobFirstSeenByNodeServiceGetResponses,
  FctBlockBlobFirstSeenByNodeServiceListData,
  FctBlockBlobFirstSeenByNodeServiceListErrors,
  FctBlockBlobFirstSeenByNodeServiceListResponses,
  FctBlockFirstSeenByNodeServiceGetData,
  FctBlockFirstSeenByNodeServiceGetErrors,
  FctBlockFirstSeenByNodeServiceGetResponses,
  FctBlockFirstSeenByNodeServiceListData,
  FctBlockFirstSeenByNodeServiceListErrors,
  FctBlockFirstSeenByNodeServiceListResponses,
  FctBlockHeadServiceGetData,
  FctBlockHeadServiceGetErrors,
  FctBlockHeadServiceGetResponses,
  FctBlockHeadServiceListData,
  FctBlockHeadServiceListErrors,
  FctBlockHeadServiceListResponses,
  FctBlockMevHeadServiceGetData,
  FctBlockMevHeadServiceGetErrors,
  FctBlockMevHeadServiceGetResponses,
  FctBlockMevHeadServiceListData,
  FctBlockMevHeadServiceListErrors,
  FctBlockMevHeadServiceListResponses,
  FctBlockMevServiceGetData,
  FctBlockMevServiceGetErrors,
  FctBlockMevServiceGetResponses,
  FctBlockMevServiceListData,
  FctBlockMevServiceListErrors,
  FctBlockMevServiceListResponses,
  FctBlockProposerEntityServiceGetData,
  FctBlockProposerEntityServiceGetErrors,
  FctBlockProposerEntityServiceGetResponses,
  FctBlockProposerEntityServiceListData,
  FctBlockProposerEntityServiceListErrors,
  FctBlockProposerEntityServiceListResponses,
  FctBlockProposerHeadServiceGetData,
  FctBlockProposerHeadServiceGetErrors,
  FctBlockProposerHeadServiceGetResponses,
  FctBlockProposerHeadServiceListData,
  FctBlockProposerHeadServiceListErrors,
  FctBlockProposerHeadServiceListResponses,
  FctBlockProposerServiceGetData,
  FctBlockProposerServiceGetErrors,
  FctBlockProposerServiceGetResponses,
  FctBlockProposerServiceListData,
  FctBlockProposerServiceListErrors,
  FctBlockProposerServiceListResponses,
  FctBlockServiceGetData,
  FctBlockServiceGetErrors,
  FctBlockServiceGetResponses,
  FctBlockServiceListData,
  FctBlockServiceListErrors,
  FctBlockServiceListResponses,
  FctMevBidCountByBuilderServiceGetData,
  FctMevBidCountByBuilderServiceGetErrors,
  FctMevBidCountByBuilderServiceGetResponses,
  FctMevBidCountByBuilderServiceListData,
  FctMevBidCountByBuilderServiceListErrors,
  FctMevBidCountByBuilderServiceListResponses,
  FctMevBidCountByRelayServiceGetData,
  FctMevBidCountByRelayServiceGetErrors,
  FctMevBidCountByRelayServiceGetResponses,
  FctMevBidCountByRelayServiceListData,
  FctMevBidCountByRelayServiceListErrors,
  FctMevBidCountByRelayServiceListResponses,
  FctMevBidHighestValueByBuilderChunked50MsServiceGetData,
  FctMevBidHighestValueByBuilderChunked50MsServiceGetErrors,
  FctMevBidHighestValueByBuilderChunked50MsServiceGetResponses,
  FctMevBidHighestValueByBuilderChunked50MsServiceListData,
  FctMevBidHighestValueByBuilderChunked50MsServiceListErrors,
  FctMevBidHighestValueByBuilderChunked50MsServiceListResponses,
  FctNodeActiveLast24hServiceGetData,
  FctNodeActiveLast24hServiceGetErrors,
  FctNodeActiveLast24hServiceGetResponses,
  FctNodeActiveLast24hServiceListData,
  FctNodeActiveLast24hServiceListErrors,
  FctNodeActiveLast24hServiceListResponses,
  FctPreparedBlockServiceGetData,
  FctPreparedBlockServiceGetErrors,
  FctPreparedBlockServiceGetResponses,
  FctPreparedBlockServiceListData,
  FctPreparedBlockServiceListErrors,
  FctPreparedBlockServiceListResponses,
} from './types.gen';
import {
  zFctAddressAccessChunked10000ServiceGetData,
  zFctAddressAccessChunked10000ServiceGetResponse,
  zFctAddressAccessChunked10000ServiceListData,
  zFctAddressAccessChunked10000ServiceListResponse,
  zFctAddressAccessTotalServiceGetData,
  zFctAddressAccessTotalServiceGetResponse,
  zFctAddressAccessTotalServiceListData,
  zFctAddressAccessTotalServiceListResponse,
  zFctAddressStorageSlotChunked10000ServiceGetData,
  zFctAddressStorageSlotChunked10000ServiceGetResponse,
  zFctAddressStorageSlotChunked10000ServiceListData,
  zFctAddressStorageSlotChunked10000ServiceListResponse,
  zFctAddressStorageSlotExpiredTop100ByContractServiceGetData,
  zFctAddressStorageSlotExpiredTop100ByContractServiceGetResponse,
  zFctAddressStorageSlotExpiredTop100ByContractServiceListData,
  zFctAddressStorageSlotExpiredTop100ByContractServiceListResponse,
  zFctAddressStorageSlotTop100ByContractServiceGetData,
  zFctAddressStorageSlotTop100ByContractServiceGetResponse,
  zFctAddressStorageSlotTop100ByContractServiceListData,
  zFctAddressStorageSlotTop100ByContractServiceListResponse,
  zFctAddressStorageSlotTotalServiceGetData,
  zFctAddressStorageSlotTotalServiceGetResponse,
  zFctAddressStorageSlotTotalServiceListData,
  zFctAddressStorageSlotTotalServiceListResponse,
  zFctAttestationCorrectnessByValidatorCanonicalServiceGetData,
  zFctAttestationCorrectnessByValidatorCanonicalServiceGetResponse,
  zFctAttestationCorrectnessByValidatorCanonicalServiceListData,
  zFctAttestationCorrectnessByValidatorCanonicalServiceListResponse,
  zFctAttestationCorrectnessByValidatorHeadServiceGetData,
  zFctAttestationCorrectnessByValidatorHeadServiceGetResponse,
  zFctAttestationCorrectnessByValidatorHeadServiceListData,
  zFctAttestationCorrectnessByValidatorHeadServiceListResponse,
  zFctAttestationCorrectnessCanonicalServiceGetData,
  zFctAttestationCorrectnessCanonicalServiceGetResponse,
  zFctAttestationCorrectnessCanonicalServiceListData,
  zFctAttestationCorrectnessCanonicalServiceListResponse,
  zFctAttestationCorrectnessHeadServiceGetData,
  zFctAttestationCorrectnessHeadServiceGetResponse,
  zFctAttestationCorrectnessHeadServiceListData,
  zFctAttestationCorrectnessHeadServiceListResponse,
  zFctAttestationFirstSeenChunked50MsServiceGetData,
  zFctAttestationFirstSeenChunked50MsServiceGetResponse,
  zFctAttestationFirstSeenChunked50MsServiceListData,
  zFctAttestationFirstSeenChunked50MsServiceListResponse,
  zFctBlockBlobCountHeadServiceGetData,
  zFctBlockBlobCountHeadServiceGetResponse,
  zFctBlockBlobCountHeadServiceListData,
  zFctBlockBlobCountHeadServiceListResponse,
  zFctBlockBlobCountServiceGetData,
  zFctBlockBlobCountServiceGetResponse,
  zFctBlockBlobCountServiceListData,
  zFctBlockBlobCountServiceListResponse,
  zFctBlockBlobFirstSeenByNodeServiceGetData,
  zFctBlockBlobFirstSeenByNodeServiceGetResponse,
  zFctBlockBlobFirstSeenByNodeServiceListData,
  zFctBlockBlobFirstSeenByNodeServiceListResponse,
  zFctBlockFirstSeenByNodeServiceGetData,
  zFctBlockFirstSeenByNodeServiceGetResponse,
  zFctBlockFirstSeenByNodeServiceListData,
  zFctBlockFirstSeenByNodeServiceListResponse,
  zFctBlockHeadServiceGetData,
  zFctBlockHeadServiceGetResponse,
  zFctBlockHeadServiceListData,
  zFctBlockHeadServiceListResponse,
  zFctBlockMevHeadServiceGetData,
  zFctBlockMevHeadServiceGetResponse,
  zFctBlockMevHeadServiceListData,
  zFctBlockMevHeadServiceListResponse,
  zFctBlockMevServiceGetData,
  zFctBlockMevServiceGetResponse,
  zFctBlockMevServiceListData,
  zFctBlockMevServiceListResponse,
  zFctBlockProposerEntityServiceGetData,
  zFctBlockProposerEntityServiceGetResponse,
  zFctBlockProposerEntityServiceListData,
  zFctBlockProposerEntityServiceListResponse,
  zFctBlockProposerHeadServiceGetData,
  zFctBlockProposerHeadServiceGetResponse,
  zFctBlockProposerHeadServiceListData,
  zFctBlockProposerHeadServiceListResponse,
  zFctBlockProposerServiceGetData,
  zFctBlockProposerServiceGetResponse,
  zFctBlockProposerServiceListData,
  zFctBlockProposerServiceListResponse,
  zFctBlockServiceGetData,
  zFctBlockServiceGetResponse,
  zFctBlockServiceListData,
  zFctBlockServiceListResponse,
  zFctMevBidCountByBuilderServiceGetData,
  zFctMevBidCountByBuilderServiceGetResponse,
  zFctMevBidCountByBuilderServiceListData,
  zFctMevBidCountByBuilderServiceListResponse,
  zFctMevBidCountByRelayServiceGetData,
  zFctMevBidCountByRelayServiceGetResponse,
  zFctMevBidCountByRelayServiceListData,
  zFctMevBidCountByRelayServiceListResponse,
  zFctMevBidHighestValueByBuilderChunked50MsServiceGetData,
  zFctMevBidHighestValueByBuilderChunked50MsServiceGetResponse,
  zFctMevBidHighestValueByBuilderChunked50MsServiceListData,
  zFctMevBidHighestValueByBuilderChunked50MsServiceListResponse,
  zFctNodeActiveLast24hServiceGetData,
  zFctNodeActiveLast24hServiceGetResponse,
  zFctNodeActiveLast24hServiceListData,
  zFctNodeActiveLast24hServiceListResponse,
  zFctPreparedBlockServiceGetData,
  zFctPreparedBlockServiceGetResponse,
  zFctPreparedBlockServiceListData,
  zFctPreparedBlockServiceListResponse,
} from './zod.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressAccessChunked10000ServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAddressAccessChunked10000ServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAddressAccessChunked10000ServiceListResponses,
    FctAddressAccessChunked10000ServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressAccessChunked10000ServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressAccessChunked10000ServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_access_chunked_10000',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by chunk_start_block_number
 */
export const fctAddressAccessChunked10000ServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAddressAccessChunked10000ServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAddressAccessChunked10000ServiceGetResponses,
    FctAddressAccessChunked10000ServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressAccessChunked10000ServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressAccessChunked10000ServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_access_chunked_10000/{chunk_start_block_number}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressAccessTotalServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAddressAccessTotalServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAddressAccessTotalServiceListResponses,
    FctAddressAccessTotalServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressAccessTotalServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressAccessTotalServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_access_total',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by updated_date_time
 */
export const fctAddressAccessTotalServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAddressAccessTotalServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAddressAccessTotalServiceGetResponses,
    FctAddressAccessTotalServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressAccessTotalServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressAccessTotalServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_access_total/{updated_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressStorageSlotChunked10000ServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAddressStorageSlotChunked10000ServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAddressStorageSlotChunked10000ServiceListResponses,
    FctAddressStorageSlotChunked10000ServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressStorageSlotChunked10000ServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressStorageSlotChunked10000ServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_storage_slot_chunked_10000',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by chunk_start_block_number
 */
export const fctAddressStorageSlotChunked10000ServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAddressStorageSlotChunked10000ServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAddressStorageSlotChunked10000ServiceGetResponses,
    FctAddressStorageSlotChunked10000ServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressStorageSlotChunked10000ServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressStorageSlotChunked10000ServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_storage_slot_chunked_10000/{chunk_start_block_number}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressStorageSlotExpiredTop100ByContractServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAddressStorageSlotExpiredTop100ByContractServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAddressStorageSlotExpiredTop100ByContractServiceListResponses,
    FctAddressStorageSlotExpiredTop100ByContractServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressStorageSlotExpiredTop100ByContractServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressStorageSlotExpiredTop100ByContractServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_storage_slot_expired_top_100_by_contract',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by rank
 */
export const fctAddressStorageSlotExpiredTop100ByContractServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAddressStorageSlotExpiredTop100ByContractServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAddressStorageSlotExpiredTop100ByContractServiceGetResponses,
    FctAddressStorageSlotExpiredTop100ByContractServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressStorageSlotExpiredTop100ByContractServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressStorageSlotExpiredTop100ByContractServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_storage_slot_expired_top_100_by_contract/{rank}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressStorageSlotTop100ByContractServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAddressStorageSlotTop100ByContractServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAddressStorageSlotTop100ByContractServiceListResponses,
    FctAddressStorageSlotTop100ByContractServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressStorageSlotTop100ByContractServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressStorageSlotTop100ByContractServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_storage_slot_top_100_by_contract',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by rank
 */
export const fctAddressStorageSlotTop100ByContractServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAddressStorageSlotTop100ByContractServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAddressStorageSlotTop100ByContractServiceGetResponses,
    FctAddressStorageSlotTop100ByContractServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressStorageSlotTop100ByContractServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressStorageSlotTop100ByContractServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_storage_slot_top_100_by_contract/{rank}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressStorageSlotTotalServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAddressStorageSlotTotalServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAddressStorageSlotTotalServiceListResponses,
    FctAddressStorageSlotTotalServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressStorageSlotTotalServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressStorageSlotTotalServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_storage_slot_total',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by updated_date_time
 */
export const fctAddressStorageSlotTotalServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAddressStorageSlotTotalServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAddressStorageSlotTotalServiceGetResponses,
    FctAddressStorageSlotTotalServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAddressStorageSlotTotalServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAddressStorageSlotTotalServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_address_storage_slot_total/{updated_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationCorrectnessByValidatorCanonicalServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAttestationCorrectnessByValidatorCanonicalServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAttestationCorrectnessByValidatorCanonicalServiceListResponses,
    FctAttestationCorrectnessByValidatorCanonicalServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationCorrectnessByValidatorCanonicalServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationCorrectnessByValidatorCanonicalServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_correctness_by_validator_canonical',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationCorrectnessByValidatorCanonicalServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAttestationCorrectnessByValidatorCanonicalServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAttestationCorrectnessByValidatorCanonicalServiceGetResponses,
    FctAttestationCorrectnessByValidatorCanonicalServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationCorrectnessByValidatorCanonicalServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationCorrectnessByValidatorCanonicalServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_correctness_by_validator_canonical/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationCorrectnessByValidatorHeadServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAttestationCorrectnessByValidatorHeadServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAttestationCorrectnessByValidatorHeadServiceListResponses,
    FctAttestationCorrectnessByValidatorHeadServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationCorrectnessByValidatorHeadServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationCorrectnessByValidatorHeadServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_correctness_by_validator_head',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationCorrectnessByValidatorHeadServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAttestationCorrectnessByValidatorHeadServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAttestationCorrectnessByValidatorHeadServiceGetResponses,
    FctAttestationCorrectnessByValidatorHeadServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationCorrectnessByValidatorHeadServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationCorrectnessByValidatorHeadServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_correctness_by_validator_head/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationCorrectnessCanonicalServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAttestationCorrectnessCanonicalServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAttestationCorrectnessCanonicalServiceListResponses,
    FctAttestationCorrectnessCanonicalServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationCorrectnessCanonicalServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationCorrectnessCanonicalServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_correctness_canonical',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationCorrectnessCanonicalServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAttestationCorrectnessCanonicalServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAttestationCorrectnessCanonicalServiceGetResponses,
    FctAttestationCorrectnessCanonicalServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationCorrectnessCanonicalServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationCorrectnessCanonicalServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_correctness_canonical/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationCorrectnessHeadServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAttestationCorrectnessHeadServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAttestationCorrectnessHeadServiceListResponses,
    FctAttestationCorrectnessHeadServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationCorrectnessHeadServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationCorrectnessHeadServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_correctness_head',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationCorrectnessHeadServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAttestationCorrectnessHeadServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAttestationCorrectnessHeadServiceGetResponses,
    FctAttestationCorrectnessHeadServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationCorrectnessHeadServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationCorrectnessHeadServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_correctness_head/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationFirstSeenChunked50MsServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctAttestationFirstSeenChunked50MsServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctAttestationFirstSeenChunked50MsServiceListResponses,
    FctAttestationFirstSeenChunked50MsServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationFirstSeenChunked50MsServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationFirstSeenChunked50MsServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_first_seen_chunked_50ms',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationFirstSeenChunked50MsServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctAttestationFirstSeenChunked50MsServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctAttestationFirstSeenChunked50MsServiceGetResponses,
    FctAttestationFirstSeenChunked50MsServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctAttestationFirstSeenChunked50MsServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctAttestationFirstSeenChunked50MsServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_attestation_first_seen_chunked_50ms/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<FctBlockServiceListResponses, FctBlockServiceListErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zFctBlockServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<FctBlockServiceGetResponses, FctBlockServiceGetErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zFctBlockServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockBlobCountServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockBlobCountServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctBlockBlobCountServiceListResponses,
    FctBlockBlobCountServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockBlobCountServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockBlobCountServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_blob_count',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockBlobCountServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockBlobCountServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctBlockBlobCountServiceGetResponses,
    FctBlockBlobCountServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockBlobCountServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockBlobCountServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_blob_count/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockBlobCountHeadServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockBlobCountHeadServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctBlockBlobCountHeadServiceListResponses,
    FctBlockBlobCountHeadServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockBlobCountHeadServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockBlobCountHeadServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_blob_count_head',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockBlobCountHeadServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockBlobCountHeadServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctBlockBlobCountHeadServiceGetResponses,
    FctBlockBlobCountHeadServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockBlobCountHeadServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockBlobCountHeadServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_blob_count_head/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockBlobFirstSeenByNodeServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockBlobFirstSeenByNodeServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctBlockBlobFirstSeenByNodeServiceListResponses,
    FctBlockBlobFirstSeenByNodeServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockBlobFirstSeenByNodeServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockBlobFirstSeenByNodeServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_blob_first_seen_by_node',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockBlobFirstSeenByNodeServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockBlobFirstSeenByNodeServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctBlockBlobFirstSeenByNodeServiceGetResponses,
    FctBlockBlobFirstSeenByNodeServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockBlobFirstSeenByNodeServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockBlobFirstSeenByNodeServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_blob_first_seen_by_node/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockFirstSeenByNodeServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockFirstSeenByNodeServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctBlockFirstSeenByNodeServiceListResponses,
    FctBlockFirstSeenByNodeServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockFirstSeenByNodeServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockFirstSeenByNodeServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_first_seen_by_node',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockFirstSeenByNodeServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockFirstSeenByNodeServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctBlockFirstSeenByNodeServiceGetResponses,
    FctBlockFirstSeenByNodeServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockFirstSeenByNodeServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockFirstSeenByNodeServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_first_seen_by_node/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockHeadServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockHeadServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<FctBlockHeadServiceListResponses, FctBlockHeadServiceListErrors, ThrowOnError>(
    {
      requestValidator: async data => {
        return await zFctBlockHeadServiceListData.parseAsync(data);
      },
      responseValidator: async data => {
        return await zFctBlockHeadServiceListResponse.parseAsync(data);
      },
      url: '/api/v1/fct_block_head',
      ...options,
    }
  );
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockHeadServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockHeadServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<FctBlockHeadServiceGetResponses, FctBlockHeadServiceGetErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zFctBlockHeadServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockHeadServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_head/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockMevServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockMevServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<FctBlockMevServiceListResponses, FctBlockMevServiceListErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zFctBlockMevServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockMevServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_mev',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockMevServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockMevServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<FctBlockMevServiceGetResponses, FctBlockMevServiceGetErrors, ThrowOnError>({
    requestValidator: async data => {
      return await zFctBlockMevServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockMevServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_mev/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockMevHeadServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockMevHeadServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctBlockMevHeadServiceListResponses,
    FctBlockMevHeadServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockMevHeadServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockMevHeadServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_mev_head',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockMevHeadServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockMevHeadServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctBlockMevHeadServiceGetResponses,
    FctBlockMevHeadServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockMevHeadServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockMevHeadServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_mev_head/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockProposerServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockProposerServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctBlockProposerServiceListResponses,
    FctBlockProposerServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockProposerServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockProposerServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_proposer',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockProposerServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockProposerServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctBlockProposerServiceGetResponses,
    FctBlockProposerServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockProposerServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockProposerServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_proposer/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockProposerEntityServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockProposerEntityServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctBlockProposerEntityServiceListResponses,
    FctBlockProposerEntityServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockProposerEntityServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockProposerEntityServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_proposer_entity',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockProposerEntityServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockProposerEntityServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctBlockProposerEntityServiceGetResponses,
    FctBlockProposerEntityServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockProposerEntityServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockProposerEntityServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_proposer_entity/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockProposerHeadServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctBlockProposerHeadServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctBlockProposerHeadServiceListResponses,
    FctBlockProposerHeadServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockProposerHeadServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockProposerHeadServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_proposer_head',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockProposerHeadServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctBlockProposerHeadServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctBlockProposerHeadServiceGetResponses,
    FctBlockProposerHeadServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctBlockProposerHeadServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctBlockProposerHeadServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_block_proposer_head/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctMevBidCountByBuilderServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctMevBidCountByBuilderServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctMevBidCountByBuilderServiceListResponses,
    FctMevBidCountByBuilderServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctMevBidCountByBuilderServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctMevBidCountByBuilderServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_mev_bid_count_by_builder',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctMevBidCountByBuilderServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctMevBidCountByBuilderServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctMevBidCountByBuilderServiceGetResponses,
    FctMevBidCountByBuilderServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctMevBidCountByBuilderServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctMevBidCountByBuilderServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_mev_bid_count_by_builder/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctMevBidCountByRelayServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctMevBidCountByRelayServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctMevBidCountByRelayServiceListResponses,
    FctMevBidCountByRelayServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctMevBidCountByRelayServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctMevBidCountByRelayServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_mev_bid_count_by_relay',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctMevBidCountByRelayServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctMevBidCountByRelayServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctMevBidCountByRelayServiceGetResponses,
    FctMevBidCountByRelayServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctMevBidCountByRelayServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctMevBidCountByRelayServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_mev_bid_count_by_relay/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctMevBidHighestValueByBuilderChunked50MsServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctMevBidHighestValueByBuilderChunked50MsServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctMevBidHighestValueByBuilderChunked50MsServiceListResponses,
    FctMevBidHighestValueByBuilderChunked50MsServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctMevBidHighestValueByBuilderChunked50MsServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctMevBidHighestValueByBuilderChunked50MsServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_mev_bid_highest_value_by_builder_chunked_50ms',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctMevBidHighestValueByBuilderChunked50MsServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctMevBidHighestValueByBuilderChunked50MsServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctMevBidHighestValueByBuilderChunked50MsServiceGetResponses,
    FctMevBidHighestValueByBuilderChunked50MsServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctMevBidHighestValueByBuilderChunked50MsServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctMevBidHighestValueByBuilderChunked50MsServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_mev_bid_highest_value_by_builder_chunked_50ms/{slot_start_date_time}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctNodeActiveLast24hServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctNodeActiveLast24hServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctNodeActiveLast24hServiceListResponses,
    FctNodeActiveLast24hServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctNodeActiveLast24hServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctNodeActiveLast24hServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_node_active_last_24h',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by meta_client_name
 */
export const fctNodeActiveLast24hServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctNodeActiveLast24hServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctNodeActiveLast24hServiceGetResponses,
    FctNodeActiveLast24hServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctNodeActiveLast24hServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctNodeActiveLast24hServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_node_active_last_24h/{meta_client_name}',
    ...options,
  });
};

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctPreparedBlockServiceList = <ThrowOnError extends boolean = false>(
  options?: Options<FctPreparedBlockServiceListData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    FctPreparedBlockServiceListResponses,
    FctPreparedBlockServiceListErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctPreparedBlockServiceListData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctPreparedBlockServiceListResponse.parseAsync(data);
    },
    url: '/api/v1/fct_prepared_block',
    ...options,
  });
};

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctPreparedBlockServiceGet = <ThrowOnError extends boolean = false>(
  options: Options<FctPreparedBlockServiceGetData, ThrowOnError>
) => {
  return (options.client ?? client).get<
    FctPreparedBlockServiceGetResponses,
    FctPreparedBlockServiceGetErrors,
    ThrowOnError
  >({
    requestValidator: async data => {
      return await zFctPreparedBlockServiceGetData.parseAsync(data);
    },
    responseValidator: async data => {
      return await zFctPreparedBlockServiceGetResponse.parseAsync(data);
    },
    url: '/api/v1/fct_prepared_block/{slot_start_date_time}',
    ...options,
  });
};
