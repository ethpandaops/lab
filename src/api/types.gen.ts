// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
  baseUrl: 'https://cbt-api-hoodi.primary.production.platform.ethpandaops.io' | (string & {});
};

export type FctAddressAccessChunked10000 = {
  /**
   * Start block number of the chunk
   */
  chunk_start_block_number?: number;
  /**
   * Number of accounts first accessed in the chunk
   */
  first_accessed_accounts?: number;
  /**
   * Number of accounts last accessed in the chunk
   */
  last_accessed_accounts?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctAddressAccessTotal = {
  /**
   * Number of expired accounts (not accessed in last 365 days)
   */
  expired_accounts?: number;
  /**
   * Number of expired contracts (not accessed in last 365 days)
   */
  expired_contracts?: number;
  /**
   * Total number of accounts accessed in last 365 days
   */
  total_accounts?: number;
  /**
   * Total number of contract accounts accessed in last 365 days
   */
  total_contract_accounts?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctAddressStorageSlotChunked10000 = {
  /**
   * Start block number of the chunk
   */
  chunk_start_block_number?: number;
  /**
   * Number of slots first accessed in the chunk
   */
  first_accessed_slots?: number;
  /**
   * Number of slots last accessed in the chunk
   */
  last_accessed_slots?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctAddressStorageSlotExpiredTop100ByContract = {
  /**
   * The contract address
   */
  contract_address?: string;
  /**
   * Number of expired storage slots for this contract
   */
  expired_slots?: number;
  /**
   * Rank by expired storage slots (1=highest)
   */
  rank?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctAddressStorageSlotTop100ByContract = {
  /**
   * The contract address
   */
  contract_address?: string;
  /**
   * Rank by total storage slots (1=highest)
   */
  rank?: number;
  /**
   * Total number of storage slots for this contract
   */
  total_storage_slots?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctAddressStorageSlotTotal = {
  /**
   * Number of expired storage slots (not accessed in last 365 days)
   */
  expired_storage_slots?: number;
  /**
   * Total number of storage slots accessed in last 365 days
   */
  total_storage_slots?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctAttestationCorrectnessByValidatorCanonical = {
  /**
   * The index of the validator attesting
   */
  attesting_validator_index?: number;
  /**
   * The beacon block root hash that was attested
   */
  block_root?: string | null;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The distance from the slot when the attestation was included in a block
   */
  inclusion_distance?: number | null;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago
   */
  slot_distance?: number | null;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Can be "canonical", "orphaned" or "missed"
   */
  status?: string;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctAttestationCorrectnessByValidatorHead = {
  /**
   * The index of the validator attesting
   */
  attesting_validator_index?: number;
  /**
   * The beacon block root hash that was attested, null means the attestation was missed
   */
  block_root?: string | null;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc.
   */
  propagation_distance?: number | null;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago
   */
  slot_distance?: number | null;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctAttestationCorrectnessCanonical = {
  /**
   * The beacon block root hash
   */
  block_root?: string | null;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
  /**
   * The number of votes for the block proposed in the current slot
   */
  votes_head?: number | null;
  /**
   * The maximum number of scheduled votes for the block
   */
  votes_max?: number;
  /**
   * The number of votes for any blocks proposed in previous slots
   */
  votes_other?: number | null;
};

export type FctAttestationCorrectnessHead = {
  /**
   * The beacon block root hash
   */
  block_root?: string | null;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
  /**
   * The number of votes for the block proposed in the current slot
   */
  votes_head?: number | null;
  /**
   * The maximum number of scheduled votes for the block
   */
  votes_max?: number;
  /**
   * The number of votes for any blocks proposed in previous slots
   */
  votes_other?: number | null;
};

export type FctAttestationFirstSeenChunked50Ms = {
  /**
   * The number of attestations in this chunk
   */
  attestation_count?: number;
  /**
   * The beacon block root hash that was attested, null means the attestation was missed
   */
  block_root?: string;
  /**
   * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot
   */
  chunk_slot_start_diff?: number;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctBlock = {
  /**
   * The root hash of the beacon block
   */
  block_root?: string;
  /**
   * The total bytes of the beacon block payload
   */
  block_total_bytes?: number | null;
  /**
   * The total bytes of the beacon block payload when compressed using snappy
   */
  block_total_bytes_compressed?: number | null;
  /**
   * The version of the beacon block
   */
  block_version?: string;
  /**
   * The epoch number from beacon block payload
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The block hash of the associated execution block
   */
  eth1_data_block_hash?: string;
  /**
   * The root of the deposit tree in the associated execution block
   */
  eth1_data_deposit_root?: string;
  /**
   * Base fee per gas for execution payload
   */
  execution_payload_base_fee_per_gas?: string | null;
  /**
   * Gas used for blobs in execution payload
   */
  execution_payload_blob_gas_used?: number | null;
  /**
   * The block hash of the execution payload
   */
  execution_payload_block_hash?: string;
  /**
   * The block number of the execution payload
   */
  execution_payload_block_number?: number;
  /**
   * Excess gas used for blobs in execution payload
   */
  execution_payload_excess_blob_gas?: number | null;
  /**
   * The recipient of the fee for this execution payload
   */
  execution_payload_fee_recipient?: string;
  /**
   * Gas limit for execution payload
   */
  execution_payload_gas_limit?: number | null;
  /**
   * Gas used for execution payload
   */
  execution_payload_gas_used?: number | null;
  /**
   * The parent hash of the execution payload
   */
  execution_payload_parent_hash?: string;
  /**
   * The state root of the execution payload
   */
  execution_payload_state_root?: string;
  /**
   * The transaction count of the execution payload
   */
  execution_payload_transactions_count?: number | null;
  /**
   * The transaction total bytes of the execution payload
   */
  execution_payload_transactions_total_bytes?: number | null;
  /**
   * The transaction total bytes of the execution payload when compressed using snappy
   */
  execution_payload_transactions_total_bytes_compressed?: number | null;
  /**
   * The root hash of the parent beacon block
   */
  parent_root?: string;
  /**
   * The index of the validator that proposed the beacon block
   */
  proposer_index?: number;
  /**
   * The slot number from beacon block payload
   */
  slot?: number;
  /**
   * The wall clock time when the reorg slot started
   */
  slot_start_date_time?: number;
  /**
   * The root hash of the beacon state at this block
   */
  state_root?: string;
  /**
   * Can be "canonical" or "orphaned"
   */
  status?: string;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctBlockBlobCount = {
  /**
   * The number of blobs in the block
   */
  blob_count?: number;
  /**
   * The beacon block root hash
   */
  block_root?: string;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Can be "canonical" or "orphaned"
   */
  status?: string;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctBlockBlobCountHead = {
  /**
   * The number of blobs in the block
   */
  blob_count?: number;
  /**
   * The beacon block root hash
   */
  block_root?: string;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctBlockBlobFirstSeenByNode = {
  /**
   * The blob index
   */
  blob_index?: number;
  /**
   * The beacon block root hash
   */
  block_root?: string;
  /**
   * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified"
   */
  classification?: string;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * Autonomous system number of the client
   */
  meta_client_geo_autonomous_system_number?: number | null;
  /**
   * Autonomous system organization of the client
   */
  meta_client_geo_autonomous_system_organization?: string | null;
  /**
   * City of the client
   */
  meta_client_geo_city?: string;
  /**
   * Continent code of the client
   */
  meta_client_geo_continent_code?: string;
  /**
   * Country of the client
   */
  meta_client_geo_country?: string;
  /**
   * Country code of the client
   */
  meta_client_geo_country_code?: string;
  /**
   * Latitude of the client
   */
  meta_client_geo_latitude?: number | null;
  /**
   * Longitude of the client
   */
  meta_client_geo_longitude?: number | null;
  /**
   * Implementation of the client
   */
  meta_client_implementation?: string;
  /**
   * Name of the client
   */
  meta_client_name?: string;
  /**
   * Version of the client
   */
  meta_client_version?: string;
  /**
   * Ethereum consensus client implementation
   */
  meta_consensus_implementation?: string;
  /**
   * Ethereum consensus client version
   */
  meta_consensus_version?: string;
  /**
   * ID of the node
   */
  node_id?: string;
  /**
   * The time from slot start for the client to see the block
   */
  seen_slot_start_diff?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Source of the event
   */
  source?: string;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
  /**
   * Username of the node
   */
  username?: string;
};

export type FctBlockFirstSeenByNode = {
  /**
   * The beacon block root hash
   */
  block_root?: string;
  /**
   * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified"
   */
  classification?: string;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * Autonomous system number of the client
   */
  meta_client_geo_autonomous_system_number?: number | null;
  /**
   * Autonomous system organization of the client
   */
  meta_client_geo_autonomous_system_organization?: string | null;
  /**
   * City of the client
   */
  meta_client_geo_city?: string;
  /**
   * Continent code of the client
   */
  meta_client_geo_continent_code?: string;
  /**
   * Country of the client
   */
  meta_client_geo_country?: string;
  /**
   * Country code of the client
   */
  meta_client_geo_country_code?: string;
  /**
   * Latitude of the client
   */
  meta_client_geo_latitude?: number | null;
  /**
   * Longitude of the client
   */
  meta_client_geo_longitude?: number | null;
  /**
   * Implementation of the client
   */
  meta_client_implementation?: string;
  /**
   * Name of the client
   */
  meta_client_name?: string;
  /**
   * Version of the client
   */
  meta_client_version?: string;
  /**
   * Ethereum consensus client implementation
   */
  meta_consensus_implementation?: string;
  /**
   * Ethereum consensus client version
   */
  meta_consensus_version?: string;
  /**
   * ID of the node
   */
  node_id?: string;
  /**
   * The time from slot start for the client to see the block
   */
  seen_slot_start_diff?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Source of the event
   */
  source?: string;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
  /**
   * Username of the node
   */
  username?: string;
};

export type FctBlockHead = {
  /**
   * The root hash of the beacon block
   */
  block_root?: string;
  /**
   * The total bytes of the beacon block payload
   */
  block_total_bytes?: number | null;
  /**
   * The total bytes of the beacon block payload when compressed using snappy
   */
  block_total_bytes_compressed?: number | null;
  /**
   * The version of the beacon block
   */
  block_version?: string;
  /**
   * The epoch number from beacon block payload
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The block hash of the associated execution block
   */
  eth1_data_block_hash?: string;
  /**
   * The root of the deposit tree in the associated execution block
   */
  eth1_data_deposit_root?: string;
  /**
   * Base fee per gas for execution payload
   */
  execution_payload_base_fee_per_gas?: string | null;
  /**
   * Gas used for blobs in execution payload
   */
  execution_payload_blob_gas_used?: number | null;
  /**
   * The block hash of the execution payload
   */
  execution_payload_block_hash?: string;
  /**
   * The block number of the execution payload
   */
  execution_payload_block_number?: number;
  /**
   * Excess gas used for blobs in execution payload
   */
  execution_payload_excess_blob_gas?: number | null;
  /**
   * The recipient of the fee for this execution payload
   */
  execution_payload_fee_recipient?: string;
  /**
   * Gas limit for execution payload
   */
  execution_payload_gas_limit?: number | null;
  /**
   * Gas used for execution payload
   */
  execution_payload_gas_used?: number | null;
  /**
   * The parent hash of the execution payload
   */
  execution_payload_parent_hash?: string;
  /**
   * The state root of the execution payload
   */
  execution_payload_state_root?: string;
  /**
   * The transaction count of the execution payload
   */
  execution_payload_transactions_count?: number | null;
  /**
   * The transaction total bytes of the execution payload
   */
  execution_payload_transactions_total_bytes?: number | null;
  /**
   * The transaction total bytes of the execution payload when compressed using snappy
   */
  execution_payload_transactions_total_bytes_compressed?: number | null;
  /**
   * The root hash of the parent beacon block
   */
  parent_root?: string;
  /**
   * The index of the validator that proposed the beacon block
   */
  proposer_index?: number;
  /**
   * The slot number from beacon block payload
   */
  slot?: number;
  /**
   * The wall clock time when the reorg slot started
   */
  slot_start_date_time?: number;
  /**
   * The root hash of the beacon state at this block
   */
  state_root?: string;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctBlockMev = {
  /**
   * The block hash of the proposer payload
   */
  block_hash?: string;
  /**
   * The block number of the proposer payload
   */
  block_number?: number;
  /**
   * The root hash of the beacon block
   */
  block_root?: string;
  /**
   * The builder pubkey of the proposer payload
   */
  builder_pubkey?: string;
  /**
   * The earliest timestamp of the accepted bid in milliseconds
   */
  earliest_bid_date_time?: number | null;
  /**
   * Epoch number derived from the slot that the proposer payload is for
   */
  epoch?: number;
  /**
   * The start time for the epoch that the proposer payload is for
   */
  epoch_start_date_time?: number;
  /**
   * The gas limit of the proposer payload
   */
  gas_limit?: number;
  /**
   * The gas used of the proposer payload
   */
  gas_used?: number;
  /**
   * The parent hash of the proposer payload
   */
  parent_hash?: string;
  /**
   * The proposer fee recipient of the proposer payload
   */
  proposer_fee_recipient?: string;
  /**
   * The proposer pubkey of the proposer payload
   */
  proposer_pubkey?: string;
  /**
   * The relay names that delivered the proposer payload
   */
  relay_names?: Array<string>;
  /**
   * Slot number within the block proposer payload
   */
  slot?: number;
  /**
   * The start time for the slot that the proposer payload is for
   */
  slot_start_date_time?: number;
  /**
   * Can be "canonical" or "orphaned"
   */
  status?: string;
  /**
   * The number of transactions in the proposer payload
   */
  transaction_count?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
  /**
   * The transaction value in wei
   */
  value?: string | null;
};

export type FctBlockMevHead = {
  /**
   * The block hash of the proposer payload
   */
  block_hash?: string;
  /**
   * The block number of the proposer payload
   */
  block_number?: number;
  /**
   * The root hash of the beacon block
   */
  block_root?: string;
  /**
   * The builder pubkey of the proposer payload
   */
  builder_pubkey?: string;
  /**
   * The earliest timestamp of the accepted bid in milliseconds
   */
  earliest_bid_date_time?: number | null;
  /**
   * Epoch number derived from the slot that the proposer payload is for
   */
  epoch?: number;
  /**
   * The start time for the epoch that the proposer payload is for
   */
  epoch_start_date_time?: number;
  /**
   * The gas limit of the proposer payload
   */
  gas_limit?: number;
  /**
   * The gas used of the proposer payload
   */
  gas_used?: number;
  /**
   * The parent hash of the proposer payload
   */
  parent_hash?: string;
  /**
   * The proposer fee recipient of the proposer payload
   */
  proposer_fee_recipient?: string;
  /**
   * The proposer pubkey of the proposer payload
   */
  proposer_pubkey?: string;
  /**
   * The relay names that delivered the proposer payload
   */
  relay_names?: Array<string>;
  /**
   * Slot number within the block proposer payload
   */
  slot?: number;
  /**
   * The start time for the slot that the proposer payload is for
   */
  slot_start_date_time?: number;
  /**
   * The number of transactions in the proposer payload
   */
  transaction_count?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
  /**
   * The transaction value in wei
   */
  value?: string | null;
};

export type FctBlockProposer = {
  /**
   * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed"
   */
  block_root?: string | null;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The public key of the validator proposer
   */
  proposer_pubkey?: string;
  /**
   * The validator index of the proposer for the slot
   */
  proposer_validator_index?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Can be "canonical", "orphaned" or "missed"
   */
  status?: string;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctBlockProposerEntity = {
  /**
   * The entity that proposed the block
   */
  entity?: string | null;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctBlockProposerHead = {
  /**
   * The beacon block root hash. Null if a block was never seen by a sentry
   */
  block_root?: string | null;
  /**
   * The epoch number containing the slot
   */
  epoch?: number;
  /**
   * The wall clock time when the epoch started
   */
  epoch_start_date_time?: number;
  /**
   * The public key of the validator proposer
   */
  proposer_pubkey?: string;
  /**
   * The validator index of the proposer for the slot
   */
  proposer_validator_index?: number;
  /**
   * The slot number
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctMevBidCountByBuilder = {
  /**
   * The total number of bids from the builder
   */
  bid_total?: number;
  /**
   * The relay that the bid was fetched from
   */
  builder_pubkey?: string;
  /**
   * Epoch number derived from the slot that the bid is for
   */
  epoch?: number;
  /**
   * The start time for the epoch that the bid is for
   */
  epoch_start_date_time?: number;
  /**
   * Slot number within the block bid
   */
  slot?: number;
  /**
   * The start time for the slot that the bid is for
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctMevBidCountByRelay = {
  /**
   * The total number of bids for the relay
   */
  bid_total?: number;
  /**
   * Epoch number derived from the slot that the bid is for
   */
  epoch?: number;
  /**
   * The start time for the epoch that the bid is for
   */
  epoch_start_date_time?: number;
  /**
   * The relay that the bid was fetched from
   */
  relay_name?: string;
  /**
   * Slot number within the block bid
   */
  slot?: number;
  /**
   * The start time for the slot that the bid is for
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

export type FctMevBidHighestValueByBuilderChunked50Ms = {
  /**
   * The execution block hash of the bid
   */
  block_hash?: string;
  /**
   * The builder pubkey of the bid
   */
  builder_pubkey?: string;
  /**
   * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start
   */
  chunk_slot_start_diff?: number;
  /**
   * The timestamp of the earliest bid for this block_hash from this builder
   */
  earliest_bid_date_time?: number;
  /**
   * Epoch number derived from the slot that the bid is for
   */
  epoch?: number;
  /**
   * The start time for the epoch that the bid is for
   */
  epoch_start_date_time?: number;
  /**
   * The relay that the bid was fetched from
   */
  relay_names?: Array<string>;
  /**
   * Slot number within the block bid
   */
  slot?: number;
  /**
   * The start time for the slot that the bid is for
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
  /**
   * The transaction value in wei
   */
  value?: string;
};

export type FctNodeActiveLast24h = {
  /**
   * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified"
   */
  classification?: string;
  /**
   * Timestamp when the node was last seen
   */
  last_seen_date_time?: number;
  /**
   * Autonomous system number of the client
   */
  meta_client_geo_autonomous_system_number?: number | null;
  /**
   * Autonomous system organization of the client
   */
  meta_client_geo_autonomous_system_organization?: string | null;
  /**
   * City of the client
   */
  meta_client_geo_city?: string;
  /**
   * Continent code of the client
   */
  meta_client_geo_continent_code?: string;
  /**
   * Country of the client
   */
  meta_client_geo_country?: string;
  /**
   * Country code of the client
   */
  meta_client_geo_country_code?: string;
  /**
   * Latitude of the client
   */
  meta_client_geo_latitude?: number | null;
  /**
   * Longitude of the client
   */
  meta_client_geo_longitude?: number | null;
  /**
   * Implementation of the client
   */
  meta_client_implementation?: string;
  /**
   * Name of the client
   */
  meta_client_name?: string;
  /**
   * Version of the client
   */
  meta_client_version?: string;
  /**
   * Ethereum consensus client implementation
   */
  meta_consensus_implementation?: string;
  /**
   * Ethereum consensus client version
   */
  meta_consensus_version?: string;
  /**
   * ID of the node
   */
  node_id?: string;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
  /**
   * Username of the node
   */
  username?: string;
};

export type FctPreparedBlock = {
  /**
   * The total bytes of the beacon block payload
   */
  block_total_bytes?: number | null;
  /**
   * The total bytes of the beacon block payload when compressed using snappy
   */
  block_total_bytes_compressed?: number | null;
  /**
   * The version of the beacon block
   */
  block_version?: string;
  /**
   * The value of the consensus payload in wei
   */
  consensus_payload_value?: number | null;
  /**
   * The wall clock time when the event was received
   */
  event_date_time?: number;
  /**
   * The block number of the execution payload
   */
  execution_payload_block_number?: number;
  /**
   * Gas limit for execution payload
   */
  execution_payload_gas_limit?: number | null;
  /**
   * Gas used for execution payload
   */
  execution_payload_gas_used?: number | null;
  /**
   * The transaction count of the execution payload
   */
  execution_payload_transactions_count?: number | null;
  /**
   * The transaction total bytes of the execution payload
   */
  execution_payload_transactions_total_bytes?: number | null;
  /**
   * The value of the execution payload in wei
   */
  execution_payload_value?: number | null;
  /**
   * City of the client that generated the event
   */
  meta_client_geo_city?: string;
  /**
   * Country of the client that generated the event
   */
  meta_client_geo_country?: string;
  /**
   * Country code of the client that generated the event
   */
  meta_client_geo_country_code?: string;
  /**
   * Implementation of the client that generated the event
   */
  meta_client_implementation?: string;
  /**
   * Name of the client that generated the event
   */
  meta_client_name?: string;
  /**
   * Version of the client that generated the event
   */
  meta_client_version?: string;
  /**
   * Consensus implementation of the validator
   */
  meta_consensus_implementation?: string;
  /**
   * Consensus version of the validator
   */
  meta_consensus_version?: string;
  /**
   * The slot number from beacon block
   */
  slot?: number;
  /**
   * The wall clock time when the slot started
   */
  slot_start_date_time?: number;
  /**
   * Timestamp when the record was last updated
   */
  updated_date_time?: number;
};

/**
 * Response for getting a single fct_address_access_chunked_10000 record
 */
export type GetFctAddressAccessChunked10000Response = {
  item?: FctAddressAccessChunked10000;
};

/**
 * Response for getting a single fct_address_access_total record
 */
export type GetFctAddressAccessTotalResponse = {
  item?: FctAddressAccessTotal;
};

/**
 * Response for getting a single fct_address_storage_slot_chunked_10000 record
 */
export type GetFctAddressStorageSlotChunked10000Response = {
  item?: FctAddressStorageSlotChunked10000;
};

/**
 * Response for getting a single fct_address_storage_slot_expired_top_100_by_contract record
 */
export type GetFctAddressStorageSlotExpiredTop100ByContractResponse = {
  item?: FctAddressStorageSlotExpiredTop100ByContract;
};

/**
 * Response for getting a single fct_address_storage_slot_top_100_by_contract record
 */
export type GetFctAddressStorageSlotTop100ByContractResponse = {
  item?: FctAddressStorageSlotTop100ByContract;
};

/**
 * Response for getting a single fct_address_storage_slot_total record
 */
export type GetFctAddressStorageSlotTotalResponse = {
  item?: FctAddressStorageSlotTotal;
};

/**
 * Response for getting a single fct_attestation_correctness_by_validator_canonical record
 */
export type GetFctAttestationCorrectnessByValidatorCanonicalResponse = {
  item?: FctAttestationCorrectnessByValidatorCanonical;
};

/**
 * Response for getting a single fct_attestation_correctness_by_validator_head record
 */
export type GetFctAttestationCorrectnessByValidatorHeadResponse = {
  item?: FctAttestationCorrectnessByValidatorHead;
};

/**
 * Response for getting a single fct_attestation_correctness_canonical record
 */
export type GetFctAttestationCorrectnessCanonicalResponse = {
  item?: FctAttestationCorrectnessCanonical;
};

/**
 * Response for getting a single fct_attestation_correctness_head record
 */
export type GetFctAttestationCorrectnessHeadResponse = {
  item?: FctAttestationCorrectnessHead;
};

/**
 * Response for getting a single fct_attestation_first_seen_chunked_50ms record
 */
export type GetFctAttestationFirstSeenChunked50MsResponse = {
  item?: FctAttestationFirstSeenChunked50Ms;
};

/**
 * Response for getting a single fct_block_blob_count_head record
 */
export type GetFctBlockBlobCountHeadResponse = {
  item?: FctBlockBlobCountHead;
};

/**
 * Response for getting a single fct_block_blob_count record
 */
export type GetFctBlockBlobCountResponse = {
  item?: FctBlockBlobCount;
};

/**
 * Response for getting a single fct_block_blob_first_seen_by_node record
 */
export type GetFctBlockBlobFirstSeenByNodeResponse = {
  item?: FctBlockBlobFirstSeenByNode;
};

/**
 * Response for getting a single fct_block_first_seen_by_node record
 */
export type GetFctBlockFirstSeenByNodeResponse = {
  item?: FctBlockFirstSeenByNode;
};

/**
 * Response for getting a single fct_block_head record
 */
export type GetFctBlockHeadResponse = {
  item?: FctBlockHead;
};

/**
 * Response for getting a single fct_block_mev_head record
 */
export type GetFctBlockMevHeadResponse = {
  item?: FctBlockMevHead;
};

/**
 * Response for getting a single fct_block_mev record
 */
export type GetFctBlockMevResponse = {
  item?: FctBlockMev;
};

/**
 * Response for getting a single fct_block_proposer_entity record
 */
export type GetFctBlockProposerEntityResponse = {
  item?: FctBlockProposerEntity;
};

/**
 * Response for getting a single fct_block_proposer_head record
 */
export type GetFctBlockProposerHeadResponse = {
  item?: FctBlockProposerHead;
};

/**
 * Response for getting a single fct_block_proposer record
 */
export type GetFctBlockProposerResponse = {
  item?: FctBlockProposer;
};

/**
 * Response for getting a single fct_block record
 */
export type GetFctBlockResponse = {
  item?: FctBlock;
};

/**
 * Response for getting a single fct_mev_bid_count_by_builder record
 */
export type GetFctMevBidCountByBuilderResponse = {
  item?: FctMevBidCountByBuilder;
};

/**
 * Response for getting a single fct_mev_bid_count_by_relay record
 */
export type GetFctMevBidCountByRelayResponse = {
  item?: FctMevBidCountByRelay;
};

/**
 * Response for getting a single fct_mev_bid_highest_value_by_builder_chunked_50ms record
 */
export type GetFctMevBidHighestValueByBuilderChunked50MsResponse = {
  item?: FctMevBidHighestValueByBuilderChunked50Ms;
};

/**
 * Response for getting a single fct_node_active_last_24h record
 */
export type GetFctNodeActiveLast24hResponse = {
  item?: FctNodeActiveLast24h;
};

/**
 * Response for getting a single fct_prepared_block record
 */
export type GetFctPreparedBlockResponse = {
  item?: FctPreparedBlock;
};

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export type GoogleProtobufAny = {
  /**
   * The type of the serialized message.
   */
  '@type'?: string;
  [key: string]: unknown | string | undefined;
};

/**
 * Response for listing fct_address_access_chunked_10000 records
 */
export type ListFctAddressAccessChunked10000Response = {
  /**
   * The list of fct_address_access_chunked_10000.
   */
  fct_address_access_chunked_10000?: Array<FctAddressAccessChunked10000>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_address_access_total records
 */
export type ListFctAddressAccessTotalResponse = {
  /**
   * The list of fct_address_access_total.
   */
  fct_address_access_total?: Array<FctAddressAccessTotal>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_address_storage_slot_chunked_10000 records
 */
export type ListFctAddressStorageSlotChunked10000Response = {
  /**
   * The list of fct_address_storage_slot_chunked_10000.
   */
  fct_address_storage_slot_chunked_10000?: Array<FctAddressStorageSlotChunked10000>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_address_storage_slot_expired_top_100_by_contract records
 */
export type ListFctAddressStorageSlotExpiredTop100ByContractResponse = {
  /**
   * The list of fct_address_storage_slot_expired_top_100_by_contract.
   */
  fct_address_storage_slot_expired_top_100_by_contract?: Array<FctAddressStorageSlotExpiredTop100ByContract>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_address_storage_slot_top_100_by_contract records
 */
export type ListFctAddressStorageSlotTop100ByContractResponse = {
  /**
   * The list of fct_address_storage_slot_top_100_by_contract.
   */
  fct_address_storage_slot_top_100_by_contract?: Array<FctAddressStorageSlotTop100ByContract>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_address_storage_slot_total records
 */
export type ListFctAddressStorageSlotTotalResponse = {
  /**
   * The list of fct_address_storage_slot_total.
   */
  fct_address_storage_slot_total?: Array<FctAddressStorageSlotTotal>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_attestation_correctness_by_validator_canonical records
 */
export type ListFctAttestationCorrectnessByValidatorCanonicalResponse = {
  /**
   * The list of fct_attestation_correctness_by_validator_canonical.
   */
  fct_attestation_correctness_by_validator_canonical?: Array<FctAttestationCorrectnessByValidatorCanonical>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_attestation_correctness_by_validator_head records
 */
export type ListFctAttestationCorrectnessByValidatorHeadResponse = {
  /**
   * The list of fct_attestation_correctness_by_validator_head.
   */
  fct_attestation_correctness_by_validator_head?: Array<FctAttestationCorrectnessByValidatorHead>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_attestation_correctness_canonical records
 */
export type ListFctAttestationCorrectnessCanonicalResponse = {
  /**
   * The list of fct_attestation_correctness_canonical.
   */
  fct_attestation_correctness_canonical?: Array<FctAttestationCorrectnessCanonical>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_attestation_correctness_head records
 */
export type ListFctAttestationCorrectnessHeadResponse = {
  /**
   * The list of fct_attestation_correctness_head.
   */
  fct_attestation_correctness_head?: Array<FctAttestationCorrectnessHead>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_attestation_first_seen_chunked_50ms records
 */
export type ListFctAttestationFirstSeenChunked50MsResponse = {
  /**
   * The list of fct_attestation_first_seen_chunked_50ms.
   */
  fct_attestation_first_seen_chunked_50ms?: Array<FctAttestationFirstSeenChunked50Ms>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_blob_count_head records
 */
export type ListFctBlockBlobCountHeadResponse = {
  /**
   * The list of fct_block_blob_count_head.
   */
  fct_block_blob_count_head?: Array<FctBlockBlobCountHead>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_blob_count records
 */
export type ListFctBlockBlobCountResponse = {
  /**
   * The list of fct_block_blob_count.
   */
  fct_block_blob_count?: Array<FctBlockBlobCount>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_blob_first_seen_by_node records
 */
export type ListFctBlockBlobFirstSeenByNodeResponse = {
  /**
   * The list of fct_block_blob_first_seen_by_node.
   */
  fct_block_blob_first_seen_by_node?: Array<FctBlockBlobFirstSeenByNode>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_first_seen_by_node records
 */
export type ListFctBlockFirstSeenByNodeResponse = {
  /**
   * The list of fct_block_first_seen_by_node.
   */
  fct_block_first_seen_by_node?: Array<FctBlockFirstSeenByNode>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_head records
 */
export type ListFctBlockHeadResponse = {
  /**
   * The list of fct_block_head.
   */
  fct_block_head?: Array<FctBlockHead>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_mev_head records
 */
export type ListFctBlockMevHeadResponse = {
  /**
   * The list of fct_block_mev_head.
   */
  fct_block_mev_head?: Array<FctBlockMevHead>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_mev records
 */
export type ListFctBlockMevResponse = {
  /**
   * The list of fct_block_mev.
   */
  fct_block_mev?: Array<FctBlockMev>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_proposer_entity records
 */
export type ListFctBlockProposerEntityResponse = {
  /**
   * The list of fct_block_proposer_entity.
   */
  fct_block_proposer_entity?: Array<FctBlockProposerEntity>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_proposer_head records
 */
export type ListFctBlockProposerHeadResponse = {
  /**
   * The list of fct_block_proposer_head.
   */
  fct_block_proposer_head?: Array<FctBlockProposerHead>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block_proposer records
 */
export type ListFctBlockProposerResponse = {
  /**
   * The list of fct_block_proposer.
   */
  fct_block_proposer?: Array<FctBlockProposer>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_block records
 */
export type ListFctBlockResponse = {
  /**
   * The list of fct_block.
   */
  fct_block?: Array<FctBlock>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_mev_bid_count_by_builder records
 */
export type ListFctMevBidCountByBuilderResponse = {
  /**
   * The list of fct_mev_bid_count_by_builder.
   */
  fct_mev_bid_count_by_builder?: Array<FctMevBidCountByBuilder>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_mev_bid_count_by_relay records
 */
export type ListFctMevBidCountByRelayResponse = {
  /**
   * The list of fct_mev_bid_count_by_relay.
   */
  fct_mev_bid_count_by_relay?: Array<FctMevBidCountByRelay>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_mev_bid_highest_value_by_builder_chunked_50ms records
 */
export type ListFctMevBidHighestValueByBuilderChunked50MsResponse = {
  /**
   * The list of fct_mev_bid_highest_value_by_builder_chunked_50ms.
   */
  fct_mev_bid_highest_value_by_builder_chunked_50ms?: Array<FctMevBidHighestValueByBuilderChunked50Ms>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_node_active_last_24h records
 */
export type ListFctNodeActiveLast24hResponse = {
  /**
   * The list of fct_node_active_last_24h.
   */
  fct_node_active_last_24h?: Array<FctNodeActiveLast24h>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * Response for listing fct_prepared_block records
 */
export type ListFctPreparedBlockResponse = {
  /**
   * The list of fct_prepared_block.
   */
  fct_prepared_block?: Array<FctPreparedBlock>;
  /**
   * A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
   */
  next_page_token?: string;
};

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export type Status = {
  /**
   * The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
   */
  code?: number;
  /**
   * A list of messages that carry the error details.  There is a common set of message types for APIs to use.
   */
  details?: Array<GoogleProtobufAny>;
  /**
   * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
   */
  message?: string;
};

export type FctAddressAccessChunked10000ServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Start block number of the chunk (filter: eq)
     */
    chunk_start_block_number_eq?: number;
    /**
     * Start block number of the chunk (filter: ne)
     */
    chunk_start_block_number_ne?: number;
    /**
     * Start block number of the chunk (filter: lt)
     */
    chunk_start_block_number_lt?: number;
    /**
     * Start block number of the chunk (filter: lte)
     */
    chunk_start_block_number_lte?: number;
    /**
     * Start block number of the chunk (filter: gt)
     */
    chunk_start_block_number_gt?: number;
    /**
     * Start block number of the chunk (filter: gte)
     */
    chunk_start_block_number_gte?: number;
    /**
     * Start block number of the chunk (filter: between_min)
     */
    chunk_start_block_number_between_min?: number;
    /**
     * Start block number of the chunk (filter: between_max_value)
     */
    chunk_start_block_number_between_max_value?: number;
    /**
     * Start block number of the chunk (filter: in_values) (comma-separated list)
     */
    chunk_start_block_number_in_values?: string;
    /**
     * Start block number of the chunk (filter: not_in_values) (comma-separated list)
     */
    chunk_start_block_number_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Number of accounts first accessed in the chunk (filter: eq)
     */
    first_accessed_accounts_eq?: number;
    /**
     * Number of accounts first accessed in the chunk (filter: ne)
     */
    first_accessed_accounts_ne?: number;
    /**
     * Number of accounts first accessed in the chunk (filter: lt)
     */
    first_accessed_accounts_lt?: number;
    /**
     * Number of accounts first accessed in the chunk (filter: lte)
     */
    first_accessed_accounts_lte?: number;
    /**
     * Number of accounts first accessed in the chunk (filter: gt)
     */
    first_accessed_accounts_gt?: number;
    /**
     * Number of accounts first accessed in the chunk (filter: gte)
     */
    first_accessed_accounts_gte?: number;
    /**
     * Number of accounts first accessed in the chunk (filter: between_min)
     */
    first_accessed_accounts_between_min?: number;
    /**
     * Number of accounts first accessed in the chunk (filter: between_max_value)
     */
    first_accessed_accounts_between_max_value?: number;
    /**
     * Number of accounts first accessed in the chunk (filter: in_values) (comma-separated list)
     */
    first_accessed_accounts_in_values?: string;
    /**
     * Number of accounts first accessed in the chunk (filter: not_in_values) (comma-separated list)
     */
    first_accessed_accounts_not_in_values?: string;
    /**
     * Number of accounts last accessed in the chunk (filter: eq)
     */
    last_accessed_accounts_eq?: number;
    /**
     * Number of accounts last accessed in the chunk (filter: ne)
     */
    last_accessed_accounts_ne?: number;
    /**
     * Number of accounts last accessed in the chunk (filter: lt)
     */
    last_accessed_accounts_lt?: number;
    /**
     * Number of accounts last accessed in the chunk (filter: lte)
     */
    last_accessed_accounts_lte?: number;
    /**
     * Number of accounts last accessed in the chunk (filter: gt)
     */
    last_accessed_accounts_gt?: number;
    /**
     * Number of accounts last accessed in the chunk (filter: gte)
     */
    last_accessed_accounts_gte?: number;
    /**
     * Number of accounts last accessed in the chunk (filter: between_min)
     */
    last_accessed_accounts_between_min?: number;
    /**
     * Number of accounts last accessed in the chunk (filter: between_max_value)
     */
    last_accessed_accounts_between_max_value?: number;
    /**
     * Number of accounts last accessed in the chunk (filter: in_values) (comma-separated list)
     */
    last_accessed_accounts_in_values?: string;
    /**
     * Number of accounts last accessed in the chunk (filter: not_in_values) (comma-separated list)
     */
    last_accessed_accounts_not_in_values?: string;
    /**
     * The maximum number of fct_address_access_chunked_10000 to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAddressAccessChunked10000` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_address_access_chunked_10000';
};

export type FctAddressAccessChunked10000ServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressAccessChunked10000ServiceListError =
  FctAddressAccessChunked10000ServiceListErrors[keyof FctAddressAccessChunked10000ServiceListErrors];

export type FctAddressAccessChunked10000ServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAddressAccessChunked10000Response;
};

export type FctAddressAccessChunked10000ServiceListResponse =
  FctAddressAccessChunked10000ServiceListResponses[keyof FctAddressAccessChunked10000ServiceListResponses];

export type FctAddressAccessChunked10000ServiceGetData = {
  body?: never;
  path: {
    /**
     * Start block number of the chunk
     */
    chunk_start_block_number: number;
  };
  query?: never;
  url: '/api/v1/fct_address_access_chunked_10000/{chunk_start_block_number}';
};

export type FctAddressAccessChunked10000ServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressAccessChunked10000ServiceGetError =
  FctAddressAccessChunked10000ServiceGetErrors[keyof FctAddressAccessChunked10000ServiceGetErrors];

export type FctAddressAccessChunked10000ServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAddressAccessChunked10000Response;
};

export type FctAddressAccessChunked10000ServiceGetResponse =
  FctAddressAccessChunked10000ServiceGetResponses[keyof FctAddressAccessChunked10000ServiceGetResponses];

export type FctAddressAccessTotalServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Total number of accounts accessed in last 365 days (filter: eq)
     */
    total_accounts_eq?: number;
    /**
     * Total number of accounts accessed in last 365 days (filter: ne)
     */
    total_accounts_ne?: number;
    /**
     * Total number of accounts accessed in last 365 days (filter: lt)
     */
    total_accounts_lt?: number;
    /**
     * Total number of accounts accessed in last 365 days (filter: lte)
     */
    total_accounts_lte?: number;
    /**
     * Total number of accounts accessed in last 365 days (filter: gt)
     */
    total_accounts_gt?: number;
    /**
     * Total number of accounts accessed in last 365 days (filter: gte)
     */
    total_accounts_gte?: number;
    /**
     * Total number of accounts accessed in last 365 days (filter: between_min)
     */
    total_accounts_between_min?: number;
    /**
     * Total number of accounts accessed in last 365 days (filter: between_max_value)
     */
    total_accounts_between_max_value?: number;
    /**
     * Total number of accounts accessed in last 365 days (filter: in_values) (comma-separated list)
     */
    total_accounts_in_values?: string;
    /**
     * Total number of accounts accessed in last 365 days (filter: not_in_values) (comma-separated list)
     */
    total_accounts_not_in_values?: string;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: eq)
     */
    expired_accounts_eq?: number;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: ne)
     */
    expired_accounts_ne?: number;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: lt)
     */
    expired_accounts_lt?: number;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: lte)
     */
    expired_accounts_lte?: number;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: gt)
     */
    expired_accounts_gt?: number;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: gte)
     */
    expired_accounts_gte?: number;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: between_min)
     */
    expired_accounts_between_min?: number;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: between_max_value)
     */
    expired_accounts_between_max_value?: number;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: in_values) (comma-separated list)
     */
    expired_accounts_in_values?: string;
    /**
     * Number of expired accounts (not accessed in last 365 days) (filter: not_in_values) (comma-separated list)
     */
    expired_accounts_not_in_values?: string;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: eq)
     */
    total_contract_accounts_eq?: number;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: ne)
     */
    total_contract_accounts_ne?: number;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: lt)
     */
    total_contract_accounts_lt?: number;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: lte)
     */
    total_contract_accounts_lte?: number;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: gt)
     */
    total_contract_accounts_gt?: number;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: gte)
     */
    total_contract_accounts_gte?: number;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: between_min)
     */
    total_contract_accounts_between_min?: number;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: between_max_value)
     */
    total_contract_accounts_between_max_value?: number;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: in_values) (comma-separated list)
     */
    total_contract_accounts_in_values?: string;
    /**
     * Total number of contract accounts accessed in last 365 days (filter: not_in_values) (comma-separated list)
     */
    total_contract_accounts_not_in_values?: string;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: eq)
     */
    expired_contracts_eq?: number;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: ne)
     */
    expired_contracts_ne?: number;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: lt)
     */
    expired_contracts_lt?: number;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: lte)
     */
    expired_contracts_lte?: number;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: gt)
     */
    expired_contracts_gt?: number;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: gte)
     */
    expired_contracts_gte?: number;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: between_min)
     */
    expired_contracts_between_min?: number;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: between_max_value)
     */
    expired_contracts_between_max_value?: number;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: in_values) (comma-separated list)
     */
    expired_contracts_in_values?: string;
    /**
     * Number of expired contracts (not accessed in last 365 days) (filter: not_in_values) (comma-separated list)
     */
    expired_contracts_not_in_values?: string;
    /**
     * The maximum number of fct_address_access_total to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAddressAccessTotal` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_address_access_total';
};

export type FctAddressAccessTotalServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressAccessTotalServiceListError =
  FctAddressAccessTotalServiceListErrors[keyof FctAddressAccessTotalServiceListErrors];

export type FctAddressAccessTotalServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAddressAccessTotalResponse;
};

export type FctAddressAccessTotalServiceListResponse =
  FctAddressAccessTotalServiceListResponses[keyof FctAddressAccessTotalServiceListResponses];

export type FctAddressAccessTotalServiceGetData = {
  body?: never;
  path: {
    /**
     * Timestamp when the record was last updated
     */
    updated_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_address_access_total/{updated_date_time}';
};

export type FctAddressAccessTotalServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressAccessTotalServiceGetError =
  FctAddressAccessTotalServiceGetErrors[keyof FctAddressAccessTotalServiceGetErrors];

export type FctAddressAccessTotalServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAddressAccessTotalResponse;
};

export type FctAddressAccessTotalServiceGetResponse =
  FctAddressAccessTotalServiceGetResponses[keyof FctAddressAccessTotalServiceGetResponses];

export type FctAddressStorageSlotChunked10000ServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Start block number of the chunk (filter: eq)
     */
    chunk_start_block_number_eq?: number;
    /**
     * Start block number of the chunk (filter: ne)
     */
    chunk_start_block_number_ne?: number;
    /**
     * Start block number of the chunk (filter: lt)
     */
    chunk_start_block_number_lt?: number;
    /**
     * Start block number of the chunk (filter: lte)
     */
    chunk_start_block_number_lte?: number;
    /**
     * Start block number of the chunk (filter: gt)
     */
    chunk_start_block_number_gt?: number;
    /**
     * Start block number of the chunk (filter: gte)
     */
    chunk_start_block_number_gte?: number;
    /**
     * Start block number of the chunk (filter: between_min)
     */
    chunk_start_block_number_between_min?: number;
    /**
     * Start block number of the chunk (filter: between_max_value)
     */
    chunk_start_block_number_between_max_value?: number;
    /**
     * Start block number of the chunk (filter: in_values) (comma-separated list)
     */
    chunk_start_block_number_in_values?: string;
    /**
     * Start block number of the chunk (filter: not_in_values) (comma-separated list)
     */
    chunk_start_block_number_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Number of slots first accessed in the chunk (filter: eq)
     */
    first_accessed_slots_eq?: number;
    /**
     * Number of slots first accessed in the chunk (filter: ne)
     */
    first_accessed_slots_ne?: number;
    /**
     * Number of slots first accessed in the chunk (filter: lt)
     */
    first_accessed_slots_lt?: number;
    /**
     * Number of slots first accessed in the chunk (filter: lte)
     */
    first_accessed_slots_lte?: number;
    /**
     * Number of slots first accessed in the chunk (filter: gt)
     */
    first_accessed_slots_gt?: number;
    /**
     * Number of slots first accessed in the chunk (filter: gte)
     */
    first_accessed_slots_gte?: number;
    /**
     * Number of slots first accessed in the chunk (filter: between_min)
     */
    first_accessed_slots_between_min?: number;
    /**
     * Number of slots first accessed in the chunk (filter: between_max_value)
     */
    first_accessed_slots_between_max_value?: number;
    /**
     * Number of slots first accessed in the chunk (filter: in_values) (comma-separated list)
     */
    first_accessed_slots_in_values?: string;
    /**
     * Number of slots first accessed in the chunk (filter: not_in_values) (comma-separated list)
     */
    first_accessed_slots_not_in_values?: string;
    /**
     * Number of slots last accessed in the chunk (filter: eq)
     */
    last_accessed_slots_eq?: number;
    /**
     * Number of slots last accessed in the chunk (filter: ne)
     */
    last_accessed_slots_ne?: number;
    /**
     * Number of slots last accessed in the chunk (filter: lt)
     */
    last_accessed_slots_lt?: number;
    /**
     * Number of slots last accessed in the chunk (filter: lte)
     */
    last_accessed_slots_lte?: number;
    /**
     * Number of slots last accessed in the chunk (filter: gt)
     */
    last_accessed_slots_gt?: number;
    /**
     * Number of slots last accessed in the chunk (filter: gte)
     */
    last_accessed_slots_gte?: number;
    /**
     * Number of slots last accessed in the chunk (filter: between_min)
     */
    last_accessed_slots_between_min?: number;
    /**
     * Number of slots last accessed in the chunk (filter: between_max_value)
     */
    last_accessed_slots_between_max_value?: number;
    /**
     * Number of slots last accessed in the chunk (filter: in_values) (comma-separated list)
     */
    last_accessed_slots_in_values?: string;
    /**
     * Number of slots last accessed in the chunk (filter: not_in_values) (comma-separated list)
     */
    last_accessed_slots_not_in_values?: string;
    /**
     * The maximum number of fct_address_storage_slot_chunked_10000 to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAddressStorageSlotChunked10000` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_address_storage_slot_chunked_10000';
};

export type FctAddressStorageSlotChunked10000ServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressStorageSlotChunked10000ServiceListError =
  FctAddressStorageSlotChunked10000ServiceListErrors[keyof FctAddressStorageSlotChunked10000ServiceListErrors];

export type FctAddressStorageSlotChunked10000ServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAddressStorageSlotChunked10000Response;
};

export type FctAddressStorageSlotChunked10000ServiceListResponse =
  FctAddressStorageSlotChunked10000ServiceListResponses[keyof FctAddressStorageSlotChunked10000ServiceListResponses];

export type FctAddressStorageSlotChunked10000ServiceGetData = {
  body?: never;
  path: {
    /**
     * Start block number of the chunk
     */
    chunk_start_block_number: number;
  };
  query?: never;
  url: '/api/v1/fct_address_storage_slot_chunked_10000/{chunk_start_block_number}';
};

export type FctAddressStorageSlotChunked10000ServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressStorageSlotChunked10000ServiceGetError =
  FctAddressStorageSlotChunked10000ServiceGetErrors[keyof FctAddressStorageSlotChunked10000ServiceGetErrors];

export type FctAddressStorageSlotChunked10000ServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAddressStorageSlotChunked10000Response;
};

export type FctAddressStorageSlotChunked10000ServiceGetResponse =
  FctAddressStorageSlotChunked10000ServiceGetResponses[keyof FctAddressStorageSlotChunked10000ServiceGetResponses];

export type FctAddressStorageSlotExpiredTop100ByContractServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Rank by expired storage slots (1=highest) (filter: eq)
     */
    rank_eq?: number;
    /**
     * Rank by expired storage slots (1=highest) (filter: ne)
     */
    rank_ne?: number;
    /**
     * Rank by expired storage slots (1=highest) (filter: lt)
     */
    rank_lt?: number;
    /**
     * Rank by expired storage slots (1=highest) (filter: lte)
     */
    rank_lte?: number;
    /**
     * Rank by expired storage slots (1=highest) (filter: gt)
     */
    rank_gt?: number;
    /**
     * Rank by expired storage slots (1=highest) (filter: gte)
     */
    rank_gte?: number;
    /**
     * Rank by expired storage slots (1=highest) (filter: between_min)
     */
    rank_between_min?: number;
    /**
     * Rank by expired storage slots (1=highest) (filter: between_max_value)
     */
    rank_between_max_value?: number;
    /**
     * Rank by expired storage slots (1=highest) (filter: in_values) (comma-separated list)
     */
    rank_in_values?: string;
    /**
     * Rank by expired storage slots (1=highest) (filter: not_in_values) (comma-separated list)
     */
    rank_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The contract address (filter: eq)
     */
    contract_address_eq?: string;
    /**
     * The contract address (filter: ne)
     */
    contract_address_ne?: string;
    /**
     * The contract address (filter: contains)
     */
    contract_address_contains?: string;
    /**
     * The contract address (filter: starts_with)
     */
    contract_address_starts_with?: string;
    /**
     * The contract address (filter: ends_with)
     */
    contract_address_ends_with?: string;
    /**
     * The contract address (filter: like)
     */
    contract_address_like?: string;
    /**
     * The contract address (filter: not_like)
     */
    contract_address_not_like?: string;
    /**
     * The contract address (filter: in_values) (comma-separated list)
     */
    contract_address_in_values?: string;
    /**
     * The contract address (filter: not_in_values) (comma-separated list)
     */
    contract_address_not_in_values?: string;
    /**
     * Number of expired storage slots for this contract (filter: eq)
     */
    expired_slots_eq?: number;
    /**
     * Number of expired storage slots for this contract (filter: ne)
     */
    expired_slots_ne?: number;
    /**
     * Number of expired storage slots for this contract (filter: lt)
     */
    expired_slots_lt?: number;
    /**
     * Number of expired storage slots for this contract (filter: lte)
     */
    expired_slots_lte?: number;
    /**
     * Number of expired storage slots for this contract (filter: gt)
     */
    expired_slots_gt?: number;
    /**
     * Number of expired storage slots for this contract (filter: gte)
     */
    expired_slots_gte?: number;
    /**
     * Number of expired storage slots for this contract (filter: between_min)
     */
    expired_slots_between_min?: number;
    /**
     * Number of expired storage slots for this contract (filter: between_max_value)
     */
    expired_slots_between_max_value?: number;
    /**
     * Number of expired storage slots for this contract (filter: in_values) (comma-separated list)
     */
    expired_slots_in_values?: string;
    /**
     * Number of expired storage slots for this contract (filter: not_in_values) (comma-separated list)
     */
    expired_slots_not_in_values?: string;
    /**
     * The maximum number of fct_address_storage_slot_expired_top_100_by_contract to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAddressStorageSlotExpiredTop100ByContract` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_address_storage_slot_expired_top_100_by_contract';
};

export type FctAddressStorageSlotExpiredTop100ByContractServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressStorageSlotExpiredTop100ByContractServiceListError =
  FctAddressStorageSlotExpiredTop100ByContractServiceListErrors[keyof FctAddressStorageSlotExpiredTop100ByContractServiceListErrors];

export type FctAddressStorageSlotExpiredTop100ByContractServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAddressStorageSlotExpiredTop100ByContractResponse;
};

export type FctAddressStorageSlotExpiredTop100ByContractServiceListResponse =
  FctAddressStorageSlotExpiredTop100ByContractServiceListResponses[keyof FctAddressStorageSlotExpiredTop100ByContractServiceListResponses];

export type FctAddressStorageSlotExpiredTop100ByContractServiceGetData = {
  body?: never;
  path: {
    /**
     * Rank by expired storage slots (1=highest)
     */
    rank: number;
  };
  query?: never;
  url: '/api/v1/fct_address_storage_slot_expired_top_100_by_contract/{rank}';
};

export type FctAddressStorageSlotExpiredTop100ByContractServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressStorageSlotExpiredTop100ByContractServiceGetError =
  FctAddressStorageSlotExpiredTop100ByContractServiceGetErrors[keyof FctAddressStorageSlotExpiredTop100ByContractServiceGetErrors];

export type FctAddressStorageSlotExpiredTop100ByContractServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAddressStorageSlotExpiredTop100ByContractResponse;
};

export type FctAddressStorageSlotExpiredTop100ByContractServiceGetResponse =
  FctAddressStorageSlotExpiredTop100ByContractServiceGetResponses[keyof FctAddressStorageSlotExpiredTop100ByContractServiceGetResponses];

export type FctAddressStorageSlotTop100ByContractServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Rank by total storage slots (1=highest) (filter: eq)
     */
    rank_eq?: number;
    /**
     * Rank by total storage slots (1=highest) (filter: ne)
     */
    rank_ne?: number;
    /**
     * Rank by total storage slots (1=highest) (filter: lt)
     */
    rank_lt?: number;
    /**
     * Rank by total storage slots (1=highest) (filter: lte)
     */
    rank_lte?: number;
    /**
     * Rank by total storage slots (1=highest) (filter: gt)
     */
    rank_gt?: number;
    /**
     * Rank by total storage slots (1=highest) (filter: gte)
     */
    rank_gte?: number;
    /**
     * Rank by total storage slots (1=highest) (filter: between_min)
     */
    rank_between_min?: number;
    /**
     * Rank by total storage slots (1=highest) (filter: between_max_value)
     */
    rank_between_max_value?: number;
    /**
     * Rank by total storage slots (1=highest) (filter: in_values) (comma-separated list)
     */
    rank_in_values?: string;
    /**
     * Rank by total storage slots (1=highest) (filter: not_in_values) (comma-separated list)
     */
    rank_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The contract address (filter: eq)
     */
    contract_address_eq?: string;
    /**
     * The contract address (filter: ne)
     */
    contract_address_ne?: string;
    /**
     * The contract address (filter: contains)
     */
    contract_address_contains?: string;
    /**
     * The contract address (filter: starts_with)
     */
    contract_address_starts_with?: string;
    /**
     * The contract address (filter: ends_with)
     */
    contract_address_ends_with?: string;
    /**
     * The contract address (filter: like)
     */
    contract_address_like?: string;
    /**
     * The contract address (filter: not_like)
     */
    contract_address_not_like?: string;
    /**
     * The contract address (filter: in_values) (comma-separated list)
     */
    contract_address_in_values?: string;
    /**
     * The contract address (filter: not_in_values) (comma-separated list)
     */
    contract_address_not_in_values?: string;
    /**
     * Total number of storage slots for this contract (filter: eq)
     */
    total_storage_slots_eq?: number;
    /**
     * Total number of storage slots for this contract (filter: ne)
     */
    total_storage_slots_ne?: number;
    /**
     * Total number of storage slots for this contract (filter: lt)
     */
    total_storage_slots_lt?: number;
    /**
     * Total number of storage slots for this contract (filter: lte)
     */
    total_storage_slots_lte?: number;
    /**
     * Total number of storage slots for this contract (filter: gt)
     */
    total_storage_slots_gt?: number;
    /**
     * Total number of storage slots for this contract (filter: gte)
     */
    total_storage_slots_gte?: number;
    /**
     * Total number of storage slots for this contract (filter: between_min)
     */
    total_storage_slots_between_min?: number;
    /**
     * Total number of storage slots for this contract (filter: between_max_value)
     */
    total_storage_slots_between_max_value?: number;
    /**
     * Total number of storage slots for this contract (filter: in_values) (comma-separated list)
     */
    total_storage_slots_in_values?: string;
    /**
     * Total number of storage slots for this contract (filter: not_in_values) (comma-separated list)
     */
    total_storage_slots_not_in_values?: string;
    /**
     * The maximum number of fct_address_storage_slot_top_100_by_contract to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAddressStorageSlotTop100ByContract` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_address_storage_slot_top_100_by_contract';
};

export type FctAddressStorageSlotTop100ByContractServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressStorageSlotTop100ByContractServiceListError =
  FctAddressStorageSlotTop100ByContractServiceListErrors[keyof FctAddressStorageSlotTop100ByContractServiceListErrors];

export type FctAddressStorageSlotTop100ByContractServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAddressStorageSlotTop100ByContractResponse;
};

export type FctAddressStorageSlotTop100ByContractServiceListResponse =
  FctAddressStorageSlotTop100ByContractServiceListResponses[keyof FctAddressStorageSlotTop100ByContractServiceListResponses];

export type FctAddressStorageSlotTop100ByContractServiceGetData = {
  body?: never;
  path: {
    /**
     * Rank by total storage slots (1=highest)
     */
    rank: number;
  };
  query?: never;
  url: '/api/v1/fct_address_storage_slot_top_100_by_contract/{rank}';
};

export type FctAddressStorageSlotTop100ByContractServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressStorageSlotTop100ByContractServiceGetError =
  FctAddressStorageSlotTop100ByContractServiceGetErrors[keyof FctAddressStorageSlotTop100ByContractServiceGetErrors];

export type FctAddressStorageSlotTop100ByContractServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAddressStorageSlotTop100ByContractResponse;
};

export type FctAddressStorageSlotTop100ByContractServiceGetResponse =
  FctAddressStorageSlotTop100ByContractServiceGetResponses[keyof FctAddressStorageSlotTop100ByContractServiceGetResponses];

export type FctAddressStorageSlotTotalServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Total number of storage slots accessed in last 365 days (filter: eq)
     */
    total_storage_slots_eq?: number;
    /**
     * Total number of storage slots accessed in last 365 days (filter: ne)
     */
    total_storage_slots_ne?: number;
    /**
     * Total number of storage slots accessed in last 365 days (filter: lt)
     */
    total_storage_slots_lt?: number;
    /**
     * Total number of storage slots accessed in last 365 days (filter: lte)
     */
    total_storage_slots_lte?: number;
    /**
     * Total number of storage slots accessed in last 365 days (filter: gt)
     */
    total_storage_slots_gt?: number;
    /**
     * Total number of storage slots accessed in last 365 days (filter: gte)
     */
    total_storage_slots_gte?: number;
    /**
     * Total number of storage slots accessed in last 365 days (filter: between_min)
     */
    total_storage_slots_between_min?: number;
    /**
     * Total number of storage slots accessed in last 365 days (filter: between_max_value)
     */
    total_storage_slots_between_max_value?: number;
    /**
     * Total number of storage slots accessed in last 365 days (filter: in_values) (comma-separated list)
     */
    total_storage_slots_in_values?: string;
    /**
     * Total number of storage slots accessed in last 365 days (filter: not_in_values) (comma-separated list)
     */
    total_storage_slots_not_in_values?: string;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: eq)
     */
    expired_storage_slots_eq?: number;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: ne)
     */
    expired_storage_slots_ne?: number;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: lt)
     */
    expired_storage_slots_lt?: number;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: lte)
     */
    expired_storage_slots_lte?: number;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: gt)
     */
    expired_storage_slots_gt?: number;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: gte)
     */
    expired_storage_slots_gte?: number;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: between_min)
     */
    expired_storage_slots_between_min?: number;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: between_max_value)
     */
    expired_storage_slots_between_max_value?: number;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: in_values) (comma-separated list)
     */
    expired_storage_slots_in_values?: string;
    /**
     * Number of expired storage slots (not accessed in last 365 days) (filter: not_in_values) (comma-separated list)
     */
    expired_storage_slots_not_in_values?: string;
    /**
     * The maximum number of fct_address_storage_slot_total to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAddressStorageSlotTotal` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_address_storage_slot_total';
};

export type FctAddressStorageSlotTotalServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressStorageSlotTotalServiceListError =
  FctAddressStorageSlotTotalServiceListErrors[keyof FctAddressStorageSlotTotalServiceListErrors];

export type FctAddressStorageSlotTotalServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAddressStorageSlotTotalResponse;
};

export type FctAddressStorageSlotTotalServiceListResponse =
  FctAddressStorageSlotTotalServiceListResponses[keyof FctAddressStorageSlotTotalServiceListResponses];

export type FctAddressStorageSlotTotalServiceGetData = {
  body?: never;
  path: {
    /**
     * Timestamp when the record was last updated
     */
    updated_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_address_storage_slot_total/{updated_date_time}';
};

export type FctAddressStorageSlotTotalServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAddressStorageSlotTotalServiceGetError =
  FctAddressStorageSlotTotalServiceGetErrors[keyof FctAddressStorageSlotTotalServiceGetErrors];

export type FctAddressStorageSlotTotalServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAddressStorageSlotTotalResponse;
};

export type FctAddressStorageSlotTotalServiceGetResponse =
  FctAddressStorageSlotTotalServiceGetResponses[keyof FctAddressStorageSlotTotalServiceGetResponses];

export type FctAttestationCorrectnessByValidatorCanonicalServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The index of the validator attesting (filter: eq)
     */
    attesting_validator_index_eq?: number;
    /**
     * The index of the validator attesting (filter: ne)
     */
    attesting_validator_index_ne?: number;
    /**
     * The index of the validator attesting (filter: lt)
     */
    attesting_validator_index_lt?: number;
    /**
     * The index of the validator attesting (filter: lte)
     */
    attesting_validator_index_lte?: number;
    /**
     * The index of the validator attesting (filter: gt)
     */
    attesting_validator_index_gt?: number;
    /**
     * The index of the validator attesting (filter: gte)
     */
    attesting_validator_index_gte?: number;
    /**
     * The index of the validator attesting (filter: between_min)
     */
    attesting_validator_index_between_min?: number;
    /**
     * The index of the validator attesting (filter: between_max_value)
     */
    attesting_validator_index_between_max_value?: number;
    /**
     * The index of the validator attesting (filter: in_values) (comma-separated list)
     */
    attesting_validator_index_in_values?: string;
    /**
     * The index of the validator attesting (filter: not_in_values) (comma-separated list)
     */
    attesting_validator_index_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The beacon block root hash that was attested (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash that was attested (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash that was attested (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash that was attested (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash that was attested (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash that was attested (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash that was attested (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash that was attested (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash that was attested (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: eq)
     */
    slot_distance_eq?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: ne)
     */
    slot_distance_ne?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: lt)
     */
    slot_distance_lt?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: lte)
     */
    slot_distance_lte?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: gt)
     */
    slot_distance_gt?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: gte)
     */
    slot_distance_gte?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: between_min)
     */
    slot_distance_between_min?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: between_max_value)
     */
    slot_distance_between_max_value?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: in_values) (comma-separated list)
     */
    slot_distance_in_values?: string;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: not_in_values) (comma-separated list)
     */
    slot_distance_not_in_values?: string;
    /**
     * The distance from the slot when the attestation was included in a block (filter: eq)
     */
    inclusion_distance_eq?: number;
    /**
     * The distance from the slot when the attestation was included in a block (filter: ne)
     */
    inclusion_distance_ne?: number;
    /**
     * The distance from the slot when the attestation was included in a block (filter: lt)
     */
    inclusion_distance_lt?: number;
    /**
     * The distance from the slot when the attestation was included in a block (filter: lte)
     */
    inclusion_distance_lte?: number;
    /**
     * The distance from the slot when the attestation was included in a block (filter: gt)
     */
    inclusion_distance_gt?: number;
    /**
     * The distance from the slot when the attestation was included in a block (filter: gte)
     */
    inclusion_distance_gte?: number;
    /**
     * The distance from the slot when the attestation was included in a block (filter: between_min)
     */
    inclusion_distance_between_min?: number;
    /**
     * The distance from the slot when the attestation was included in a block (filter: between_max_value)
     */
    inclusion_distance_between_max_value?: number;
    /**
     * The distance from the slot when the attestation was included in a block (filter: in_values) (comma-separated list)
     */
    inclusion_distance_in_values?: string;
    /**
     * The distance from the slot when the attestation was included in a block (filter: not_in_values) (comma-separated list)
     */
    inclusion_distance_not_in_values?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: eq)
     */
    status_eq?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: ne)
     */
    status_ne?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: contains)
     */
    status_contains?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: starts_with)
     */
    status_starts_with?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: ends_with)
     */
    status_ends_with?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: like)
     */
    status_like?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: not_like)
     */
    status_not_like?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: in_values) (comma-separated list)
     */
    status_in_values?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: not_in_values) (comma-separated list)
     */
    status_not_in_values?: string;
    /**
     * The maximum number of fct_attestation_correctness_by_validator_canonical to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAttestationCorrectnessByValidatorCanonical` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_attestation_correctness_by_validator_canonical';
};

export type FctAttestationCorrectnessByValidatorCanonicalServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationCorrectnessByValidatorCanonicalServiceListError =
  FctAttestationCorrectnessByValidatorCanonicalServiceListErrors[keyof FctAttestationCorrectnessByValidatorCanonicalServiceListErrors];

export type FctAttestationCorrectnessByValidatorCanonicalServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAttestationCorrectnessByValidatorCanonicalResponse;
};

export type FctAttestationCorrectnessByValidatorCanonicalServiceListResponse =
  FctAttestationCorrectnessByValidatorCanonicalServiceListResponses[keyof FctAttestationCorrectnessByValidatorCanonicalServiceListResponses];

export type FctAttestationCorrectnessByValidatorCanonicalServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_attestation_correctness_by_validator_canonical/{slot_start_date_time}';
};

export type FctAttestationCorrectnessByValidatorCanonicalServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationCorrectnessByValidatorCanonicalServiceGetError =
  FctAttestationCorrectnessByValidatorCanonicalServiceGetErrors[keyof FctAttestationCorrectnessByValidatorCanonicalServiceGetErrors];

export type FctAttestationCorrectnessByValidatorCanonicalServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAttestationCorrectnessByValidatorCanonicalResponse;
};

export type FctAttestationCorrectnessByValidatorCanonicalServiceGetResponse =
  FctAttestationCorrectnessByValidatorCanonicalServiceGetResponses[keyof FctAttestationCorrectnessByValidatorCanonicalServiceGetResponses];

export type FctAttestationCorrectnessByValidatorHeadServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The index of the validator attesting (filter: eq)
     */
    attesting_validator_index_eq?: number;
    /**
     * The index of the validator attesting (filter: ne)
     */
    attesting_validator_index_ne?: number;
    /**
     * The index of the validator attesting (filter: lt)
     */
    attesting_validator_index_lt?: number;
    /**
     * The index of the validator attesting (filter: lte)
     */
    attesting_validator_index_lte?: number;
    /**
     * The index of the validator attesting (filter: gt)
     */
    attesting_validator_index_gt?: number;
    /**
     * The index of the validator attesting (filter: gte)
     */
    attesting_validator_index_gte?: number;
    /**
     * The index of the validator attesting (filter: between_min)
     */
    attesting_validator_index_between_min?: number;
    /**
     * The index of the validator attesting (filter: between_max_value)
     */
    attesting_validator_index_between_max_value?: number;
    /**
     * The index of the validator attesting (filter: in_values) (comma-separated list)
     */
    attesting_validator_index_in_values?: string;
    /**
     * The index of the validator attesting (filter: not_in_values) (comma-separated list)
     */
    attesting_validator_index_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: eq)
     */
    slot_distance_eq?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: ne)
     */
    slot_distance_ne?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: lt)
     */
    slot_distance_lt?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: lte)
     */
    slot_distance_lte?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: gt)
     */
    slot_distance_gt?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: gte)
     */
    slot_distance_gte?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: between_min)
     */
    slot_distance_between_min?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: between_max_value)
     */
    slot_distance_between_max_value?: number;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: in_values) (comma-separated list)
     */
    slot_distance_in_values?: string;
    /**
     * The distance from the slot to the attested block. If the attested block is the same as the slot, the distance is 0, if the attested block is the previous slot, the distance is 1, etc. If null, the attestation was missed, the block was orphaned and never seen by a sentry or the block was more than 64 slots ago (filter: not_in_values) (comma-separated list)
     */
    slot_distance_not_in_values?: string;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: eq)
     */
    propagation_distance_eq?: number;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: ne)
     */
    propagation_distance_ne?: number;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: lt)
     */
    propagation_distance_lt?: number;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: lte)
     */
    propagation_distance_lte?: number;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: gt)
     */
    propagation_distance_gt?: number;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: gte)
     */
    propagation_distance_gte?: number;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: between_min)
     */
    propagation_distance_between_min?: number;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: between_max_value)
     */
    propagation_distance_between_max_value?: number;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: in_values) (comma-separated list)
     */
    propagation_distance_in_values?: string;
    /**
     * The distance from the slot when the attestation was propagated. 0 means the attestation was propagated within the same slot as its duty was assigned, 1 means the attestation was propagated within the next slot, etc. (filter: not_in_values) (comma-separated list)
     */
    propagation_distance_not_in_values?: string;
    /**
     * The maximum number of fct_attestation_correctness_by_validator_head to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAttestationCorrectnessByValidatorHead` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_attestation_correctness_by_validator_head';
};

export type FctAttestationCorrectnessByValidatorHeadServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationCorrectnessByValidatorHeadServiceListError =
  FctAttestationCorrectnessByValidatorHeadServiceListErrors[keyof FctAttestationCorrectnessByValidatorHeadServiceListErrors];

export type FctAttestationCorrectnessByValidatorHeadServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAttestationCorrectnessByValidatorHeadResponse;
};

export type FctAttestationCorrectnessByValidatorHeadServiceListResponse =
  FctAttestationCorrectnessByValidatorHeadServiceListResponses[keyof FctAttestationCorrectnessByValidatorHeadServiceListResponses];

export type FctAttestationCorrectnessByValidatorHeadServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_attestation_correctness_by_validator_head/{slot_start_date_time}';
};

export type FctAttestationCorrectnessByValidatorHeadServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationCorrectnessByValidatorHeadServiceGetError =
  FctAttestationCorrectnessByValidatorHeadServiceGetErrors[keyof FctAttestationCorrectnessByValidatorHeadServiceGetErrors];

export type FctAttestationCorrectnessByValidatorHeadServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAttestationCorrectnessByValidatorHeadResponse;
};

export type FctAttestationCorrectnessByValidatorHeadServiceGetResponse =
  FctAttestationCorrectnessByValidatorHeadServiceGetResponses[keyof FctAttestationCorrectnessByValidatorHeadServiceGetResponses];

export type FctAttestationCorrectnessCanonicalServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The beacon block root hash (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * The maximum number of scheduled votes for the block (filter: eq)
     */
    votes_max_eq?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: ne)
     */
    votes_max_ne?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: lt)
     */
    votes_max_lt?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: lte)
     */
    votes_max_lte?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: gt)
     */
    votes_max_gt?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: gte)
     */
    votes_max_gte?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: between_min)
     */
    votes_max_between_min?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: between_max_value)
     */
    votes_max_between_max_value?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: in_values) (comma-separated list)
     */
    votes_max_in_values?: string;
    /**
     * The maximum number of scheduled votes for the block (filter: not_in_values) (comma-separated list)
     */
    votes_max_not_in_values?: string;
    /**
     * The number of votes for the block proposed in the current slot (filter: eq)
     */
    votes_head_eq?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: ne)
     */
    votes_head_ne?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: lt)
     */
    votes_head_lt?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: lte)
     */
    votes_head_lte?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: gt)
     */
    votes_head_gt?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: gte)
     */
    votes_head_gte?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: between_min)
     */
    votes_head_between_min?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: between_max_value)
     */
    votes_head_between_max_value?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: in_values) (comma-separated list)
     */
    votes_head_in_values?: string;
    /**
     * The number of votes for the block proposed in the current slot (filter: not_in_values) (comma-separated list)
     */
    votes_head_not_in_values?: string;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: eq)
     */
    votes_other_eq?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: ne)
     */
    votes_other_ne?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: lt)
     */
    votes_other_lt?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: lte)
     */
    votes_other_lte?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: gt)
     */
    votes_other_gt?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: gte)
     */
    votes_other_gte?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: between_min)
     */
    votes_other_between_min?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: between_max_value)
     */
    votes_other_between_max_value?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: in_values) (comma-separated list)
     */
    votes_other_in_values?: string;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: not_in_values) (comma-separated list)
     */
    votes_other_not_in_values?: string;
    /**
     * The maximum number of fct_attestation_correctness_canonical to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAttestationCorrectnessCanonical` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_attestation_correctness_canonical';
};

export type FctAttestationCorrectnessCanonicalServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationCorrectnessCanonicalServiceListError =
  FctAttestationCorrectnessCanonicalServiceListErrors[keyof FctAttestationCorrectnessCanonicalServiceListErrors];

export type FctAttestationCorrectnessCanonicalServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAttestationCorrectnessCanonicalResponse;
};

export type FctAttestationCorrectnessCanonicalServiceListResponse =
  FctAttestationCorrectnessCanonicalServiceListResponses[keyof FctAttestationCorrectnessCanonicalServiceListResponses];

export type FctAttestationCorrectnessCanonicalServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_attestation_correctness_canonical/{slot_start_date_time}';
};

export type FctAttestationCorrectnessCanonicalServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationCorrectnessCanonicalServiceGetError =
  FctAttestationCorrectnessCanonicalServiceGetErrors[keyof FctAttestationCorrectnessCanonicalServiceGetErrors];

export type FctAttestationCorrectnessCanonicalServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAttestationCorrectnessCanonicalResponse;
};

export type FctAttestationCorrectnessCanonicalServiceGetResponse =
  FctAttestationCorrectnessCanonicalServiceGetResponses[keyof FctAttestationCorrectnessCanonicalServiceGetResponses];

export type FctAttestationCorrectnessHeadServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The beacon block root hash (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * The maximum number of scheduled votes for the block (filter: eq)
     */
    votes_max_eq?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: ne)
     */
    votes_max_ne?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: lt)
     */
    votes_max_lt?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: lte)
     */
    votes_max_lte?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: gt)
     */
    votes_max_gt?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: gte)
     */
    votes_max_gte?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: between_min)
     */
    votes_max_between_min?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: between_max_value)
     */
    votes_max_between_max_value?: number;
    /**
     * The maximum number of scheduled votes for the block (filter: in_values) (comma-separated list)
     */
    votes_max_in_values?: string;
    /**
     * The maximum number of scheduled votes for the block (filter: not_in_values) (comma-separated list)
     */
    votes_max_not_in_values?: string;
    /**
     * The number of votes for the block proposed in the current slot (filter: eq)
     */
    votes_head_eq?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: ne)
     */
    votes_head_ne?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: lt)
     */
    votes_head_lt?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: lte)
     */
    votes_head_lte?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: gt)
     */
    votes_head_gt?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: gte)
     */
    votes_head_gte?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: between_min)
     */
    votes_head_between_min?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: between_max_value)
     */
    votes_head_between_max_value?: number;
    /**
     * The number of votes for the block proposed in the current slot (filter: in_values) (comma-separated list)
     */
    votes_head_in_values?: string;
    /**
     * The number of votes for the block proposed in the current slot (filter: not_in_values) (comma-separated list)
     */
    votes_head_not_in_values?: string;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: eq)
     */
    votes_other_eq?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: ne)
     */
    votes_other_ne?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: lt)
     */
    votes_other_lt?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: lte)
     */
    votes_other_lte?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: gt)
     */
    votes_other_gt?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: gte)
     */
    votes_other_gte?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: between_min)
     */
    votes_other_between_min?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: between_max_value)
     */
    votes_other_between_max_value?: number;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: in_values) (comma-separated list)
     */
    votes_other_in_values?: string;
    /**
     * The number of votes for any blocks proposed in previous slots (filter: not_in_values) (comma-separated list)
     */
    votes_other_not_in_values?: string;
    /**
     * The maximum number of fct_attestation_correctness_head to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAttestationCorrectnessHead` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_attestation_correctness_head';
};

export type FctAttestationCorrectnessHeadServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationCorrectnessHeadServiceListError =
  FctAttestationCorrectnessHeadServiceListErrors[keyof FctAttestationCorrectnessHeadServiceListErrors];

export type FctAttestationCorrectnessHeadServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAttestationCorrectnessHeadResponse;
};

export type FctAttestationCorrectnessHeadServiceListResponse =
  FctAttestationCorrectnessHeadServiceListResponses[keyof FctAttestationCorrectnessHeadServiceListResponses];

export type FctAttestationCorrectnessHeadServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_attestation_correctness_head/{slot_start_date_time}';
};

export type FctAttestationCorrectnessHeadServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationCorrectnessHeadServiceGetError =
  FctAttestationCorrectnessHeadServiceGetErrors[keyof FctAttestationCorrectnessHeadServiceGetErrors];

export type FctAttestationCorrectnessHeadServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAttestationCorrectnessHeadResponse;
};

export type FctAttestationCorrectnessHeadServiceGetResponse =
  FctAttestationCorrectnessHeadServiceGetResponses[keyof FctAttestationCorrectnessHeadServiceGetResponses];

export type FctAttestationFirstSeenChunked50MsServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash that was attested, null means the attestation was missed (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: eq)
     */
    chunk_slot_start_diff_eq?: number;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: ne)
     */
    chunk_slot_start_diff_ne?: number;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: lt)
     */
    chunk_slot_start_diff_lt?: number;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: lte)
     */
    chunk_slot_start_diff_lte?: number;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: gt)
     */
    chunk_slot_start_diff_gt?: number;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: gte)
     */
    chunk_slot_start_diff_gte?: number;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: between_min)
     */
    chunk_slot_start_diff_between_min?: number;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: between_max_value)
     */
    chunk_slot_start_diff_between_max_value?: number;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: in_values) (comma-separated list)
     */
    chunk_slot_start_diff_in_values?: string;
    /**
     * The different between the chunk start time and slot_start_date_time. "1500" would mean this chunk contains attestations first seen between 1500ms 1550ms into the slot (filter: not_in_values) (comma-separated list)
     */
    chunk_slot_start_diff_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The number of attestations in this chunk (filter: eq)
     */
    attestation_count_eq?: number;
    /**
     * The number of attestations in this chunk (filter: ne)
     */
    attestation_count_ne?: number;
    /**
     * The number of attestations in this chunk (filter: lt)
     */
    attestation_count_lt?: number;
    /**
     * The number of attestations in this chunk (filter: lte)
     */
    attestation_count_lte?: number;
    /**
     * The number of attestations in this chunk (filter: gt)
     */
    attestation_count_gt?: number;
    /**
     * The number of attestations in this chunk (filter: gte)
     */
    attestation_count_gte?: number;
    /**
     * The number of attestations in this chunk (filter: between_min)
     */
    attestation_count_between_min?: number;
    /**
     * The number of attestations in this chunk (filter: between_max_value)
     */
    attestation_count_between_max_value?: number;
    /**
     * The number of attestations in this chunk (filter: in_values) (comma-separated list)
     */
    attestation_count_in_values?: string;
    /**
     * The number of attestations in this chunk (filter: not_in_values) (comma-separated list)
     */
    attestation_count_not_in_values?: string;
    /**
     * The maximum number of fct_attestation_first_seen_chunked_50ms to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctAttestationFirstSeenChunked50ms` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_attestation_first_seen_chunked_50ms';
};

export type FctAttestationFirstSeenChunked50MsServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationFirstSeenChunked50MsServiceListError =
  FctAttestationFirstSeenChunked50MsServiceListErrors[keyof FctAttestationFirstSeenChunked50MsServiceListErrors];

export type FctAttestationFirstSeenChunked50MsServiceListResponses = {
  /**
   * OK
   */
  200: ListFctAttestationFirstSeenChunked50MsResponse;
};

export type FctAttestationFirstSeenChunked50MsServiceListResponse =
  FctAttestationFirstSeenChunked50MsServiceListResponses[keyof FctAttestationFirstSeenChunked50MsServiceListResponses];

export type FctAttestationFirstSeenChunked50MsServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_attestation_first_seen_chunked_50ms/{slot_start_date_time}';
};

export type FctAttestationFirstSeenChunked50MsServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctAttestationFirstSeenChunked50MsServiceGetError =
  FctAttestationFirstSeenChunked50MsServiceGetErrors[keyof FctAttestationFirstSeenChunked50MsServiceGetErrors];

export type FctAttestationFirstSeenChunked50MsServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctAttestationFirstSeenChunked50MsResponse;
};

export type FctAttestationFirstSeenChunked50MsServiceGetResponse =
  FctAttestationFirstSeenChunked50MsServiceGetResponses[keyof FctAttestationFirstSeenChunked50MsServiceGetResponses];

export type FctBlockServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the reorg slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the reorg slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the reorg slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the reorg slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the reorg slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the reorg slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the reorg slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the reorg slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the reorg slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the reorg slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The root hash of the beacon block (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The root hash of the beacon block (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The root hash of the beacon block (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The root hash of the beacon block (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The root hash of the beacon block (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The root hash of the beacon block (filter: like)
     */
    block_root_like?: string;
    /**
     * The root hash of the beacon block (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The root hash of the beacon block (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The root hash of the beacon block (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number from beacon block payload (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number from beacon block payload (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number from beacon block payload (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number from beacon block payload (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number from beacon block payload (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number from beacon block payload (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number from beacon block payload (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number from beacon block payload (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number from beacon block payload (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number from beacon block payload (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number from beacon block payload (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number from beacon block payload (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number from beacon block payload (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number from beacon block payload (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number from beacon block payload (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number from beacon block payload (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number from beacon block payload (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number from beacon block payload (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number from beacon block payload (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number from beacon block payload (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The version of the beacon block (filter: eq)
     */
    block_version_eq?: string;
    /**
     * The version of the beacon block (filter: ne)
     */
    block_version_ne?: string;
    /**
     * The version of the beacon block (filter: contains)
     */
    block_version_contains?: string;
    /**
     * The version of the beacon block (filter: starts_with)
     */
    block_version_starts_with?: string;
    /**
     * The version of the beacon block (filter: ends_with)
     */
    block_version_ends_with?: string;
    /**
     * The version of the beacon block (filter: like)
     */
    block_version_like?: string;
    /**
     * The version of the beacon block (filter: not_like)
     */
    block_version_not_like?: string;
    /**
     * The version of the beacon block (filter: in_values) (comma-separated list)
     */
    block_version_in_values?: string;
    /**
     * The version of the beacon block (filter: not_in_values) (comma-separated list)
     */
    block_version_not_in_values?: string;
    /**
     * The total bytes of the beacon block payload (filter: eq)
     */
    block_total_bytes_eq?: number;
    /**
     * The total bytes of the beacon block payload (filter: ne)
     */
    block_total_bytes_ne?: number;
    /**
     * The total bytes of the beacon block payload (filter: lt)
     */
    block_total_bytes_lt?: number;
    /**
     * The total bytes of the beacon block payload (filter: lte)
     */
    block_total_bytes_lte?: number;
    /**
     * The total bytes of the beacon block payload (filter: gt)
     */
    block_total_bytes_gt?: number;
    /**
     * The total bytes of the beacon block payload (filter: gte)
     */
    block_total_bytes_gte?: number;
    /**
     * The total bytes of the beacon block payload (filter: between_min)
     */
    block_total_bytes_between_min?: number;
    /**
     * The total bytes of the beacon block payload (filter: between_max_value)
     */
    block_total_bytes_between_max_value?: number;
    /**
     * The total bytes of the beacon block payload (filter: in_values) (comma-separated list)
     */
    block_total_bytes_in_values?: string;
    /**
     * The total bytes of the beacon block payload (filter: not_in_values) (comma-separated list)
     */
    block_total_bytes_not_in_values?: string;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: eq)
     */
    block_total_bytes_compressed_eq?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: ne)
     */
    block_total_bytes_compressed_ne?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: lt)
     */
    block_total_bytes_compressed_lt?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: lte)
     */
    block_total_bytes_compressed_lte?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: gt)
     */
    block_total_bytes_compressed_gt?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: gte)
     */
    block_total_bytes_compressed_gte?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: between_min)
     */
    block_total_bytes_compressed_between_min?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: between_max_value)
     */
    block_total_bytes_compressed_between_max_value?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: in_values) (comma-separated list)
     */
    block_total_bytes_compressed_in_values?: string;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: not_in_values) (comma-separated list)
     */
    block_total_bytes_compressed_not_in_values?: string;
    /**
     * The root hash of the parent beacon block (filter: eq)
     */
    parent_root_eq?: string;
    /**
     * The root hash of the parent beacon block (filter: ne)
     */
    parent_root_ne?: string;
    /**
     * The root hash of the parent beacon block (filter: contains)
     */
    parent_root_contains?: string;
    /**
     * The root hash of the parent beacon block (filter: starts_with)
     */
    parent_root_starts_with?: string;
    /**
     * The root hash of the parent beacon block (filter: ends_with)
     */
    parent_root_ends_with?: string;
    /**
     * The root hash of the parent beacon block (filter: like)
     */
    parent_root_like?: string;
    /**
     * The root hash of the parent beacon block (filter: not_like)
     */
    parent_root_not_like?: string;
    /**
     * The root hash of the parent beacon block (filter: in_values) (comma-separated list)
     */
    parent_root_in_values?: string;
    /**
     * The root hash of the parent beacon block (filter: not_in_values) (comma-separated list)
     */
    parent_root_not_in_values?: string;
    /**
     * The root hash of the beacon state at this block (filter: eq)
     */
    state_root_eq?: string;
    /**
     * The root hash of the beacon state at this block (filter: ne)
     */
    state_root_ne?: string;
    /**
     * The root hash of the beacon state at this block (filter: contains)
     */
    state_root_contains?: string;
    /**
     * The root hash of the beacon state at this block (filter: starts_with)
     */
    state_root_starts_with?: string;
    /**
     * The root hash of the beacon state at this block (filter: ends_with)
     */
    state_root_ends_with?: string;
    /**
     * The root hash of the beacon state at this block (filter: like)
     */
    state_root_like?: string;
    /**
     * The root hash of the beacon state at this block (filter: not_like)
     */
    state_root_not_like?: string;
    /**
     * The root hash of the beacon state at this block (filter: in_values) (comma-separated list)
     */
    state_root_in_values?: string;
    /**
     * The root hash of the beacon state at this block (filter: not_in_values) (comma-separated list)
     */
    state_root_not_in_values?: string;
    /**
     * The index of the validator that proposed the beacon block (filter: eq)
     */
    proposer_index_eq?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: ne)
     */
    proposer_index_ne?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: lt)
     */
    proposer_index_lt?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: lte)
     */
    proposer_index_lte?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: gt)
     */
    proposer_index_gt?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: gte)
     */
    proposer_index_gte?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: between_min)
     */
    proposer_index_between_min?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: between_max_value)
     */
    proposer_index_between_max_value?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: in_values) (comma-separated list)
     */
    proposer_index_in_values?: string;
    /**
     * The index of the validator that proposed the beacon block (filter: not_in_values) (comma-separated list)
     */
    proposer_index_not_in_values?: string;
    /**
     * The block hash of the associated execution block (filter: eq)
     */
    eth1_data_block_hash_eq?: string;
    /**
     * The block hash of the associated execution block (filter: ne)
     */
    eth1_data_block_hash_ne?: string;
    /**
     * The block hash of the associated execution block (filter: contains)
     */
    eth1_data_block_hash_contains?: string;
    /**
     * The block hash of the associated execution block (filter: starts_with)
     */
    eth1_data_block_hash_starts_with?: string;
    /**
     * The block hash of the associated execution block (filter: ends_with)
     */
    eth1_data_block_hash_ends_with?: string;
    /**
     * The block hash of the associated execution block (filter: like)
     */
    eth1_data_block_hash_like?: string;
    /**
     * The block hash of the associated execution block (filter: not_like)
     */
    eth1_data_block_hash_not_like?: string;
    /**
     * The block hash of the associated execution block (filter: in_values) (comma-separated list)
     */
    eth1_data_block_hash_in_values?: string;
    /**
     * The block hash of the associated execution block (filter: not_in_values) (comma-separated list)
     */
    eth1_data_block_hash_not_in_values?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: eq)
     */
    eth1_data_deposit_root_eq?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: ne)
     */
    eth1_data_deposit_root_ne?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: contains)
     */
    eth1_data_deposit_root_contains?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: starts_with)
     */
    eth1_data_deposit_root_starts_with?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: ends_with)
     */
    eth1_data_deposit_root_ends_with?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: like)
     */
    eth1_data_deposit_root_like?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: not_like)
     */
    eth1_data_deposit_root_not_like?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: in_values) (comma-separated list)
     */
    eth1_data_deposit_root_in_values?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: not_in_values) (comma-separated list)
     */
    eth1_data_deposit_root_not_in_values?: string;
    /**
     * The block hash of the execution payload (filter: eq)
     */
    execution_payload_block_hash_eq?: string;
    /**
     * The block hash of the execution payload (filter: ne)
     */
    execution_payload_block_hash_ne?: string;
    /**
     * The block hash of the execution payload (filter: contains)
     */
    execution_payload_block_hash_contains?: string;
    /**
     * The block hash of the execution payload (filter: starts_with)
     */
    execution_payload_block_hash_starts_with?: string;
    /**
     * The block hash of the execution payload (filter: ends_with)
     */
    execution_payload_block_hash_ends_with?: string;
    /**
     * The block hash of the execution payload (filter: like)
     */
    execution_payload_block_hash_like?: string;
    /**
     * The block hash of the execution payload (filter: not_like)
     */
    execution_payload_block_hash_not_like?: string;
    /**
     * The block hash of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_block_hash_in_values?: string;
    /**
     * The block hash of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_block_hash_not_in_values?: string;
    /**
     * The block number of the execution payload (filter: eq)
     */
    execution_payload_block_number_eq?: number;
    /**
     * The block number of the execution payload (filter: ne)
     */
    execution_payload_block_number_ne?: number;
    /**
     * The block number of the execution payload (filter: lt)
     */
    execution_payload_block_number_lt?: number;
    /**
     * The block number of the execution payload (filter: lte)
     */
    execution_payload_block_number_lte?: number;
    /**
     * The block number of the execution payload (filter: gt)
     */
    execution_payload_block_number_gt?: number;
    /**
     * The block number of the execution payload (filter: gte)
     */
    execution_payload_block_number_gte?: number;
    /**
     * The block number of the execution payload (filter: between_min)
     */
    execution_payload_block_number_between_min?: number;
    /**
     * The block number of the execution payload (filter: between_max_value)
     */
    execution_payload_block_number_between_max_value?: number;
    /**
     * The block number of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_block_number_in_values?: string;
    /**
     * The block number of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_block_number_not_in_values?: string;
    /**
     * The recipient of the fee for this execution payload (filter: eq)
     */
    execution_payload_fee_recipient_eq?: string;
    /**
     * The recipient of the fee for this execution payload (filter: ne)
     */
    execution_payload_fee_recipient_ne?: string;
    /**
     * The recipient of the fee for this execution payload (filter: contains)
     */
    execution_payload_fee_recipient_contains?: string;
    /**
     * The recipient of the fee for this execution payload (filter: starts_with)
     */
    execution_payload_fee_recipient_starts_with?: string;
    /**
     * The recipient of the fee for this execution payload (filter: ends_with)
     */
    execution_payload_fee_recipient_ends_with?: string;
    /**
     * The recipient of the fee for this execution payload (filter: like)
     */
    execution_payload_fee_recipient_like?: string;
    /**
     * The recipient of the fee for this execution payload (filter: not_like)
     */
    execution_payload_fee_recipient_not_like?: string;
    /**
     * The recipient of the fee for this execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_fee_recipient_in_values?: string;
    /**
     * The recipient of the fee for this execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_fee_recipient_not_in_values?: string;
    /**
     * Base fee per gas for execution payload (filter: eq)
     */
    execution_payload_base_fee_per_gas_eq?: string;
    /**
     * Base fee per gas for execution payload (filter: ne)
     */
    execution_payload_base_fee_per_gas_ne?: string;
    /**
     * Base fee per gas for execution payload (filter: contains)
     */
    execution_payload_base_fee_per_gas_contains?: string;
    /**
     * Base fee per gas for execution payload (filter: starts_with)
     */
    execution_payload_base_fee_per_gas_starts_with?: string;
    /**
     * Base fee per gas for execution payload (filter: ends_with)
     */
    execution_payload_base_fee_per_gas_ends_with?: string;
    /**
     * Base fee per gas for execution payload (filter: like)
     */
    execution_payload_base_fee_per_gas_like?: string;
    /**
     * Base fee per gas for execution payload (filter: not_like)
     */
    execution_payload_base_fee_per_gas_not_like?: string;
    /**
     * Base fee per gas for execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_base_fee_per_gas_in_values?: string;
    /**
     * Base fee per gas for execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_base_fee_per_gas_not_in_values?: string;
    /**
     * Gas used for blobs in execution payload (filter: eq)
     */
    execution_payload_blob_gas_used_eq?: number;
    /**
     * Gas used for blobs in execution payload (filter: ne)
     */
    execution_payload_blob_gas_used_ne?: number;
    /**
     * Gas used for blobs in execution payload (filter: lt)
     */
    execution_payload_blob_gas_used_lt?: number;
    /**
     * Gas used for blobs in execution payload (filter: lte)
     */
    execution_payload_blob_gas_used_lte?: number;
    /**
     * Gas used for blobs in execution payload (filter: gt)
     */
    execution_payload_blob_gas_used_gt?: number;
    /**
     * Gas used for blobs in execution payload (filter: gte)
     */
    execution_payload_blob_gas_used_gte?: number;
    /**
     * Gas used for blobs in execution payload (filter: between_min)
     */
    execution_payload_blob_gas_used_between_min?: number;
    /**
     * Gas used for blobs in execution payload (filter: between_max_value)
     */
    execution_payload_blob_gas_used_between_max_value?: number;
    /**
     * Gas used for blobs in execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_blob_gas_used_in_values?: string;
    /**
     * Gas used for blobs in execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_blob_gas_used_not_in_values?: string;
    /**
     * Excess gas used for blobs in execution payload (filter: eq)
     */
    execution_payload_excess_blob_gas_eq?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: ne)
     */
    execution_payload_excess_blob_gas_ne?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: lt)
     */
    execution_payload_excess_blob_gas_lt?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: lte)
     */
    execution_payload_excess_blob_gas_lte?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: gt)
     */
    execution_payload_excess_blob_gas_gt?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: gte)
     */
    execution_payload_excess_blob_gas_gte?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: between_min)
     */
    execution_payload_excess_blob_gas_between_min?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: between_max_value)
     */
    execution_payload_excess_blob_gas_between_max_value?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_excess_blob_gas_in_values?: string;
    /**
     * Excess gas used for blobs in execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_excess_blob_gas_not_in_values?: string;
    /**
     * Gas limit for execution payload (filter: eq)
     */
    execution_payload_gas_limit_eq?: number;
    /**
     * Gas limit for execution payload (filter: ne)
     */
    execution_payload_gas_limit_ne?: number;
    /**
     * Gas limit for execution payload (filter: lt)
     */
    execution_payload_gas_limit_lt?: number;
    /**
     * Gas limit for execution payload (filter: lte)
     */
    execution_payload_gas_limit_lte?: number;
    /**
     * Gas limit for execution payload (filter: gt)
     */
    execution_payload_gas_limit_gt?: number;
    /**
     * Gas limit for execution payload (filter: gte)
     */
    execution_payload_gas_limit_gte?: number;
    /**
     * Gas limit for execution payload (filter: between_min)
     */
    execution_payload_gas_limit_between_min?: number;
    /**
     * Gas limit for execution payload (filter: between_max_value)
     */
    execution_payload_gas_limit_between_max_value?: number;
    /**
     * Gas limit for execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_gas_limit_in_values?: string;
    /**
     * Gas limit for execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_gas_limit_not_in_values?: string;
    /**
     * Gas used for execution payload (filter: eq)
     */
    execution_payload_gas_used_eq?: number;
    /**
     * Gas used for execution payload (filter: ne)
     */
    execution_payload_gas_used_ne?: number;
    /**
     * Gas used for execution payload (filter: lt)
     */
    execution_payload_gas_used_lt?: number;
    /**
     * Gas used for execution payload (filter: lte)
     */
    execution_payload_gas_used_lte?: number;
    /**
     * Gas used for execution payload (filter: gt)
     */
    execution_payload_gas_used_gt?: number;
    /**
     * Gas used for execution payload (filter: gte)
     */
    execution_payload_gas_used_gte?: number;
    /**
     * Gas used for execution payload (filter: between_min)
     */
    execution_payload_gas_used_between_min?: number;
    /**
     * Gas used for execution payload (filter: between_max_value)
     */
    execution_payload_gas_used_between_max_value?: number;
    /**
     * Gas used for execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_gas_used_in_values?: string;
    /**
     * Gas used for execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_gas_used_not_in_values?: string;
    /**
     * The state root of the execution payload (filter: eq)
     */
    execution_payload_state_root_eq?: string;
    /**
     * The state root of the execution payload (filter: ne)
     */
    execution_payload_state_root_ne?: string;
    /**
     * The state root of the execution payload (filter: contains)
     */
    execution_payload_state_root_contains?: string;
    /**
     * The state root of the execution payload (filter: starts_with)
     */
    execution_payload_state_root_starts_with?: string;
    /**
     * The state root of the execution payload (filter: ends_with)
     */
    execution_payload_state_root_ends_with?: string;
    /**
     * The state root of the execution payload (filter: like)
     */
    execution_payload_state_root_like?: string;
    /**
     * The state root of the execution payload (filter: not_like)
     */
    execution_payload_state_root_not_like?: string;
    /**
     * The state root of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_state_root_in_values?: string;
    /**
     * The state root of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_state_root_not_in_values?: string;
    /**
     * The parent hash of the execution payload (filter: eq)
     */
    execution_payload_parent_hash_eq?: string;
    /**
     * The parent hash of the execution payload (filter: ne)
     */
    execution_payload_parent_hash_ne?: string;
    /**
     * The parent hash of the execution payload (filter: contains)
     */
    execution_payload_parent_hash_contains?: string;
    /**
     * The parent hash of the execution payload (filter: starts_with)
     */
    execution_payload_parent_hash_starts_with?: string;
    /**
     * The parent hash of the execution payload (filter: ends_with)
     */
    execution_payload_parent_hash_ends_with?: string;
    /**
     * The parent hash of the execution payload (filter: like)
     */
    execution_payload_parent_hash_like?: string;
    /**
     * The parent hash of the execution payload (filter: not_like)
     */
    execution_payload_parent_hash_not_like?: string;
    /**
     * The parent hash of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_parent_hash_in_values?: string;
    /**
     * The parent hash of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_parent_hash_not_in_values?: string;
    /**
     * The transaction count of the execution payload (filter: eq)
     */
    execution_payload_transactions_count_eq?: number;
    /**
     * The transaction count of the execution payload (filter: ne)
     */
    execution_payload_transactions_count_ne?: number;
    /**
     * The transaction count of the execution payload (filter: lt)
     */
    execution_payload_transactions_count_lt?: number;
    /**
     * The transaction count of the execution payload (filter: lte)
     */
    execution_payload_transactions_count_lte?: number;
    /**
     * The transaction count of the execution payload (filter: gt)
     */
    execution_payload_transactions_count_gt?: number;
    /**
     * The transaction count of the execution payload (filter: gte)
     */
    execution_payload_transactions_count_gte?: number;
    /**
     * The transaction count of the execution payload (filter: between_min)
     */
    execution_payload_transactions_count_between_min?: number;
    /**
     * The transaction count of the execution payload (filter: between_max_value)
     */
    execution_payload_transactions_count_between_max_value?: number;
    /**
     * The transaction count of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_transactions_count_in_values?: string;
    /**
     * The transaction count of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_transactions_count_not_in_values?: string;
    /**
     * The transaction total bytes of the execution payload (filter: eq)
     */
    execution_payload_transactions_total_bytes_eq?: number;
    /**
     * The transaction total bytes of the execution payload (filter: ne)
     */
    execution_payload_transactions_total_bytes_ne?: number;
    /**
     * The transaction total bytes of the execution payload (filter: lt)
     */
    execution_payload_transactions_total_bytes_lt?: number;
    /**
     * The transaction total bytes of the execution payload (filter: lte)
     */
    execution_payload_transactions_total_bytes_lte?: number;
    /**
     * The transaction total bytes of the execution payload (filter: gt)
     */
    execution_payload_transactions_total_bytes_gt?: number;
    /**
     * The transaction total bytes of the execution payload (filter: gte)
     */
    execution_payload_transactions_total_bytes_gte?: number;
    /**
     * The transaction total bytes of the execution payload (filter: between_min)
     */
    execution_payload_transactions_total_bytes_between_min?: number;
    /**
     * The transaction total bytes of the execution payload (filter: between_max_value)
     */
    execution_payload_transactions_total_bytes_between_max_value?: number;
    /**
     * The transaction total bytes of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_in_values?: string;
    /**
     * The transaction total bytes of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_not_in_values?: string;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: eq)
     */
    execution_payload_transactions_total_bytes_compressed_eq?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: ne)
     */
    execution_payload_transactions_total_bytes_compressed_ne?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: lt)
     */
    execution_payload_transactions_total_bytes_compressed_lt?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: lte)
     */
    execution_payload_transactions_total_bytes_compressed_lte?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: gt)
     */
    execution_payload_transactions_total_bytes_compressed_gt?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: gte)
     */
    execution_payload_transactions_total_bytes_compressed_gte?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: between_min)
     */
    execution_payload_transactions_total_bytes_compressed_between_min?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: between_max_value)
     */
    execution_payload_transactions_total_bytes_compressed_between_max_value?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_compressed_in_values?: string;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: not_in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_compressed_not_in_values?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: eq)
     */
    status_eq?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: ne)
     */
    status_ne?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: contains)
     */
    status_contains?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: starts_with)
     */
    status_starts_with?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: ends_with)
     */
    status_ends_with?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: like)
     */
    status_like?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: not_like)
     */
    status_not_like?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: in_values) (comma-separated list)
     */
    status_in_values?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: not_in_values) (comma-separated list)
     */
    status_not_in_values?: string;
    /**
     * The maximum number of fct_block to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlock` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block';
};

export type FctBlockServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockServiceListError = FctBlockServiceListErrors[keyof FctBlockServiceListErrors];

export type FctBlockServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockResponse;
};

export type FctBlockServiceListResponse = FctBlockServiceListResponses[keyof FctBlockServiceListResponses];

export type FctBlockServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the reorg slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block/{slot_start_date_time}';
};

export type FctBlockServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockServiceGetError = FctBlockServiceGetErrors[keyof FctBlockServiceGetErrors];

export type FctBlockServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockResponse;
};

export type FctBlockServiceGetResponse = FctBlockServiceGetResponses[keyof FctBlockServiceGetResponses];

export type FctBlockBlobCountServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The beacon block root hash (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The number of blobs in the block (filter: eq)
     */
    blob_count_eq?: number;
    /**
     * The number of blobs in the block (filter: ne)
     */
    blob_count_ne?: number;
    /**
     * The number of blobs in the block (filter: lt)
     */
    blob_count_lt?: number;
    /**
     * The number of blobs in the block (filter: lte)
     */
    blob_count_lte?: number;
    /**
     * The number of blobs in the block (filter: gt)
     */
    blob_count_gt?: number;
    /**
     * The number of blobs in the block (filter: gte)
     */
    blob_count_gte?: number;
    /**
     * The number of blobs in the block (filter: between_min)
     */
    blob_count_between_min?: number;
    /**
     * The number of blobs in the block (filter: between_max_value)
     */
    blob_count_between_max_value?: number;
    /**
     * The number of blobs in the block (filter: in_values) (comma-separated list)
     */
    blob_count_in_values?: string;
    /**
     * The number of blobs in the block (filter: not_in_values) (comma-separated list)
     */
    blob_count_not_in_values?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: eq)
     */
    status_eq?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: ne)
     */
    status_ne?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: contains)
     */
    status_contains?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: starts_with)
     */
    status_starts_with?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: ends_with)
     */
    status_ends_with?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: like)
     */
    status_like?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: not_like)
     */
    status_not_like?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: in_values) (comma-separated list)
     */
    status_in_values?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: not_in_values) (comma-separated list)
     */
    status_not_in_values?: string;
    /**
     * The maximum number of fct_block_blob_count to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockBlobCount` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_blob_count';
};

export type FctBlockBlobCountServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockBlobCountServiceListError =
  FctBlockBlobCountServiceListErrors[keyof FctBlockBlobCountServiceListErrors];

export type FctBlockBlobCountServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockBlobCountResponse;
};

export type FctBlockBlobCountServiceListResponse =
  FctBlockBlobCountServiceListResponses[keyof FctBlockBlobCountServiceListResponses];

export type FctBlockBlobCountServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_blob_count/{slot_start_date_time}';
};

export type FctBlockBlobCountServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockBlobCountServiceGetError =
  FctBlockBlobCountServiceGetErrors[keyof FctBlockBlobCountServiceGetErrors];

export type FctBlockBlobCountServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockBlobCountResponse;
};

export type FctBlockBlobCountServiceGetResponse =
  FctBlockBlobCountServiceGetResponses[keyof FctBlockBlobCountServiceGetResponses];

export type FctBlockBlobCountHeadServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The beacon block root hash (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The number of blobs in the block (filter: eq)
     */
    blob_count_eq?: number;
    /**
     * The number of blobs in the block (filter: ne)
     */
    blob_count_ne?: number;
    /**
     * The number of blobs in the block (filter: lt)
     */
    blob_count_lt?: number;
    /**
     * The number of blobs in the block (filter: lte)
     */
    blob_count_lte?: number;
    /**
     * The number of blobs in the block (filter: gt)
     */
    blob_count_gt?: number;
    /**
     * The number of blobs in the block (filter: gte)
     */
    blob_count_gte?: number;
    /**
     * The number of blobs in the block (filter: between_min)
     */
    blob_count_between_min?: number;
    /**
     * The number of blobs in the block (filter: between_max_value)
     */
    blob_count_between_max_value?: number;
    /**
     * The number of blobs in the block (filter: in_values) (comma-separated list)
     */
    blob_count_in_values?: string;
    /**
     * The number of blobs in the block (filter: not_in_values) (comma-separated list)
     */
    blob_count_not_in_values?: string;
    /**
     * The maximum number of fct_block_blob_count_head to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockBlobCountHead` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_blob_count_head';
};

export type FctBlockBlobCountHeadServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockBlobCountHeadServiceListError =
  FctBlockBlobCountHeadServiceListErrors[keyof FctBlockBlobCountHeadServiceListErrors];

export type FctBlockBlobCountHeadServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockBlobCountHeadResponse;
};

export type FctBlockBlobCountHeadServiceListResponse =
  FctBlockBlobCountHeadServiceListResponses[keyof FctBlockBlobCountHeadServiceListResponses];

export type FctBlockBlobCountHeadServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_blob_count_head/{slot_start_date_time}';
};

export type FctBlockBlobCountHeadServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockBlobCountHeadServiceGetError =
  FctBlockBlobCountHeadServiceGetErrors[keyof FctBlockBlobCountHeadServiceGetErrors];

export type FctBlockBlobCountHeadServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockBlobCountHeadResponse;
};

export type FctBlockBlobCountHeadServiceGetResponse =
  FctBlockBlobCountHeadServiceGetResponses[keyof FctBlockBlobCountHeadServiceGetResponses];

export type FctBlockBlobFirstSeenByNodeServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The beacon block root hash (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * The blob index (filter: eq)
     */
    blob_index_eq?: number;
    /**
     * The blob index (filter: ne)
     */
    blob_index_ne?: number;
    /**
     * The blob index (filter: lt)
     */
    blob_index_lt?: number;
    /**
     * The blob index (filter: lte)
     */
    blob_index_lte?: number;
    /**
     * The blob index (filter: gt)
     */
    blob_index_gt?: number;
    /**
     * The blob index (filter: gte)
     */
    blob_index_gte?: number;
    /**
     * The blob index (filter: between_min)
     */
    blob_index_between_min?: number;
    /**
     * The blob index (filter: between_max_value)
     */
    blob_index_between_max_value?: number;
    /**
     * The blob index (filter: in_values) (comma-separated list)
     */
    blob_index_in_values?: string;
    /**
     * The blob index (filter: not_in_values) (comma-separated list)
     */
    blob_index_not_in_values?: string;
    /**
     * Name of the client (filter: eq)
     */
    meta_client_name_eq?: string;
    /**
     * Name of the client (filter: ne)
     */
    meta_client_name_ne?: string;
    /**
     * Name of the client (filter: contains)
     */
    meta_client_name_contains?: string;
    /**
     * Name of the client (filter: starts_with)
     */
    meta_client_name_starts_with?: string;
    /**
     * Name of the client (filter: ends_with)
     */
    meta_client_name_ends_with?: string;
    /**
     * Name of the client (filter: like)
     */
    meta_client_name_like?: string;
    /**
     * Name of the client (filter: not_like)
     */
    meta_client_name_not_like?: string;
    /**
     * Name of the client (filter: in_values) (comma-separated list)
     */
    meta_client_name_in_values?: string;
    /**
     * Name of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_name_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Source of the event (filter: eq)
     */
    source_eq?: string;
    /**
     * Source of the event (filter: ne)
     */
    source_ne?: string;
    /**
     * Source of the event (filter: contains)
     */
    source_contains?: string;
    /**
     * Source of the event (filter: starts_with)
     */
    source_starts_with?: string;
    /**
     * Source of the event (filter: ends_with)
     */
    source_ends_with?: string;
    /**
     * Source of the event (filter: like)
     */
    source_like?: string;
    /**
     * Source of the event (filter: not_like)
     */
    source_not_like?: string;
    /**
     * Source of the event (filter: in_values) (comma-separated list)
     */
    source_in_values?: string;
    /**
     * Source of the event (filter: not_in_values) (comma-separated list)
     */
    source_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The time from slot start for the client to see the block (filter: eq)
     */
    seen_slot_start_diff_eq?: number;
    /**
     * The time from slot start for the client to see the block (filter: ne)
     */
    seen_slot_start_diff_ne?: number;
    /**
     * The time from slot start for the client to see the block (filter: lt)
     */
    seen_slot_start_diff_lt?: number;
    /**
     * The time from slot start for the client to see the block (filter: lte)
     */
    seen_slot_start_diff_lte?: number;
    /**
     * The time from slot start for the client to see the block (filter: gt)
     */
    seen_slot_start_diff_gt?: number;
    /**
     * The time from slot start for the client to see the block (filter: gte)
     */
    seen_slot_start_diff_gte?: number;
    /**
     * The time from slot start for the client to see the block (filter: between_min)
     */
    seen_slot_start_diff_between_min?: number;
    /**
     * The time from slot start for the client to see the block (filter: between_max_value)
     */
    seen_slot_start_diff_between_max_value?: number;
    /**
     * The time from slot start for the client to see the block (filter: in_values) (comma-separated list)
     */
    seen_slot_start_diff_in_values?: string;
    /**
     * The time from slot start for the client to see the block (filter: not_in_values) (comma-separated list)
     */
    seen_slot_start_diff_not_in_values?: string;
    /**
     * Username of the node (filter: eq)
     */
    username_eq?: string;
    /**
     * Username of the node (filter: ne)
     */
    username_ne?: string;
    /**
     * Username of the node (filter: contains)
     */
    username_contains?: string;
    /**
     * Username of the node (filter: starts_with)
     */
    username_starts_with?: string;
    /**
     * Username of the node (filter: ends_with)
     */
    username_ends_with?: string;
    /**
     * Username of the node (filter: like)
     */
    username_like?: string;
    /**
     * Username of the node (filter: not_like)
     */
    username_not_like?: string;
    /**
     * Username of the node (filter: in_values) (comma-separated list)
     */
    username_in_values?: string;
    /**
     * Username of the node (filter: not_in_values) (comma-separated list)
     */
    username_not_in_values?: string;
    /**
     * ID of the node (filter: eq)
     */
    node_id_eq?: string;
    /**
     * ID of the node (filter: ne)
     */
    node_id_ne?: string;
    /**
     * ID of the node (filter: contains)
     */
    node_id_contains?: string;
    /**
     * ID of the node (filter: starts_with)
     */
    node_id_starts_with?: string;
    /**
     * ID of the node (filter: ends_with)
     */
    node_id_ends_with?: string;
    /**
     * ID of the node (filter: like)
     */
    node_id_like?: string;
    /**
     * ID of the node (filter: not_like)
     */
    node_id_not_like?: string;
    /**
     * ID of the node (filter: in_values) (comma-separated list)
     */
    node_id_in_values?: string;
    /**
     * ID of the node (filter: not_in_values) (comma-separated list)
     */
    node_id_not_in_values?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: eq)
     */
    classification_eq?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: ne)
     */
    classification_ne?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: contains)
     */
    classification_contains?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: starts_with)
     */
    classification_starts_with?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: ends_with)
     */
    classification_ends_with?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: like)
     */
    classification_like?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: not_like)
     */
    classification_not_like?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: in_values) (comma-separated list)
     */
    classification_in_values?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: not_in_values) (comma-separated list)
     */
    classification_not_in_values?: string;
    /**
     * Version of the client (filter: eq)
     */
    meta_client_version_eq?: string;
    /**
     * Version of the client (filter: ne)
     */
    meta_client_version_ne?: string;
    /**
     * Version of the client (filter: contains)
     */
    meta_client_version_contains?: string;
    /**
     * Version of the client (filter: starts_with)
     */
    meta_client_version_starts_with?: string;
    /**
     * Version of the client (filter: ends_with)
     */
    meta_client_version_ends_with?: string;
    /**
     * Version of the client (filter: like)
     */
    meta_client_version_like?: string;
    /**
     * Version of the client (filter: not_like)
     */
    meta_client_version_not_like?: string;
    /**
     * Version of the client (filter: in_values) (comma-separated list)
     */
    meta_client_version_in_values?: string;
    /**
     * Version of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_version_not_in_values?: string;
    /**
     * Implementation of the client (filter: eq)
     */
    meta_client_implementation_eq?: string;
    /**
     * Implementation of the client (filter: ne)
     */
    meta_client_implementation_ne?: string;
    /**
     * Implementation of the client (filter: contains)
     */
    meta_client_implementation_contains?: string;
    /**
     * Implementation of the client (filter: starts_with)
     */
    meta_client_implementation_starts_with?: string;
    /**
     * Implementation of the client (filter: ends_with)
     */
    meta_client_implementation_ends_with?: string;
    /**
     * Implementation of the client (filter: like)
     */
    meta_client_implementation_like?: string;
    /**
     * Implementation of the client (filter: not_like)
     */
    meta_client_implementation_not_like?: string;
    /**
     * Implementation of the client (filter: in_values) (comma-separated list)
     */
    meta_client_implementation_in_values?: string;
    /**
     * Implementation of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_implementation_not_in_values?: string;
    /**
     * City of the client (filter: eq)
     */
    meta_client_geo_city_eq?: string;
    /**
     * City of the client (filter: ne)
     */
    meta_client_geo_city_ne?: string;
    /**
     * City of the client (filter: contains)
     */
    meta_client_geo_city_contains?: string;
    /**
     * City of the client (filter: starts_with)
     */
    meta_client_geo_city_starts_with?: string;
    /**
     * City of the client (filter: ends_with)
     */
    meta_client_geo_city_ends_with?: string;
    /**
     * City of the client (filter: like)
     */
    meta_client_geo_city_like?: string;
    /**
     * City of the client (filter: not_like)
     */
    meta_client_geo_city_not_like?: string;
    /**
     * City of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_city_in_values?: string;
    /**
     * City of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_city_not_in_values?: string;
    /**
     * Country of the client (filter: eq)
     */
    meta_client_geo_country_eq?: string;
    /**
     * Country of the client (filter: ne)
     */
    meta_client_geo_country_ne?: string;
    /**
     * Country of the client (filter: contains)
     */
    meta_client_geo_country_contains?: string;
    /**
     * Country of the client (filter: starts_with)
     */
    meta_client_geo_country_starts_with?: string;
    /**
     * Country of the client (filter: ends_with)
     */
    meta_client_geo_country_ends_with?: string;
    /**
     * Country of the client (filter: like)
     */
    meta_client_geo_country_like?: string;
    /**
     * Country of the client (filter: not_like)
     */
    meta_client_geo_country_not_like?: string;
    /**
     * Country of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_country_in_values?: string;
    /**
     * Country of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_country_not_in_values?: string;
    /**
     * Country code of the client (filter: eq)
     */
    meta_client_geo_country_code_eq?: string;
    /**
     * Country code of the client (filter: ne)
     */
    meta_client_geo_country_code_ne?: string;
    /**
     * Country code of the client (filter: contains)
     */
    meta_client_geo_country_code_contains?: string;
    /**
     * Country code of the client (filter: starts_with)
     */
    meta_client_geo_country_code_starts_with?: string;
    /**
     * Country code of the client (filter: ends_with)
     */
    meta_client_geo_country_code_ends_with?: string;
    /**
     * Country code of the client (filter: like)
     */
    meta_client_geo_country_code_like?: string;
    /**
     * Country code of the client (filter: not_like)
     */
    meta_client_geo_country_code_not_like?: string;
    /**
     * Country code of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_country_code_in_values?: string;
    /**
     * Country code of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_country_code_not_in_values?: string;
    /**
     * Continent code of the client (filter: eq)
     */
    meta_client_geo_continent_code_eq?: string;
    /**
     * Continent code of the client (filter: ne)
     */
    meta_client_geo_continent_code_ne?: string;
    /**
     * Continent code of the client (filter: contains)
     */
    meta_client_geo_continent_code_contains?: string;
    /**
     * Continent code of the client (filter: starts_with)
     */
    meta_client_geo_continent_code_starts_with?: string;
    /**
     * Continent code of the client (filter: ends_with)
     */
    meta_client_geo_continent_code_ends_with?: string;
    /**
     * Continent code of the client (filter: like)
     */
    meta_client_geo_continent_code_like?: string;
    /**
     * Continent code of the client (filter: not_like)
     */
    meta_client_geo_continent_code_not_like?: string;
    /**
     * Continent code of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_continent_code_in_values?: string;
    /**
     * Continent code of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_continent_code_not_in_values?: string;
    /**
     * Filter meta_client_geo_longitude using value
     */
    meta_client_geo_longitude_value?: number;
    /**
     * Filter meta_client_geo_latitude using value
     */
    meta_client_geo_latitude_value?: number;
    /**
     * Autonomous system number of the client (filter: eq)
     */
    meta_client_geo_autonomous_system_number_eq?: number;
    /**
     * Autonomous system number of the client (filter: ne)
     */
    meta_client_geo_autonomous_system_number_ne?: number;
    /**
     * Autonomous system number of the client (filter: lt)
     */
    meta_client_geo_autonomous_system_number_lt?: number;
    /**
     * Autonomous system number of the client (filter: lte)
     */
    meta_client_geo_autonomous_system_number_lte?: number;
    /**
     * Autonomous system number of the client (filter: gt)
     */
    meta_client_geo_autonomous_system_number_gt?: number;
    /**
     * Autonomous system number of the client (filter: gte)
     */
    meta_client_geo_autonomous_system_number_gte?: number;
    /**
     * Autonomous system number of the client (filter: between_min)
     */
    meta_client_geo_autonomous_system_number_between_min?: number;
    /**
     * Autonomous system number of the client (filter: between_max_value)
     */
    meta_client_geo_autonomous_system_number_between_max_value?: number;
    /**
     * Autonomous system number of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_number_in_values?: string;
    /**
     * Autonomous system number of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_number_not_in_values?: string;
    /**
     * Autonomous system organization of the client (filter: eq)
     */
    meta_client_geo_autonomous_system_organization_eq?: string;
    /**
     * Autonomous system organization of the client (filter: ne)
     */
    meta_client_geo_autonomous_system_organization_ne?: string;
    /**
     * Autonomous system organization of the client (filter: contains)
     */
    meta_client_geo_autonomous_system_organization_contains?: string;
    /**
     * Autonomous system organization of the client (filter: starts_with)
     */
    meta_client_geo_autonomous_system_organization_starts_with?: string;
    /**
     * Autonomous system organization of the client (filter: ends_with)
     */
    meta_client_geo_autonomous_system_organization_ends_with?: string;
    /**
     * Autonomous system organization of the client (filter: like)
     */
    meta_client_geo_autonomous_system_organization_like?: string;
    /**
     * Autonomous system organization of the client (filter: not_like)
     */
    meta_client_geo_autonomous_system_organization_not_like?: string;
    /**
     * Autonomous system organization of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_organization_in_values?: string;
    /**
     * Autonomous system organization of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_organization_not_in_values?: string;
    /**
     * Ethereum consensus client version (filter: eq)
     */
    meta_consensus_version_eq?: string;
    /**
     * Ethereum consensus client version (filter: ne)
     */
    meta_consensus_version_ne?: string;
    /**
     * Ethereum consensus client version (filter: contains)
     */
    meta_consensus_version_contains?: string;
    /**
     * Ethereum consensus client version (filter: starts_with)
     */
    meta_consensus_version_starts_with?: string;
    /**
     * Ethereum consensus client version (filter: ends_with)
     */
    meta_consensus_version_ends_with?: string;
    /**
     * Ethereum consensus client version (filter: like)
     */
    meta_consensus_version_like?: string;
    /**
     * Ethereum consensus client version (filter: not_like)
     */
    meta_consensus_version_not_like?: string;
    /**
     * Ethereum consensus client version (filter: in_values) (comma-separated list)
     */
    meta_consensus_version_in_values?: string;
    /**
     * Ethereum consensus client version (filter: not_in_values) (comma-separated list)
     */
    meta_consensus_version_not_in_values?: string;
    /**
     * Ethereum consensus client implementation (filter: eq)
     */
    meta_consensus_implementation_eq?: string;
    /**
     * Ethereum consensus client implementation (filter: ne)
     */
    meta_consensus_implementation_ne?: string;
    /**
     * Ethereum consensus client implementation (filter: contains)
     */
    meta_consensus_implementation_contains?: string;
    /**
     * Ethereum consensus client implementation (filter: starts_with)
     */
    meta_consensus_implementation_starts_with?: string;
    /**
     * Ethereum consensus client implementation (filter: ends_with)
     */
    meta_consensus_implementation_ends_with?: string;
    /**
     * Ethereum consensus client implementation (filter: like)
     */
    meta_consensus_implementation_like?: string;
    /**
     * Ethereum consensus client implementation (filter: not_like)
     */
    meta_consensus_implementation_not_like?: string;
    /**
     * Ethereum consensus client implementation (filter: in_values) (comma-separated list)
     */
    meta_consensus_implementation_in_values?: string;
    /**
     * Ethereum consensus client implementation (filter: not_in_values) (comma-separated list)
     */
    meta_consensus_implementation_not_in_values?: string;
    /**
     * The maximum number of fct_block_blob_first_seen_by_node to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockBlobFirstSeenByNode` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_blob_first_seen_by_node';
};

export type FctBlockBlobFirstSeenByNodeServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockBlobFirstSeenByNodeServiceListError =
  FctBlockBlobFirstSeenByNodeServiceListErrors[keyof FctBlockBlobFirstSeenByNodeServiceListErrors];

export type FctBlockBlobFirstSeenByNodeServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockBlobFirstSeenByNodeResponse;
};

export type FctBlockBlobFirstSeenByNodeServiceListResponse =
  FctBlockBlobFirstSeenByNodeServiceListResponses[keyof FctBlockBlobFirstSeenByNodeServiceListResponses];

export type FctBlockBlobFirstSeenByNodeServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_blob_first_seen_by_node/{slot_start_date_time}';
};

export type FctBlockBlobFirstSeenByNodeServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockBlobFirstSeenByNodeServiceGetError =
  FctBlockBlobFirstSeenByNodeServiceGetErrors[keyof FctBlockBlobFirstSeenByNodeServiceGetErrors];

export type FctBlockBlobFirstSeenByNodeServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockBlobFirstSeenByNodeResponse;
};

export type FctBlockBlobFirstSeenByNodeServiceGetResponse =
  FctBlockBlobFirstSeenByNodeServiceGetResponses[keyof FctBlockBlobFirstSeenByNodeServiceGetResponses];

export type FctBlockFirstSeenByNodeServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The beacon block root hash (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * Name of the client (filter: eq)
     */
    meta_client_name_eq?: string;
    /**
     * Name of the client (filter: ne)
     */
    meta_client_name_ne?: string;
    /**
     * Name of the client (filter: contains)
     */
    meta_client_name_contains?: string;
    /**
     * Name of the client (filter: starts_with)
     */
    meta_client_name_starts_with?: string;
    /**
     * Name of the client (filter: ends_with)
     */
    meta_client_name_ends_with?: string;
    /**
     * Name of the client (filter: like)
     */
    meta_client_name_like?: string;
    /**
     * Name of the client (filter: not_like)
     */
    meta_client_name_not_like?: string;
    /**
     * Name of the client (filter: in_values) (comma-separated list)
     */
    meta_client_name_in_values?: string;
    /**
     * Name of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_name_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Source of the event (filter: eq)
     */
    source_eq?: string;
    /**
     * Source of the event (filter: ne)
     */
    source_ne?: string;
    /**
     * Source of the event (filter: contains)
     */
    source_contains?: string;
    /**
     * Source of the event (filter: starts_with)
     */
    source_starts_with?: string;
    /**
     * Source of the event (filter: ends_with)
     */
    source_ends_with?: string;
    /**
     * Source of the event (filter: like)
     */
    source_like?: string;
    /**
     * Source of the event (filter: not_like)
     */
    source_not_like?: string;
    /**
     * Source of the event (filter: in_values) (comma-separated list)
     */
    source_in_values?: string;
    /**
     * Source of the event (filter: not_in_values) (comma-separated list)
     */
    source_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The time from slot start for the client to see the block (filter: eq)
     */
    seen_slot_start_diff_eq?: number;
    /**
     * The time from slot start for the client to see the block (filter: ne)
     */
    seen_slot_start_diff_ne?: number;
    /**
     * The time from slot start for the client to see the block (filter: lt)
     */
    seen_slot_start_diff_lt?: number;
    /**
     * The time from slot start for the client to see the block (filter: lte)
     */
    seen_slot_start_diff_lte?: number;
    /**
     * The time from slot start for the client to see the block (filter: gt)
     */
    seen_slot_start_diff_gt?: number;
    /**
     * The time from slot start for the client to see the block (filter: gte)
     */
    seen_slot_start_diff_gte?: number;
    /**
     * The time from slot start for the client to see the block (filter: between_min)
     */
    seen_slot_start_diff_between_min?: number;
    /**
     * The time from slot start for the client to see the block (filter: between_max_value)
     */
    seen_slot_start_diff_between_max_value?: number;
    /**
     * The time from slot start for the client to see the block (filter: in_values) (comma-separated list)
     */
    seen_slot_start_diff_in_values?: string;
    /**
     * The time from slot start for the client to see the block (filter: not_in_values) (comma-separated list)
     */
    seen_slot_start_diff_not_in_values?: string;
    /**
     * Username of the node (filter: eq)
     */
    username_eq?: string;
    /**
     * Username of the node (filter: ne)
     */
    username_ne?: string;
    /**
     * Username of the node (filter: contains)
     */
    username_contains?: string;
    /**
     * Username of the node (filter: starts_with)
     */
    username_starts_with?: string;
    /**
     * Username of the node (filter: ends_with)
     */
    username_ends_with?: string;
    /**
     * Username of the node (filter: like)
     */
    username_like?: string;
    /**
     * Username of the node (filter: not_like)
     */
    username_not_like?: string;
    /**
     * Username of the node (filter: in_values) (comma-separated list)
     */
    username_in_values?: string;
    /**
     * Username of the node (filter: not_in_values) (comma-separated list)
     */
    username_not_in_values?: string;
    /**
     * ID of the node (filter: eq)
     */
    node_id_eq?: string;
    /**
     * ID of the node (filter: ne)
     */
    node_id_ne?: string;
    /**
     * ID of the node (filter: contains)
     */
    node_id_contains?: string;
    /**
     * ID of the node (filter: starts_with)
     */
    node_id_starts_with?: string;
    /**
     * ID of the node (filter: ends_with)
     */
    node_id_ends_with?: string;
    /**
     * ID of the node (filter: like)
     */
    node_id_like?: string;
    /**
     * ID of the node (filter: not_like)
     */
    node_id_not_like?: string;
    /**
     * ID of the node (filter: in_values) (comma-separated list)
     */
    node_id_in_values?: string;
    /**
     * ID of the node (filter: not_in_values) (comma-separated list)
     */
    node_id_not_in_values?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: eq)
     */
    classification_eq?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: ne)
     */
    classification_ne?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: contains)
     */
    classification_contains?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: starts_with)
     */
    classification_starts_with?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: ends_with)
     */
    classification_ends_with?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: like)
     */
    classification_like?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: not_like)
     */
    classification_not_like?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: in_values) (comma-separated list)
     */
    classification_in_values?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: not_in_values) (comma-separated list)
     */
    classification_not_in_values?: string;
    /**
     * Version of the client (filter: eq)
     */
    meta_client_version_eq?: string;
    /**
     * Version of the client (filter: ne)
     */
    meta_client_version_ne?: string;
    /**
     * Version of the client (filter: contains)
     */
    meta_client_version_contains?: string;
    /**
     * Version of the client (filter: starts_with)
     */
    meta_client_version_starts_with?: string;
    /**
     * Version of the client (filter: ends_with)
     */
    meta_client_version_ends_with?: string;
    /**
     * Version of the client (filter: like)
     */
    meta_client_version_like?: string;
    /**
     * Version of the client (filter: not_like)
     */
    meta_client_version_not_like?: string;
    /**
     * Version of the client (filter: in_values) (comma-separated list)
     */
    meta_client_version_in_values?: string;
    /**
     * Version of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_version_not_in_values?: string;
    /**
     * Implementation of the client (filter: eq)
     */
    meta_client_implementation_eq?: string;
    /**
     * Implementation of the client (filter: ne)
     */
    meta_client_implementation_ne?: string;
    /**
     * Implementation of the client (filter: contains)
     */
    meta_client_implementation_contains?: string;
    /**
     * Implementation of the client (filter: starts_with)
     */
    meta_client_implementation_starts_with?: string;
    /**
     * Implementation of the client (filter: ends_with)
     */
    meta_client_implementation_ends_with?: string;
    /**
     * Implementation of the client (filter: like)
     */
    meta_client_implementation_like?: string;
    /**
     * Implementation of the client (filter: not_like)
     */
    meta_client_implementation_not_like?: string;
    /**
     * Implementation of the client (filter: in_values) (comma-separated list)
     */
    meta_client_implementation_in_values?: string;
    /**
     * Implementation of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_implementation_not_in_values?: string;
    /**
     * City of the client (filter: eq)
     */
    meta_client_geo_city_eq?: string;
    /**
     * City of the client (filter: ne)
     */
    meta_client_geo_city_ne?: string;
    /**
     * City of the client (filter: contains)
     */
    meta_client_geo_city_contains?: string;
    /**
     * City of the client (filter: starts_with)
     */
    meta_client_geo_city_starts_with?: string;
    /**
     * City of the client (filter: ends_with)
     */
    meta_client_geo_city_ends_with?: string;
    /**
     * City of the client (filter: like)
     */
    meta_client_geo_city_like?: string;
    /**
     * City of the client (filter: not_like)
     */
    meta_client_geo_city_not_like?: string;
    /**
     * City of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_city_in_values?: string;
    /**
     * City of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_city_not_in_values?: string;
    /**
     * Country of the client (filter: eq)
     */
    meta_client_geo_country_eq?: string;
    /**
     * Country of the client (filter: ne)
     */
    meta_client_geo_country_ne?: string;
    /**
     * Country of the client (filter: contains)
     */
    meta_client_geo_country_contains?: string;
    /**
     * Country of the client (filter: starts_with)
     */
    meta_client_geo_country_starts_with?: string;
    /**
     * Country of the client (filter: ends_with)
     */
    meta_client_geo_country_ends_with?: string;
    /**
     * Country of the client (filter: like)
     */
    meta_client_geo_country_like?: string;
    /**
     * Country of the client (filter: not_like)
     */
    meta_client_geo_country_not_like?: string;
    /**
     * Country of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_country_in_values?: string;
    /**
     * Country of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_country_not_in_values?: string;
    /**
     * Country code of the client (filter: eq)
     */
    meta_client_geo_country_code_eq?: string;
    /**
     * Country code of the client (filter: ne)
     */
    meta_client_geo_country_code_ne?: string;
    /**
     * Country code of the client (filter: contains)
     */
    meta_client_geo_country_code_contains?: string;
    /**
     * Country code of the client (filter: starts_with)
     */
    meta_client_geo_country_code_starts_with?: string;
    /**
     * Country code of the client (filter: ends_with)
     */
    meta_client_geo_country_code_ends_with?: string;
    /**
     * Country code of the client (filter: like)
     */
    meta_client_geo_country_code_like?: string;
    /**
     * Country code of the client (filter: not_like)
     */
    meta_client_geo_country_code_not_like?: string;
    /**
     * Country code of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_country_code_in_values?: string;
    /**
     * Country code of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_country_code_not_in_values?: string;
    /**
     * Continent code of the client (filter: eq)
     */
    meta_client_geo_continent_code_eq?: string;
    /**
     * Continent code of the client (filter: ne)
     */
    meta_client_geo_continent_code_ne?: string;
    /**
     * Continent code of the client (filter: contains)
     */
    meta_client_geo_continent_code_contains?: string;
    /**
     * Continent code of the client (filter: starts_with)
     */
    meta_client_geo_continent_code_starts_with?: string;
    /**
     * Continent code of the client (filter: ends_with)
     */
    meta_client_geo_continent_code_ends_with?: string;
    /**
     * Continent code of the client (filter: like)
     */
    meta_client_geo_continent_code_like?: string;
    /**
     * Continent code of the client (filter: not_like)
     */
    meta_client_geo_continent_code_not_like?: string;
    /**
     * Continent code of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_continent_code_in_values?: string;
    /**
     * Continent code of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_continent_code_not_in_values?: string;
    /**
     * Filter meta_client_geo_longitude using value
     */
    meta_client_geo_longitude_value?: number;
    /**
     * Filter meta_client_geo_latitude using value
     */
    meta_client_geo_latitude_value?: number;
    /**
     * Autonomous system number of the client (filter: eq)
     */
    meta_client_geo_autonomous_system_number_eq?: number;
    /**
     * Autonomous system number of the client (filter: ne)
     */
    meta_client_geo_autonomous_system_number_ne?: number;
    /**
     * Autonomous system number of the client (filter: lt)
     */
    meta_client_geo_autonomous_system_number_lt?: number;
    /**
     * Autonomous system number of the client (filter: lte)
     */
    meta_client_geo_autonomous_system_number_lte?: number;
    /**
     * Autonomous system number of the client (filter: gt)
     */
    meta_client_geo_autonomous_system_number_gt?: number;
    /**
     * Autonomous system number of the client (filter: gte)
     */
    meta_client_geo_autonomous_system_number_gte?: number;
    /**
     * Autonomous system number of the client (filter: between_min)
     */
    meta_client_geo_autonomous_system_number_between_min?: number;
    /**
     * Autonomous system number of the client (filter: between_max_value)
     */
    meta_client_geo_autonomous_system_number_between_max_value?: number;
    /**
     * Autonomous system number of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_number_in_values?: string;
    /**
     * Autonomous system number of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_number_not_in_values?: string;
    /**
     * Autonomous system organization of the client (filter: eq)
     */
    meta_client_geo_autonomous_system_organization_eq?: string;
    /**
     * Autonomous system organization of the client (filter: ne)
     */
    meta_client_geo_autonomous_system_organization_ne?: string;
    /**
     * Autonomous system organization of the client (filter: contains)
     */
    meta_client_geo_autonomous_system_organization_contains?: string;
    /**
     * Autonomous system organization of the client (filter: starts_with)
     */
    meta_client_geo_autonomous_system_organization_starts_with?: string;
    /**
     * Autonomous system organization of the client (filter: ends_with)
     */
    meta_client_geo_autonomous_system_organization_ends_with?: string;
    /**
     * Autonomous system organization of the client (filter: like)
     */
    meta_client_geo_autonomous_system_organization_like?: string;
    /**
     * Autonomous system organization of the client (filter: not_like)
     */
    meta_client_geo_autonomous_system_organization_not_like?: string;
    /**
     * Autonomous system organization of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_organization_in_values?: string;
    /**
     * Autonomous system organization of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_organization_not_in_values?: string;
    /**
     * Ethereum consensus client version (filter: eq)
     */
    meta_consensus_version_eq?: string;
    /**
     * Ethereum consensus client version (filter: ne)
     */
    meta_consensus_version_ne?: string;
    /**
     * Ethereum consensus client version (filter: contains)
     */
    meta_consensus_version_contains?: string;
    /**
     * Ethereum consensus client version (filter: starts_with)
     */
    meta_consensus_version_starts_with?: string;
    /**
     * Ethereum consensus client version (filter: ends_with)
     */
    meta_consensus_version_ends_with?: string;
    /**
     * Ethereum consensus client version (filter: like)
     */
    meta_consensus_version_like?: string;
    /**
     * Ethereum consensus client version (filter: not_like)
     */
    meta_consensus_version_not_like?: string;
    /**
     * Ethereum consensus client version (filter: in_values) (comma-separated list)
     */
    meta_consensus_version_in_values?: string;
    /**
     * Ethereum consensus client version (filter: not_in_values) (comma-separated list)
     */
    meta_consensus_version_not_in_values?: string;
    /**
     * Ethereum consensus client implementation (filter: eq)
     */
    meta_consensus_implementation_eq?: string;
    /**
     * Ethereum consensus client implementation (filter: ne)
     */
    meta_consensus_implementation_ne?: string;
    /**
     * Ethereum consensus client implementation (filter: contains)
     */
    meta_consensus_implementation_contains?: string;
    /**
     * Ethereum consensus client implementation (filter: starts_with)
     */
    meta_consensus_implementation_starts_with?: string;
    /**
     * Ethereum consensus client implementation (filter: ends_with)
     */
    meta_consensus_implementation_ends_with?: string;
    /**
     * Ethereum consensus client implementation (filter: like)
     */
    meta_consensus_implementation_like?: string;
    /**
     * Ethereum consensus client implementation (filter: not_like)
     */
    meta_consensus_implementation_not_like?: string;
    /**
     * Ethereum consensus client implementation (filter: in_values) (comma-separated list)
     */
    meta_consensus_implementation_in_values?: string;
    /**
     * Ethereum consensus client implementation (filter: not_in_values) (comma-separated list)
     */
    meta_consensus_implementation_not_in_values?: string;
    /**
     * The maximum number of fct_block_first_seen_by_node to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockFirstSeenByNode` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_first_seen_by_node';
};

export type FctBlockFirstSeenByNodeServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockFirstSeenByNodeServiceListError =
  FctBlockFirstSeenByNodeServiceListErrors[keyof FctBlockFirstSeenByNodeServiceListErrors];

export type FctBlockFirstSeenByNodeServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockFirstSeenByNodeResponse;
};

export type FctBlockFirstSeenByNodeServiceListResponse =
  FctBlockFirstSeenByNodeServiceListResponses[keyof FctBlockFirstSeenByNodeServiceListResponses];

export type FctBlockFirstSeenByNodeServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_first_seen_by_node/{slot_start_date_time}';
};

export type FctBlockFirstSeenByNodeServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockFirstSeenByNodeServiceGetError =
  FctBlockFirstSeenByNodeServiceGetErrors[keyof FctBlockFirstSeenByNodeServiceGetErrors];

export type FctBlockFirstSeenByNodeServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockFirstSeenByNodeResponse;
};

export type FctBlockFirstSeenByNodeServiceGetResponse =
  FctBlockFirstSeenByNodeServiceGetResponses[keyof FctBlockFirstSeenByNodeServiceGetResponses];

export type FctBlockHeadServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the reorg slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the reorg slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the reorg slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the reorg slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the reorg slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the reorg slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the reorg slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the reorg slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the reorg slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the reorg slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The root hash of the beacon block (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The root hash of the beacon block (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The root hash of the beacon block (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The root hash of the beacon block (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The root hash of the beacon block (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The root hash of the beacon block (filter: like)
     */
    block_root_like?: string;
    /**
     * The root hash of the beacon block (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The root hash of the beacon block (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The root hash of the beacon block (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number from beacon block payload (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number from beacon block payload (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number from beacon block payload (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number from beacon block payload (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number from beacon block payload (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number from beacon block payload (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number from beacon block payload (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number from beacon block payload (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number from beacon block payload (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number from beacon block payload (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number from beacon block payload (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number from beacon block payload (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number from beacon block payload (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number from beacon block payload (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number from beacon block payload (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number from beacon block payload (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number from beacon block payload (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number from beacon block payload (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number from beacon block payload (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number from beacon block payload (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The version of the beacon block (filter: eq)
     */
    block_version_eq?: string;
    /**
     * The version of the beacon block (filter: ne)
     */
    block_version_ne?: string;
    /**
     * The version of the beacon block (filter: contains)
     */
    block_version_contains?: string;
    /**
     * The version of the beacon block (filter: starts_with)
     */
    block_version_starts_with?: string;
    /**
     * The version of the beacon block (filter: ends_with)
     */
    block_version_ends_with?: string;
    /**
     * The version of the beacon block (filter: like)
     */
    block_version_like?: string;
    /**
     * The version of the beacon block (filter: not_like)
     */
    block_version_not_like?: string;
    /**
     * The version of the beacon block (filter: in_values) (comma-separated list)
     */
    block_version_in_values?: string;
    /**
     * The version of the beacon block (filter: not_in_values) (comma-separated list)
     */
    block_version_not_in_values?: string;
    /**
     * The total bytes of the beacon block payload (filter: eq)
     */
    block_total_bytes_eq?: number;
    /**
     * The total bytes of the beacon block payload (filter: ne)
     */
    block_total_bytes_ne?: number;
    /**
     * The total bytes of the beacon block payload (filter: lt)
     */
    block_total_bytes_lt?: number;
    /**
     * The total bytes of the beacon block payload (filter: lte)
     */
    block_total_bytes_lte?: number;
    /**
     * The total bytes of the beacon block payload (filter: gt)
     */
    block_total_bytes_gt?: number;
    /**
     * The total bytes of the beacon block payload (filter: gte)
     */
    block_total_bytes_gte?: number;
    /**
     * The total bytes of the beacon block payload (filter: between_min)
     */
    block_total_bytes_between_min?: number;
    /**
     * The total bytes of the beacon block payload (filter: between_max_value)
     */
    block_total_bytes_between_max_value?: number;
    /**
     * The total bytes of the beacon block payload (filter: in_values) (comma-separated list)
     */
    block_total_bytes_in_values?: string;
    /**
     * The total bytes of the beacon block payload (filter: not_in_values) (comma-separated list)
     */
    block_total_bytes_not_in_values?: string;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: eq)
     */
    block_total_bytes_compressed_eq?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: ne)
     */
    block_total_bytes_compressed_ne?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: lt)
     */
    block_total_bytes_compressed_lt?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: lte)
     */
    block_total_bytes_compressed_lte?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: gt)
     */
    block_total_bytes_compressed_gt?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: gte)
     */
    block_total_bytes_compressed_gte?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: between_min)
     */
    block_total_bytes_compressed_between_min?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: between_max_value)
     */
    block_total_bytes_compressed_between_max_value?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: in_values) (comma-separated list)
     */
    block_total_bytes_compressed_in_values?: string;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: not_in_values) (comma-separated list)
     */
    block_total_bytes_compressed_not_in_values?: string;
    /**
     * The root hash of the parent beacon block (filter: eq)
     */
    parent_root_eq?: string;
    /**
     * The root hash of the parent beacon block (filter: ne)
     */
    parent_root_ne?: string;
    /**
     * The root hash of the parent beacon block (filter: contains)
     */
    parent_root_contains?: string;
    /**
     * The root hash of the parent beacon block (filter: starts_with)
     */
    parent_root_starts_with?: string;
    /**
     * The root hash of the parent beacon block (filter: ends_with)
     */
    parent_root_ends_with?: string;
    /**
     * The root hash of the parent beacon block (filter: like)
     */
    parent_root_like?: string;
    /**
     * The root hash of the parent beacon block (filter: not_like)
     */
    parent_root_not_like?: string;
    /**
     * The root hash of the parent beacon block (filter: in_values) (comma-separated list)
     */
    parent_root_in_values?: string;
    /**
     * The root hash of the parent beacon block (filter: not_in_values) (comma-separated list)
     */
    parent_root_not_in_values?: string;
    /**
     * The root hash of the beacon state at this block (filter: eq)
     */
    state_root_eq?: string;
    /**
     * The root hash of the beacon state at this block (filter: ne)
     */
    state_root_ne?: string;
    /**
     * The root hash of the beacon state at this block (filter: contains)
     */
    state_root_contains?: string;
    /**
     * The root hash of the beacon state at this block (filter: starts_with)
     */
    state_root_starts_with?: string;
    /**
     * The root hash of the beacon state at this block (filter: ends_with)
     */
    state_root_ends_with?: string;
    /**
     * The root hash of the beacon state at this block (filter: like)
     */
    state_root_like?: string;
    /**
     * The root hash of the beacon state at this block (filter: not_like)
     */
    state_root_not_like?: string;
    /**
     * The root hash of the beacon state at this block (filter: in_values) (comma-separated list)
     */
    state_root_in_values?: string;
    /**
     * The root hash of the beacon state at this block (filter: not_in_values) (comma-separated list)
     */
    state_root_not_in_values?: string;
    /**
     * The index of the validator that proposed the beacon block (filter: eq)
     */
    proposer_index_eq?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: ne)
     */
    proposer_index_ne?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: lt)
     */
    proposer_index_lt?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: lte)
     */
    proposer_index_lte?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: gt)
     */
    proposer_index_gt?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: gte)
     */
    proposer_index_gte?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: between_min)
     */
    proposer_index_between_min?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: between_max_value)
     */
    proposer_index_between_max_value?: number;
    /**
     * The index of the validator that proposed the beacon block (filter: in_values) (comma-separated list)
     */
    proposer_index_in_values?: string;
    /**
     * The index of the validator that proposed the beacon block (filter: not_in_values) (comma-separated list)
     */
    proposer_index_not_in_values?: string;
    /**
     * The block hash of the associated execution block (filter: eq)
     */
    eth1_data_block_hash_eq?: string;
    /**
     * The block hash of the associated execution block (filter: ne)
     */
    eth1_data_block_hash_ne?: string;
    /**
     * The block hash of the associated execution block (filter: contains)
     */
    eth1_data_block_hash_contains?: string;
    /**
     * The block hash of the associated execution block (filter: starts_with)
     */
    eth1_data_block_hash_starts_with?: string;
    /**
     * The block hash of the associated execution block (filter: ends_with)
     */
    eth1_data_block_hash_ends_with?: string;
    /**
     * The block hash of the associated execution block (filter: like)
     */
    eth1_data_block_hash_like?: string;
    /**
     * The block hash of the associated execution block (filter: not_like)
     */
    eth1_data_block_hash_not_like?: string;
    /**
     * The block hash of the associated execution block (filter: in_values) (comma-separated list)
     */
    eth1_data_block_hash_in_values?: string;
    /**
     * The block hash of the associated execution block (filter: not_in_values) (comma-separated list)
     */
    eth1_data_block_hash_not_in_values?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: eq)
     */
    eth1_data_deposit_root_eq?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: ne)
     */
    eth1_data_deposit_root_ne?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: contains)
     */
    eth1_data_deposit_root_contains?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: starts_with)
     */
    eth1_data_deposit_root_starts_with?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: ends_with)
     */
    eth1_data_deposit_root_ends_with?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: like)
     */
    eth1_data_deposit_root_like?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: not_like)
     */
    eth1_data_deposit_root_not_like?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: in_values) (comma-separated list)
     */
    eth1_data_deposit_root_in_values?: string;
    /**
     * The root of the deposit tree in the associated execution block (filter: not_in_values) (comma-separated list)
     */
    eth1_data_deposit_root_not_in_values?: string;
    /**
     * The block hash of the execution payload (filter: eq)
     */
    execution_payload_block_hash_eq?: string;
    /**
     * The block hash of the execution payload (filter: ne)
     */
    execution_payload_block_hash_ne?: string;
    /**
     * The block hash of the execution payload (filter: contains)
     */
    execution_payload_block_hash_contains?: string;
    /**
     * The block hash of the execution payload (filter: starts_with)
     */
    execution_payload_block_hash_starts_with?: string;
    /**
     * The block hash of the execution payload (filter: ends_with)
     */
    execution_payload_block_hash_ends_with?: string;
    /**
     * The block hash of the execution payload (filter: like)
     */
    execution_payload_block_hash_like?: string;
    /**
     * The block hash of the execution payload (filter: not_like)
     */
    execution_payload_block_hash_not_like?: string;
    /**
     * The block hash of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_block_hash_in_values?: string;
    /**
     * The block hash of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_block_hash_not_in_values?: string;
    /**
     * The block number of the execution payload (filter: eq)
     */
    execution_payload_block_number_eq?: number;
    /**
     * The block number of the execution payload (filter: ne)
     */
    execution_payload_block_number_ne?: number;
    /**
     * The block number of the execution payload (filter: lt)
     */
    execution_payload_block_number_lt?: number;
    /**
     * The block number of the execution payload (filter: lte)
     */
    execution_payload_block_number_lte?: number;
    /**
     * The block number of the execution payload (filter: gt)
     */
    execution_payload_block_number_gt?: number;
    /**
     * The block number of the execution payload (filter: gte)
     */
    execution_payload_block_number_gte?: number;
    /**
     * The block number of the execution payload (filter: between_min)
     */
    execution_payload_block_number_between_min?: number;
    /**
     * The block number of the execution payload (filter: between_max_value)
     */
    execution_payload_block_number_between_max_value?: number;
    /**
     * The block number of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_block_number_in_values?: string;
    /**
     * The block number of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_block_number_not_in_values?: string;
    /**
     * The recipient of the fee for this execution payload (filter: eq)
     */
    execution_payload_fee_recipient_eq?: string;
    /**
     * The recipient of the fee for this execution payload (filter: ne)
     */
    execution_payload_fee_recipient_ne?: string;
    /**
     * The recipient of the fee for this execution payload (filter: contains)
     */
    execution_payload_fee_recipient_contains?: string;
    /**
     * The recipient of the fee for this execution payload (filter: starts_with)
     */
    execution_payload_fee_recipient_starts_with?: string;
    /**
     * The recipient of the fee for this execution payload (filter: ends_with)
     */
    execution_payload_fee_recipient_ends_with?: string;
    /**
     * The recipient of the fee for this execution payload (filter: like)
     */
    execution_payload_fee_recipient_like?: string;
    /**
     * The recipient of the fee for this execution payload (filter: not_like)
     */
    execution_payload_fee_recipient_not_like?: string;
    /**
     * The recipient of the fee for this execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_fee_recipient_in_values?: string;
    /**
     * The recipient of the fee for this execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_fee_recipient_not_in_values?: string;
    /**
     * Base fee per gas for execution payload (filter: eq)
     */
    execution_payload_base_fee_per_gas_eq?: string;
    /**
     * Base fee per gas for execution payload (filter: ne)
     */
    execution_payload_base_fee_per_gas_ne?: string;
    /**
     * Base fee per gas for execution payload (filter: contains)
     */
    execution_payload_base_fee_per_gas_contains?: string;
    /**
     * Base fee per gas for execution payload (filter: starts_with)
     */
    execution_payload_base_fee_per_gas_starts_with?: string;
    /**
     * Base fee per gas for execution payload (filter: ends_with)
     */
    execution_payload_base_fee_per_gas_ends_with?: string;
    /**
     * Base fee per gas for execution payload (filter: like)
     */
    execution_payload_base_fee_per_gas_like?: string;
    /**
     * Base fee per gas for execution payload (filter: not_like)
     */
    execution_payload_base_fee_per_gas_not_like?: string;
    /**
     * Base fee per gas for execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_base_fee_per_gas_in_values?: string;
    /**
     * Base fee per gas for execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_base_fee_per_gas_not_in_values?: string;
    /**
     * Gas used for blobs in execution payload (filter: eq)
     */
    execution_payload_blob_gas_used_eq?: number;
    /**
     * Gas used for blobs in execution payload (filter: ne)
     */
    execution_payload_blob_gas_used_ne?: number;
    /**
     * Gas used for blobs in execution payload (filter: lt)
     */
    execution_payload_blob_gas_used_lt?: number;
    /**
     * Gas used for blobs in execution payload (filter: lte)
     */
    execution_payload_blob_gas_used_lte?: number;
    /**
     * Gas used for blobs in execution payload (filter: gt)
     */
    execution_payload_blob_gas_used_gt?: number;
    /**
     * Gas used for blobs in execution payload (filter: gte)
     */
    execution_payload_blob_gas_used_gte?: number;
    /**
     * Gas used for blobs in execution payload (filter: between_min)
     */
    execution_payload_blob_gas_used_between_min?: number;
    /**
     * Gas used for blobs in execution payload (filter: between_max_value)
     */
    execution_payload_blob_gas_used_between_max_value?: number;
    /**
     * Gas used for blobs in execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_blob_gas_used_in_values?: string;
    /**
     * Gas used for blobs in execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_blob_gas_used_not_in_values?: string;
    /**
     * Excess gas used for blobs in execution payload (filter: eq)
     */
    execution_payload_excess_blob_gas_eq?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: ne)
     */
    execution_payload_excess_blob_gas_ne?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: lt)
     */
    execution_payload_excess_blob_gas_lt?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: lte)
     */
    execution_payload_excess_blob_gas_lte?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: gt)
     */
    execution_payload_excess_blob_gas_gt?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: gte)
     */
    execution_payload_excess_blob_gas_gte?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: between_min)
     */
    execution_payload_excess_blob_gas_between_min?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: between_max_value)
     */
    execution_payload_excess_blob_gas_between_max_value?: number;
    /**
     * Excess gas used for blobs in execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_excess_blob_gas_in_values?: string;
    /**
     * Excess gas used for blobs in execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_excess_blob_gas_not_in_values?: string;
    /**
     * Gas limit for execution payload (filter: eq)
     */
    execution_payload_gas_limit_eq?: number;
    /**
     * Gas limit for execution payload (filter: ne)
     */
    execution_payload_gas_limit_ne?: number;
    /**
     * Gas limit for execution payload (filter: lt)
     */
    execution_payload_gas_limit_lt?: number;
    /**
     * Gas limit for execution payload (filter: lte)
     */
    execution_payload_gas_limit_lte?: number;
    /**
     * Gas limit for execution payload (filter: gt)
     */
    execution_payload_gas_limit_gt?: number;
    /**
     * Gas limit for execution payload (filter: gte)
     */
    execution_payload_gas_limit_gte?: number;
    /**
     * Gas limit for execution payload (filter: between_min)
     */
    execution_payload_gas_limit_between_min?: number;
    /**
     * Gas limit for execution payload (filter: between_max_value)
     */
    execution_payload_gas_limit_between_max_value?: number;
    /**
     * Gas limit for execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_gas_limit_in_values?: string;
    /**
     * Gas limit for execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_gas_limit_not_in_values?: string;
    /**
     * Gas used for execution payload (filter: eq)
     */
    execution_payload_gas_used_eq?: number;
    /**
     * Gas used for execution payload (filter: ne)
     */
    execution_payload_gas_used_ne?: number;
    /**
     * Gas used for execution payload (filter: lt)
     */
    execution_payload_gas_used_lt?: number;
    /**
     * Gas used for execution payload (filter: lte)
     */
    execution_payload_gas_used_lte?: number;
    /**
     * Gas used for execution payload (filter: gt)
     */
    execution_payload_gas_used_gt?: number;
    /**
     * Gas used for execution payload (filter: gte)
     */
    execution_payload_gas_used_gte?: number;
    /**
     * Gas used for execution payload (filter: between_min)
     */
    execution_payload_gas_used_between_min?: number;
    /**
     * Gas used for execution payload (filter: between_max_value)
     */
    execution_payload_gas_used_between_max_value?: number;
    /**
     * Gas used for execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_gas_used_in_values?: string;
    /**
     * Gas used for execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_gas_used_not_in_values?: string;
    /**
     * The state root of the execution payload (filter: eq)
     */
    execution_payload_state_root_eq?: string;
    /**
     * The state root of the execution payload (filter: ne)
     */
    execution_payload_state_root_ne?: string;
    /**
     * The state root of the execution payload (filter: contains)
     */
    execution_payload_state_root_contains?: string;
    /**
     * The state root of the execution payload (filter: starts_with)
     */
    execution_payload_state_root_starts_with?: string;
    /**
     * The state root of the execution payload (filter: ends_with)
     */
    execution_payload_state_root_ends_with?: string;
    /**
     * The state root of the execution payload (filter: like)
     */
    execution_payload_state_root_like?: string;
    /**
     * The state root of the execution payload (filter: not_like)
     */
    execution_payload_state_root_not_like?: string;
    /**
     * The state root of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_state_root_in_values?: string;
    /**
     * The state root of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_state_root_not_in_values?: string;
    /**
     * The parent hash of the execution payload (filter: eq)
     */
    execution_payload_parent_hash_eq?: string;
    /**
     * The parent hash of the execution payload (filter: ne)
     */
    execution_payload_parent_hash_ne?: string;
    /**
     * The parent hash of the execution payload (filter: contains)
     */
    execution_payload_parent_hash_contains?: string;
    /**
     * The parent hash of the execution payload (filter: starts_with)
     */
    execution_payload_parent_hash_starts_with?: string;
    /**
     * The parent hash of the execution payload (filter: ends_with)
     */
    execution_payload_parent_hash_ends_with?: string;
    /**
     * The parent hash of the execution payload (filter: like)
     */
    execution_payload_parent_hash_like?: string;
    /**
     * The parent hash of the execution payload (filter: not_like)
     */
    execution_payload_parent_hash_not_like?: string;
    /**
     * The parent hash of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_parent_hash_in_values?: string;
    /**
     * The parent hash of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_parent_hash_not_in_values?: string;
    /**
     * The transaction count of the execution payload (filter: eq)
     */
    execution_payload_transactions_count_eq?: number;
    /**
     * The transaction count of the execution payload (filter: ne)
     */
    execution_payload_transactions_count_ne?: number;
    /**
     * The transaction count of the execution payload (filter: lt)
     */
    execution_payload_transactions_count_lt?: number;
    /**
     * The transaction count of the execution payload (filter: lte)
     */
    execution_payload_transactions_count_lte?: number;
    /**
     * The transaction count of the execution payload (filter: gt)
     */
    execution_payload_transactions_count_gt?: number;
    /**
     * The transaction count of the execution payload (filter: gte)
     */
    execution_payload_transactions_count_gte?: number;
    /**
     * The transaction count of the execution payload (filter: between_min)
     */
    execution_payload_transactions_count_between_min?: number;
    /**
     * The transaction count of the execution payload (filter: between_max_value)
     */
    execution_payload_transactions_count_between_max_value?: number;
    /**
     * The transaction count of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_transactions_count_in_values?: string;
    /**
     * The transaction count of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_transactions_count_not_in_values?: string;
    /**
     * The transaction total bytes of the execution payload (filter: eq)
     */
    execution_payload_transactions_total_bytes_eq?: number;
    /**
     * The transaction total bytes of the execution payload (filter: ne)
     */
    execution_payload_transactions_total_bytes_ne?: number;
    /**
     * The transaction total bytes of the execution payload (filter: lt)
     */
    execution_payload_transactions_total_bytes_lt?: number;
    /**
     * The transaction total bytes of the execution payload (filter: lte)
     */
    execution_payload_transactions_total_bytes_lte?: number;
    /**
     * The transaction total bytes of the execution payload (filter: gt)
     */
    execution_payload_transactions_total_bytes_gt?: number;
    /**
     * The transaction total bytes of the execution payload (filter: gte)
     */
    execution_payload_transactions_total_bytes_gte?: number;
    /**
     * The transaction total bytes of the execution payload (filter: between_min)
     */
    execution_payload_transactions_total_bytes_between_min?: number;
    /**
     * The transaction total bytes of the execution payload (filter: between_max_value)
     */
    execution_payload_transactions_total_bytes_between_max_value?: number;
    /**
     * The transaction total bytes of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_in_values?: string;
    /**
     * The transaction total bytes of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_not_in_values?: string;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: eq)
     */
    execution_payload_transactions_total_bytes_compressed_eq?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: ne)
     */
    execution_payload_transactions_total_bytes_compressed_ne?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: lt)
     */
    execution_payload_transactions_total_bytes_compressed_lt?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: lte)
     */
    execution_payload_transactions_total_bytes_compressed_lte?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: gt)
     */
    execution_payload_transactions_total_bytes_compressed_gt?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: gte)
     */
    execution_payload_transactions_total_bytes_compressed_gte?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: between_min)
     */
    execution_payload_transactions_total_bytes_compressed_between_min?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: between_max_value)
     */
    execution_payload_transactions_total_bytes_compressed_between_max_value?: number;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_compressed_in_values?: string;
    /**
     * The transaction total bytes of the execution payload when compressed using snappy (filter: not_in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_compressed_not_in_values?: string;
    /**
     * The maximum number of fct_block_head to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockHead` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_head';
};

export type FctBlockHeadServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockHeadServiceListError = FctBlockHeadServiceListErrors[keyof FctBlockHeadServiceListErrors];

export type FctBlockHeadServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockHeadResponse;
};

export type FctBlockHeadServiceListResponse = FctBlockHeadServiceListResponses[keyof FctBlockHeadServiceListResponses];

export type FctBlockHeadServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the reorg slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_head/{slot_start_date_time}';
};

export type FctBlockHeadServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockHeadServiceGetError = FctBlockHeadServiceGetErrors[keyof FctBlockHeadServiceGetErrors];

export type FctBlockHeadServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockHeadResponse;
};

export type FctBlockHeadServiceGetResponse = FctBlockHeadServiceGetResponses[keyof FctBlockHeadServiceGetResponses];

export type FctBlockMevServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The start time for the slot that the proposer payload is for (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The start time for the slot that the proposer payload is for (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The root hash of the beacon block (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The root hash of the beacon block (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The root hash of the beacon block (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The root hash of the beacon block (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The root hash of the beacon block (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The root hash of the beacon block (filter: like)
     */
    block_root_like?: string;
    /**
     * The root hash of the beacon block (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The root hash of the beacon block (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The root hash of the beacon block (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Slot number within the block proposer payload (filter: eq)
     */
    slot_eq?: number;
    /**
     * Slot number within the block proposer payload (filter: ne)
     */
    slot_ne?: number;
    /**
     * Slot number within the block proposer payload (filter: lt)
     */
    slot_lt?: number;
    /**
     * Slot number within the block proposer payload (filter: lte)
     */
    slot_lte?: number;
    /**
     * Slot number within the block proposer payload (filter: gt)
     */
    slot_gt?: number;
    /**
     * Slot number within the block proposer payload (filter: gte)
     */
    slot_gte?: number;
    /**
     * Slot number within the block proposer payload (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * Slot number within the block proposer payload (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * Slot number within the block proposer payload (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * Slot number within the block proposer payload (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: eq)
     */
    epoch_eq?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: ne)
     */
    epoch_ne?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: lt)
     */
    epoch_lt?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: lte)
     */
    epoch_lte?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: gt)
     */
    epoch_gt?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: gte)
     */
    epoch_gte?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The start time for the epoch that the proposer payload is for (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The start time for the epoch that the proposer payload is for (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: eq)
     */
    earliest_bid_date_time_eq?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: ne)
     */
    earliest_bid_date_time_ne?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: lt)
     */
    earliest_bid_date_time_lt?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: lte)
     */
    earliest_bid_date_time_lte?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: gt)
     */
    earliest_bid_date_time_gt?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: gte)
     */
    earliest_bid_date_time_gte?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: between_min)
     */
    earliest_bid_date_time_between_min?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: between_max_value)
     */
    earliest_bid_date_time_between_max_value?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: in_values) (comma-separated list)
     */
    earliest_bid_date_time_in_values?: string;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: not_in_values) (comma-separated list)
     */
    earliest_bid_date_time_not_in_values?: string;
    /**
     * Filter by relay_names - The relay names that delivered the proposer payload (optional)
     */
    relay_names?: Array<string>;
    /**
     * The parent hash of the proposer payload (filter: eq)
     */
    parent_hash_eq?: string;
    /**
     * The parent hash of the proposer payload (filter: ne)
     */
    parent_hash_ne?: string;
    /**
     * The parent hash of the proposer payload (filter: contains)
     */
    parent_hash_contains?: string;
    /**
     * The parent hash of the proposer payload (filter: starts_with)
     */
    parent_hash_starts_with?: string;
    /**
     * The parent hash of the proposer payload (filter: ends_with)
     */
    parent_hash_ends_with?: string;
    /**
     * The parent hash of the proposer payload (filter: like)
     */
    parent_hash_like?: string;
    /**
     * The parent hash of the proposer payload (filter: not_like)
     */
    parent_hash_not_like?: string;
    /**
     * The parent hash of the proposer payload (filter: in_values) (comma-separated list)
     */
    parent_hash_in_values?: string;
    /**
     * The parent hash of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    parent_hash_not_in_values?: string;
    /**
     * The block number of the proposer payload (filter: eq)
     */
    block_number_eq?: number;
    /**
     * The block number of the proposer payload (filter: ne)
     */
    block_number_ne?: number;
    /**
     * The block number of the proposer payload (filter: lt)
     */
    block_number_lt?: number;
    /**
     * The block number of the proposer payload (filter: lte)
     */
    block_number_lte?: number;
    /**
     * The block number of the proposer payload (filter: gt)
     */
    block_number_gt?: number;
    /**
     * The block number of the proposer payload (filter: gte)
     */
    block_number_gte?: number;
    /**
     * The block number of the proposer payload (filter: between_min)
     */
    block_number_between_min?: number;
    /**
     * The block number of the proposer payload (filter: between_max_value)
     */
    block_number_between_max_value?: number;
    /**
     * The block number of the proposer payload (filter: in_values) (comma-separated list)
     */
    block_number_in_values?: string;
    /**
     * The block number of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    block_number_not_in_values?: string;
    /**
     * The block hash of the proposer payload (filter: eq)
     */
    block_hash_eq?: string;
    /**
     * The block hash of the proposer payload (filter: ne)
     */
    block_hash_ne?: string;
    /**
     * The block hash of the proposer payload (filter: contains)
     */
    block_hash_contains?: string;
    /**
     * The block hash of the proposer payload (filter: starts_with)
     */
    block_hash_starts_with?: string;
    /**
     * The block hash of the proposer payload (filter: ends_with)
     */
    block_hash_ends_with?: string;
    /**
     * The block hash of the proposer payload (filter: like)
     */
    block_hash_like?: string;
    /**
     * The block hash of the proposer payload (filter: not_like)
     */
    block_hash_not_like?: string;
    /**
     * The block hash of the proposer payload (filter: in_values) (comma-separated list)
     */
    block_hash_in_values?: string;
    /**
     * The block hash of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    block_hash_not_in_values?: string;
    /**
     * The builder pubkey of the proposer payload (filter: eq)
     */
    builder_pubkey_eq?: string;
    /**
     * The builder pubkey of the proposer payload (filter: ne)
     */
    builder_pubkey_ne?: string;
    /**
     * The builder pubkey of the proposer payload (filter: contains)
     */
    builder_pubkey_contains?: string;
    /**
     * The builder pubkey of the proposer payload (filter: starts_with)
     */
    builder_pubkey_starts_with?: string;
    /**
     * The builder pubkey of the proposer payload (filter: ends_with)
     */
    builder_pubkey_ends_with?: string;
    /**
     * The builder pubkey of the proposer payload (filter: like)
     */
    builder_pubkey_like?: string;
    /**
     * The builder pubkey of the proposer payload (filter: not_like)
     */
    builder_pubkey_not_like?: string;
    /**
     * The builder pubkey of the proposer payload (filter: in_values) (comma-separated list)
     */
    builder_pubkey_in_values?: string;
    /**
     * The builder pubkey of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    builder_pubkey_not_in_values?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: eq)
     */
    proposer_pubkey_eq?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: ne)
     */
    proposer_pubkey_ne?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: contains)
     */
    proposer_pubkey_contains?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: starts_with)
     */
    proposer_pubkey_starts_with?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: ends_with)
     */
    proposer_pubkey_ends_with?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: like)
     */
    proposer_pubkey_like?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: not_like)
     */
    proposer_pubkey_not_like?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: in_values) (comma-separated list)
     */
    proposer_pubkey_in_values?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    proposer_pubkey_not_in_values?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: eq)
     */
    proposer_fee_recipient_eq?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: ne)
     */
    proposer_fee_recipient_ne?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: contains)
     */
    proposer_fee_recipient_contains?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: starts_with)
     */
    proposer_fee_recipient_starts_with?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: ends_with)
     */
    proposer_fee_recipient_ends_with?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: like)
     */
    proposer_fee_recipient_like?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: not_like)
     */
    proposer_fee_recipient_not_like?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: in_values) (comma-separated list)
     */
    proposer_fee_recipient_in_values?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    proposer_fee_recipient_not_in_values?: string;
    /**
     * The gas limit of the proposer payload (filter: eq)
     */
    gas_limit_eq?: number;
    /**
     * The gas limit of the proposer payload (filter: ne)
     */
    gas_limit_ne?: number;
    /**
     * The gas limit of the proposer payload (filter: lt)
     */
    gas_limit_lt?: number;
    /**
     * The gas limit of the proposer payload (filter: lte)
     */
    gas_limit_lte?: number;
    /**
     * The gas limit of the proposer payload (filter: gt)
     */
    gas_limit_gt?: number;
    /**
     * The gas limit of the proposer payload (filter: gte)
     */
    gas_limit_gte?: number;
    /**
     * The gas limit of the proposer payload (filter: between_min)
     */
    gas_limit_between_min?: number;
    /**
     * The gas limit of the proposer payload (filter: between_max_value)
     */
    gas_limit_between_max_value?: number;
    /**
     * The gas limit of the proposer payload (filter: in_values) (comma-separated list)
     */
    gas_limit_in_values?: string;
    /**
     * The gas limit of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    gas_limit_not_in_values?: string;
    /**
     * The gas used of the proposer payload (filter: eq)
     */
    gas_used_eq?: number;
    /**
     * The gas used of the proposer payload (filter: ne)
     */
    gas_used_ne?: number;
    /**
     * The gas used of the proposer payload (filter: lt)
     */
    gas_used_lt?: number;
    /**
     * The gas used of the proposer payload (filter: lte)
     */
    gas_used_lte?: number;
    /**
     * The gas used of the proposer payload (filter: gt)
     */
    gas_used_gt?: number;
    /**
     * The gas used of the proposer payload (filter: gte)
     */
    gas_used_gte?: number;
    /**
     * The gas used of the proposer payload (filter: between_min)
     */
    gas_used_between_min?: number;
    /**
     * The gas used of the proposer payload (filter: between_max_value)
     */
    gas_used_between_max_value?: number;
    /**
     * The gas used of the proposer payload (filter: in_values) (comma-separated list)
     */
    gas_used_in_values?: string;
    /**
     * The gas used of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    gas_used_not_in_values?: string;
    /**
     * The transaction value in wei (filter: eq)
     */
    value_eq?: string;
    /**
     * The transaction value in wei (filter: ne)
     */
    value_ne?: string;
    /**
     * The transaction value in wei (filter: contains)
     */
    value_contains?: string;
    /**
     * The transaction value in wei (filter: starts_with)
     */
    value_starts_with?: string;
    /**
     * The transaction value in wei (filter: ends_with)
     */
    value_ends_with?: string;
    /**
     * The transaction value in wei (filter: like)
     */
    value_like?: string;
    /**
     * The transaction value in wei (filter: not_like)
     */
    value_not_like?: string;
    /**
     * The transaction value in wei (filter: in_values) (comma-separated list)
     */
    value_in_values?: string;
    /**
     * The transaction value in wei (filter: not_in_values) (comma-separated list)
     */
    value_not_in_values?: string;
    /**
     * The number of transactions in the proposer payload (filter: eq)
     */
    transaction_count_eq?: number;
    /**
     * The number of transactions in the proposer payload (filter: ne)
     */
    transaction_count_ne?: number;
    /**
     * The number of transactions in the proposer payload (filter: lt)
     */
    transaction_count_lt?: number;
    /**
     * The number of transactions in the proposer payload (filter: lte)
     */
    transaction_count_lte?: number;
    /**
     * The number of transactions in the proposer payload (filter: gt)
     */
    transaction_count_gt?: number;
    /**
     * The number of transactions in the proposer payload (filter: gte)
     */
    transaction_count_gte?: number;
    /**
     * The number of transactions in the proposer payload (filter: between_min)
     */
    transaction_count_between_min?: number;
    /**
     * The number of transactions in the proposer payload (filter: between_max_value)
     */
    transaction_count_between_max_value?: number;
    /**
     * The number of transactions in the proposer payload (filter: in_values) (comma-separated list)
     */
    transaction_count_in_values?: string;
    /**
     * The number of transactions in the proposer payload (filter: not_in_values) (comma-separated list)
     */
    transaction_count_not_in_values?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: eq)
     */
    status_eq?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: ne)
     */
    status_ne?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: contains)
     */
    status_contains?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: starts_with)
     */
    status_starts_with?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: ends_with)
     */
    status_ends_with?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: like)
     */
    status_like?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: not_like)
     */
    status_not_like?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: in_values) (comma-separated list)
     */
    status_in_values?: string;
    /**
     * Can be "canonical" or "orphaned" (filter: not_in_values) (comma-separated list)
     */
    status_not_in_values?: string;
    /**
     * The maximum number of fct_block_mev to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockMev` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_mev';
};

export type FctBlockMevServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockMevServiceListError = FctBlockMevServiceListErrors[keyof FctBlockMevServiceListErrors];

export type FctBlockMevServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockMevResponse;
};

export type FctBlockMevServiceListResponse = FctBlockMevServiceListResponses[keyof FctBlockMevServiceListResponses];

export type FctBlockMevServiceGetData = {
  body?: never;
  path: {
    /**
     * The start time for the slot that the proposer payload is for
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_mev/{slot_start_date_time}';
};

export type FctBlockMevServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockMevServiceGetError = FctBlockMevServiceGetErrors[keyof FctBlockMevServiceGetErrors];

export type FctBlockMevServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockMevResponse;
};

export type FctBlockMevServiceGetResponse = FctBlockMevServiceGetResponses[keyof FctBlockMevServiceGetResponses];

export type FctBlockMevHeadServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The start time for the slot that the proposer payload is for (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The start time for the slot that the proposer payload is for (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The start time for the slot that the proposer payload is for (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The root hash of the beacon block (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The root hash of the beacon block (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The root hash of the beacon block (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The root hash of the beacon block (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The root hash of the beacon block (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The root hash of the beacon block (filter: like)
     */
    block_root_like?: string;
    /**
     * The root hash of the beacon block (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The root hash of the beacon block (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The root hash of the beacon block (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Slot number within the block proposer payload (filter: eq)
     */
    slot_eq?: number;
    /**
     * Slot number within the block proposer payload (filter: ne)
     */
    slot_ne?: number;
    /**
     * Slot number within the block proposer payload (filter: lt)
     */
    slot_lt?: number;
    /**
     * Slot number within the block proposer payload (filter: lte)
     */
    slot_lte?: number;
    /**
     * Slot number within the block proposer payload (filter: gt)
     */
    slot_gt?: number;
    /**
     * Slot number within the block proposer payload (filter: gte)
     */
    slot_gte?: number;
    /**
     * Slot number within the block proposer payload (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * Slot number within the block proposer payload (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * Slot number within the block proposer payload (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * Slot number within the block proposer payload (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: eq)
     */
    epoch_eq?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: ne)
     */
    epoch_ne?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: lt)
     */
    epoch_lt?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: lte)
     */
    epoch_lte?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: gt)
     */
    epoch_gt?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: gte)
     */
    epoch_gte?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * Epoch number derived from the slot that the proposer payload is for (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The start time for the epoch that the proposer payload is for (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The start time for the epoch that the proposer payload is for (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The start time for the epoch that the proposer payload is for (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: eq)
     */
    earliest_bid_date_time_eq?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: ne)
     */
    earliest_bid_date_time_ne?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: lt)
     */
    earliest_bid_date_time_lt?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: lte)
     */
    earliest_bid_date_time_lte?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: gt)
     */
    earliest_bid_date_time_gt?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: gte)
     */
    earliest_bid_date_time_gte?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: between_min)
     */
    earliest_bid_date_time_between_min?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: between_max_value)
     */
    earliest_bid_date_time_between_max_value?: number;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: in_values) (comma-separated list)
     */
    earliest_bid_date_time_in_values?: string;
    /**
     * The earliest timestamp of the accepted bid in milliseconds (filter: not_in_values) (comma-separated list)
     */
    earliest_bid_date_time_not_in_values?: string;
    /**
     * Filter by relay_names - The relay names that delivered the proposer payload (optional)
     */
    relay_names?: Array<string>;
    /**
     * The parent hash of the proposer payload (filter: eq)
     */
    parent_hash_eq?: string;
    /**
     * The parent hash of the proposer payload (filter: ne)
     */
    parent_hash_ne?: string;
    /**
     * The parent hash of the proposer payload (filter: contains)
     */
    parent_hash_contains?: string;
    /**
     * The parent hash of the proposer payload (filter: starts_with)
     */
    parent_hash_starts_with?: string;
    /**
     * The parent hash of the proposer payload (filter: ends_with)
     */
    parent_hash_ends_with?: string;
    /**
     * The parent hash of the proposer payload (filter: like)
     */
    parent_hash_like?: string;
    /**
     * The parent hash of the proposer payload (filter: not_like)
     */
    parent_hash_not_like?: string;
    /**
     * The parent hash of the proposer payload (filter: in_values) (comma-separated list)
     */
    parent_hash_in_values?: string;
    /**
     * The parent hash of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    parent_hash_not_in_values?: string;
    /**
     * The block number of the proposer payload (filter: eq)
     */
    block_number_eq?: number;
    /**
     * The block number of the proposer payload (filter: ne)
     */
    block_number_ne?: number;
    /**
     * The block number of the proposer payload (filter: lt)
     */
    block_number_lt?: number;
    /**
     * The block number of the proposer payload (filter: lte)
     */
    block_number_lte?: number;
    /**
     * The block number of the proposer payload (filter: gt)
     */
    block_number_gt?: number;
    /**
     * The block number of the proposer payload (filter: gte)
     */
    block_number_gte?: number;
    /**
     * The block number of the proposer payload (filter: between_min)
     */
    block_number_between_min?: number;
    /**
     * The block number of the proposer payload (filter: between_max_value)
     */
    block_number_between_max_value?: number;
    /**
     * The block number of the proposer payload (filter: in_values) (comma-separated list)
     */
    block_number_in_values?: string;
    /**
     * The block number of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    block_number_not_in_values?: string;
    /**
     * The block hash of the proposer payload (filter: eq)
     */
    block_hash_eq?: string;
    /**
     * The block hash of the proposer payload (filter: ne)
     */
    block_hash_ne?: string;
    /**
     * The block hash of the proposer payload (filter: contains)
     */
    block_hash_contains?: string;
    /**
     * The block hash of the proposer payload (filter: starts_with)
     */
    block_hash_starts_with?: string;
    /**
     * The block hash of the proposer payload (filter: ends_with)
     */
    block_hash_ends_with?: string;
    /**
     * The block hash of the proposer payload (filter: like)
     */
    block_hash_like?: string;
    /**
     * The block hash of the proposer payload (filter: not_like)
     */
    block_hash_not_like?: string;
    /**
     * The block hash of the proposer payload (filter: in_values) (comma-separated list)
     */
    block_hash_in_values?: string;
    /**
     * The block hash of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    block_hash_not_in_values?: string;
    /**
     * The builder pubkey of the proposer payload (filter: eq)
     */
    builder_pubkey_eq?: string;
    /**
     * The builder pubkey of the proposer payload (filter: ne)
     */
    builder_pubkey_ne?: string;
    /**
     * The builder pubkey of the proposer payload (filter: contains)
     */
    builder_pubkey_contains?: string;
    /**
     * The builder pubkey of the proposer payload (filter: starts_with)
     */
    builder_pubkey_starts_with?: string;
    /**
     * The builder pubkey of the proposer payload (filter: ends_with)
     */
    builder_pubkey_ends_with?: string;
    /**
     * The builder pubkey of the proposer payload (filter: like)
     */
    builder_pubkey_like?: string;
    /**
     * The builder pubkey of the proposer payload (filter: not_like)
     */
    builder_pubkey_not_like?: string;
    /**
     * The builder pubkey of the proposer payload (filter: in_values) (comma-separated list)
     */
    builder_pubkey_in_values?: string;
    /**
     * The builder pubkey of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    builder_pubkey_not_in_values?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: eq)
     */
    proposer_pubkey_eq?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: ne)
     */
    proposer_pubkey_ne?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: contains)
     */
    proposer_pubkey_contains?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: starts_with)
     */
    proposer_pubkey_starts_with?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: ends_with)
     */
    proposer_pubkey_ends_with?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: like)
     */
    proposer_pubkey_like?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: not_like)
     */
    proposer_pubkey_not_like?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: in_values) (comma-separated list)
     */
    proposer_pubkey_in_values?: string;
    /**
     * The proposer pubkey of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    proposer_pubkey_not_in_values?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: eq)
     */
    proposer_fee_recipient_eq?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: ne)
     */
    proposer_fee_recipient_ne?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: contains)
     */
    proposer_fee_recipient_contains?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: starts_with)
     */
    proposer_fee_recipient_starts_with?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: ends_with)
     */
    proposer_fee_recipient_ends_with?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: like)
     */
    proposer_fee_recipient_like?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: not_like)
     */
    proposer_fee_recipient_not_like?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: in_values) (comma-separated list)
     */
    proposer_fee_recipient_in_values?: string;
    /**
     * The proposer fee recipient of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    proposer_fee_recipient_not_in_values?: string;
    /**
     * The gas limit of the proposer payload (filter: eq)
     */
    gas_limit_eq?: number;
    /**
     * The gas limit of the proposer payload (filter: ne)
     */
    gas_limit_ne?: number;
    /**
     * The gas limit of the proposer payload (filter: lt)
     */
    gas_limit_lt?: number;
    /**
     * The gas limit of the proposer payload (filter: lte)
     */
    gas_limit_lte?: number;
    /**
     * The gas limit of the proposer payload (filter: gt)
     */
    gas_limit_gt?: number;
    /**
     * The gas limit of the proposer payload (filter: gte)
     */
    gas_limit_gte?: number;
    /**
     * The gas limit of the proposer payload (filter: between_min)
     */
    gas_limit_between_min?: number;
    /**
     * The gas limit of the proposer payload (filter: between_max_value)
     */
    gas_limit_between_max_value?: number;
    /**
     * The gas limit of the proposer payload (filter: in_values) (comma-separated list)
     */
    gas_limit_in_values?: string;
    /**
     * The gas limit of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    gas_limit_not_in_values?: string;
    /**
     * The gas used of the proposer payload (filter: eq)
     */
    gas_used_eq?: number;
    /**
     * The gas used of the proposer payload (filter: ne)
     */
    gas_used_ne?: number;
    /**
     * The gas used of the proposer payload (filter: lt)
     */
    gas_used_lt?: number;
    /**
     * The gas used of the proposer payload (filter: lte)
     */
    gas_used_lte?: number;
    /**
     * The gas used of the proposer payload (filter: gt)
     */
    gas_used_gt?: number;
    /**
     * The gas used of the proposer payload (filter: gte)
     */
    gas_used_gte?: number;
    /**
     * The gas used of the proposer payload (filter: between_min)
     */
    gas_used_between_min?: number;
    /**
     * The gas used of the proposer payload (filter: between_max_value)
     */
    gas_used_between_max_value?: number;
    /**
     * The gas used of the proposer payload (filter: in_values) (comma-separated list)
     */
    gas_used_in_values?: string;
    /**
     * The gas used of the proposer payload (filter: not_in_values) (comma-separated list)
     */
    gas_used_not_in_values?: string;
    /**
     * The transaction value in wei (filter: eq)
     */
    value_eq?: string;
    /**
     * The transaction value in wei (filter: ne)
     */
    value_ne?: string;
    /**
     * The transaction value in wei (filter: contains)
     */
    value_contains?: string;
    /**
     * The transaction value in wei (filter: starts_with)
     */
    value_starts_with?: string;
    /**
     * The transaction value in wei (filter: ends_with)
     */
    value_ends_with?: string;
    /**
     * The transaction value in wei (filter: like)
     */
    value_like?: string;
    /**
     * The transaction value in wei (filter: not_like)
     */
    value_not_like?: string;
    /**
     * The transaction value in wei (filter: in_values) (comma-separated list)
     */
    value_in_values?: string;
    /**
     * The transaction value in wei (filter: not_in_values) (comma-separated list)
     */
    value_not_in_values?: string;
    /**
     * The number of transactions in the proposer payload (filter: eq)
     */
    transaction_count_eq?: number;
    /**
     * The number of transactions in the proposer payload (filter: ne)
     */
    transaction_count_ne?: number;
    /**
     * The number of transactions in the proposer payload (filter: lt)
     */
    transaction_count_lt?: number;
    /**
     * The number of transactions in the proposer payload (filter: lte)
     */
    transaction_count_lte?: number;
    /**
     * The number of transactions in the proposer payload (filter: gt)
     */
    transaction_count_gt?: number;
    /**
     * The number of transactions in the proposer payload (filter: gte)
     */
    transaction_count_gte?: number;
    /**
     * The number of transactions in the proposer payload (filter: between_min)
     */
    transaction_count_between_min?: number;
    /**
     * The number of transactions in the proposer payload (filter: between_max_value)
     */
    transaction_count_between_max_value?: number;
    /**
     * The number of transactions in the proposer payload (filter: in_values) (comma-separated list)
     */
    transaction_count_in_values?: string;
    /**
     * The number of transactions in the proposer payload (filter: not_in_values) (comma-separated list)
     */
    transaction_count_not_in_values?: string;
    /**
     * The maximum number of fct_block_mev_head to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockMevHead` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_mev_head';
};

export type FctBlockMevHeadServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockMevHeadServiceListError = FctBlockMevHeadServiceListErrors[keyof FctBlockMevHeadServiceListErrors];

export type FctBlockMevHeadServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockMevHeadResponse;
};

export type FctBlockMevHeadServiceListResponse =
  FctBlockMevHeadServiceListResponses[keyof FctBlockMevHeadServiceListResponses];

export type FctBlockMevHeadServiceGetData = {
  body?: never;
  path: {
    /**
     * The start time for the slot that the proposer payload is for
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_mev_head/{slot_start_date_time}';
};

export type FctBlockMevHeadServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockMevHeadServiceGetError = FctBlockMevHeadServiceGetErrors[keyof FctBlockMevHeadServiceGetErrors];

export type FctBlockMevHeadServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockMevHeadResponse;
};

export type FctBlockMevHeadServiceGetResponse =
  FctBlockMevHeadServiceGetResponses[keyof FctBlockMevHeadServiceGetResponses];

export type FctBlockProposerServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The validator index of the proposer for the slot (filter: eq)
     */
    proposer_validator_index_eq?: number;
    /**
     * The validator index of the proposer for the slot (filter: ne)
     */
    proposer_validator_index_ne?: number;
    /**
     * The validator index of the proposer for the slot (filter: lt)
     */
    proposer_validator_index_lt?: number;
    /**
     * The validator index of the proposer for the slot (filter: lte)
     */
    proposer_validator_index_lte?: number;
    /**
     * The validator index of the proposer for the slot (filter: gt)
     */
    proposer_validator_index_gt?: number;
    /**
     * The validator index of the proposer for the slot (filter: gte)
     */
    proposer_validator_index_gte?: number;
    /**
     * The validator index of the proposer for the slot (filter: between_min)
     */
    proposer_validator_index_between_min?: number;
    /**
     * The validator index of the proposer for the slot (filter: between_max_value)
     */
    proposer_validator_index_between_max_value?: number;
    /**
     * The validator index of the proposer for the slot (filter: in_values) (comma-separated list)
     */
    proposer_validator_index_in_values?: string;
    /**
     * The validator index of the proposer for the slot (filter: not_in_values) (comma-separated list)
     */
    proposer_validator_index_not_in_values?: string;
    /**
     * The public key of the validator proposer (filter: eq)
     */
    proposer_pubkey_eq?: string;
    /**
     * The public key of the validator proposer (filter: ne)
     */
    proposer_pubkey_ne?: string;
    /**
     * The public key of the validator proposer (filter: contains)
     */
    proposer_pubkey_contains?: string;
    /**
     * The public key of the validator proposer (filter: starts_with)
     */
    proposer_pubkey_starts_with?: string;
    /**
     * The public key of the validator proposer (filter: ends_with)
     */
    proposer_pubkey_ends_with?: string;
    /**
     * The public key of the validator proposer (filter: like)
     */
    proposer_pubkey_like?: string;
    /**
     * The public key of the validator proposer (filter: not_like)
     */
    proposer_pubkey_not_like?: string;
    /**
     * The public key of the validator proposer (filter: in_values) (comma-separated list)
     */
    proposer_pubkey_in_values?: string;
    /**
     * The public key of the validator proposer (filter: not_in_values) (comma-separated list)
     */
    proposer_pubkey_not_in_values?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed" (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed" (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed" (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed" (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed" (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed" (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed" (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed" (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry, aka "missed" (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: eq)
     */
    status_eq?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: ne)
     */
    status_ne?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: contains)
     */
    status_contains?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: starts_with)
     */
    status_starts_with?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: ends_with)
     */
    status_ends_with?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: like)
     */
    status_like?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: not_like)
     */
    status_not_like?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: in_values) (comma-separated list)
     */
    status_in_values?: string;
    /**
     * Can be "canonical", "orphaned" or "missed" (filter: not_in_values) (comma-separated list)
     */
    status_not_in_values?: string;
    /**
     * The maximum number of fct_block_proposer to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockProposer` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_proposer';
};

export type FctBlockProposerServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockProposerServiceListError =
  FctBlockProposerServiceListErrors[keyof FctBlockProposerServiceListErrors];

export type FctBlockProposerServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockProposerResponse;
};

export type FctBlockProposerServiceListResponse =
  FctBlockProposerServiceListResponses[keyof FctBlockProposerServiceListResponses];

export type FctBlockProposerServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_proposer/{slot_start_date_time}';
};

export type FctBlockProposerServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockProposerServiceGetError = FctBlockProposerServiceGetErrors[keyof FctBlockProposerServiceGetErrors];

export type FctBlockProposerServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockProposerResponse;
};

export type FctBlockProposerServiceGetResponse =
  FctBlockProposerServiceGetResponses[keyof FctBlockProposerServiceGetResponses];

export type FctBlockProposerEntityServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The entity that proposed the block (filter: eq)
     */
    entity_eq?: string;
    /**
     * The entity that proposed the block (filter: ne)
     */
    entity_ne?: string;
    /**
     * The entity that proposed the block (filter: contains)
     */
    entity_contains?: string;
    /**
     * The entity that proposed the block (filter: starts_with)
     */
    entity_starts_with?: string;
    /**
     * The entity that proposed the block (filter: ends_with)
     */
    entity_ends_with?: string;
    /**
     * The entity that proposed the block (filter: like)
     */
    entity_like?: string;
    /**
     * The entity that proposed the block (filter: not_like)
     */
    entity_not_like?: string;
    /**
     * The entity that proposed the block (filter: in_values) (comma-separated list)
     */
    entity_in_values?: string;
    /**
     * The entity that proposed the block (filter: not_in_values) (comma-separated list)
     */
    entity_not_in_values?: string;
    /**
     * The maximum number of fct_block_proposer_entity to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockProposerEntity` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_proposer_entity';
};

export type FctBlockProposerEntityServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockProposerEntityServiceListError =
  FctBlockProposerEntityServiceListErrors[keyof FctBlockProposerEntityServiceListErrors];

export type FctBlockProposerEntityServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockProposerEntityResponse;
};

export type FctBlockProposerEntityServiceListResponse =
  FctBlockProposerEntityServiceListResponses[keyof FctBlockProposerEntityServiceListResponses];

export type FctBlockProposerEntityServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_proposer_entity/{slot_start_date_time}';
};

export type FctBlockProposerEntityServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockProposerEntityServiceGetError =
  FctBlockProposerEntityServiceGetErrors[keyof FctBlockProposerEntityServiceGetErrors];

export type FctBlockProposerEntityServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockProposerEntityResponse;
};

export type FctBlockProposerEntityServiceGetResponse =
  FctBlockProposerEntityServiceGetResponses[keyof FctBlockProposerEntityServiceGetResponses];

export type FctBlockProposerHeadServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The validator index of the proposer for the slot (filter: eq)
     */
    proposer_validator_index_eq?: number;
    /**
     * The validator index of the proposer for the slot (filter: ne)
     */
    proposer_validator_index_ne?: number;
    /**
     * The validator index of the proposer for the slot (filter: lt)
     */
    proposer_validator_index_lt?: number;
    /**
     * The validator index of the proposer for the slot (filter: lte)
     */
    proposer_validator_index_lte?: number;
    /**
     * The validator index of the proposer for the slot (filter: gt)
     */
    proposer_validator_index_gt?: number;
    /**
     * The validator index of the proposer for the slot (filter: gte)
     */
    proposer_validator_index_gte?: number;
    /**
     * The validator index of the proposer for the slot (filter: between_min)
     */
    proposer_validator_index_between_min?: number;
    /**
     * The validator index of the proposer for the slot (filter: between_max_value)
     */
    proposer_validator_index_between_max_value?: number;
    /**
     * The validator index of the proposer for the slot (filter: in_values) (comma-separated list)
     */
    proposer_validator_index_in_values?: string;
    /**
     * The validator index of the proposer for the slot (filter: not_in_values) (comma-separated list)
     */
    proposer_validator_index_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * The slot number (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * The epoch number containing the slot (filter: eq)
     */
    epoch_eq?: number;
    /**
     * The epoch number containing the slot (filter: ne)
     */
    epoch_ne?: number;
    /**
     * The epoch number containing the slot (filter: lt)
     */
    epoch_lt?: number;
    /**
     * The epoch number containing the slot (filter: lte)
     */
    epoch_lte?: number;
    /**
     * The epoch number containing the slot (filter: gt)
     */
    epoch_gt?: number;
    /**
     * The epoch number containing the slot (filter: gte)
     */
    epoch_gte?: number;
    /**
     * The epoch number containing the slot (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * The epoch number containing the slot (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * The epoch number containing the slot (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * The epoch number containing the slot (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The wall clock time when the epoch started (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The wall clock time when the epoch started (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The wall clock time when the epoch started (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The wall clock time when the epoch started (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The wall clock time when the epoch started (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The wall clock time when the epoch started (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The wall clock time when the epoch started (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the epoch started (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The wall clock time when the epoch started (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The public key of the validator proposer (filter: eq)
     */
    proposer_pubkey_eq?: string;
    /**
     * The public key of the validator proposer (filter: ne)
     */
    proposer_pubkey_ne?: string;
    /**
     * The public key of the validator proposer (filter: contains)
     */
    proposer_pubkey_contains?: string;
    /**
     * The public key of the validator proposer (filter: starts_with)
     */
    proposer_pubkey_starts_with?: string;
    /**
     * The public key of the validator proposer (filter: ends_with)
     */
    proposer_pubkey_ends_with?: string;
    /**
     * The public key of the validator proposer (filter: like)
     */
    proposer_pubkey_like?: string;
    /**
     * The public key of the validator proposer (filter: not_like)
     */
    proposer_pubkey_not_like?: string;
    /**
     * The public key of the validator proposer (filter: in_values) (comma-separated list)
     */
    proposer_pubkey_in_values?: string;
    /**
     * The public key of the validator proposer (filter: not_in_values) (comma-separated list)
     */
    proposer_pubkey_not_in_values?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry (filter: eq)
     */
    block_root_eq?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry (filter: ne)
     */
    block_root_ne?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry (filter: contains)
     */
    block_root_contains?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry (filter: starts_with)
     */
    block_root_starts_with?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry (filter: ends_with)
     */
    block_root_ends_with?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry (filter: like)
     */
    block_root_like?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry (filter: not_like)
     */
    block_root_not_like?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry (filter: in_values) (comma-separated list)
     */
    block_root_in_values?: string;
    /**
     * The beacon block root hash. Null if a block was never seen by a sentry (filter: not_in_values) (comma-separated list)
     */
    block_root_not_in_values?: string;
    /**
     * The maximum number of fct_block_proposer_head to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctBlockProposerHead` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_block_proposer_head';
};

export type FctBlockProposerHeadServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockProposerHeadServiceListError =
  FctBlockProposerHeadServiceListErrors[keyof FctBlockProposerHeadServiceListErrors];

export type FctBlockProposerHeadServiceListResponses = {
  /**
   * OK
   */
  200: ListFctBlockProposerHeadResponse;
};

export type FctBlockProposerHeadServiceListResponse =
  FctBlockProposerHeadServiceListResponses[keyof FctBlockProposerHeadServiceListResponses];

export type FctBlockProposerHeadServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_block_proposer_head/{slot_start_date_time}';
};

export type FctBlockProposerHeadServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctBlockProposerHeadServiceGetError =
  FctBlockProposerHeadServiceGetErrors[keyof FctBlockProposerHeadServiceGetErrors];

export type FctBlockProposerHeadServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctBlockProposerHeadResponse;
};

export type FctBlockProposerHeadServiceGetResponse =
  FctBlockProposerHeadServiceGetResponses[keyof FctBlockProposerHeadServiceGetResponses];

export type FctMevBidCountByBuilderServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The start time for the slot that the bid is for (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The start time for the slot that the bid is for (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The start time for the slot that the bid is for (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The start time for the slot that the bid is for (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The start time for the slot that the bid is for (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The start time for the slot that the bid is for (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The start time for the slot that the bid is for (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The start time for the slot that the bid is for (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The start time for the slot that the bid is for (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The start time for the slot that the bid is for (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The relay that the bid was fetched from (filter: eq)
     */
    builder_pubkey_eq?: string;
    /**
     * The relay that the bid was fetched from (filter: ne)
     */
    builder_pubkey_ne?: string;
    /**
     * The relay that the bid was fetched from (filter: contains)
     */
    builder_pubkey_contains?: string;
    /**
     * The relay that the bid was fetched from (filter: starts_with)
     */
    builder_pubkey_starts_with?: string;
    /**
     * The relay that the bid was fetched from (filter: ends_with)
     */
    builder_pubkey_ends_with?: string;
    /**
     * The relay that the bid was fetched from (filter: like)
     */
    builder_pubkey_like?: string;
    /**
     * The relay that the bid was fetched from (filter: not_like)
     */
    builder_pubkey_not_like?: string;
    /**
     * The relay that the bid was fetched from (filter: in_values) (comma-separated list)
     */
    builder_pubkey_in_values?: string;
    /**
     * The relay that the bid was fetched from (filter: not_in_values) (comma-separated list)
     */
    builder_pubkey_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Slot number within the block bid (filter: eq)
     */
    slot_eq?: number;
    /**
     * Slot number within the block bid (filter: ne)
     */
    slot_ne?: number;
    /**
     * Slot number within the block bid (filter: lt)
     */
    slot_lt?: number;
    /**
     * Slot number within the block bid (filter: lte)
     */
    slot_lte?: number;
    /**
     * Slot number within the block bid (filter: gt)
     */
    slot_gt?: number;
    /**
     * Slot number within the block bid (filter: gte)
     */
    slot_gte?: number;
    /**
     * Slot number within the block bid (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * Slot number within the block bid (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * Slot number within the block bid (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * Slot number within the block bid (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * Epoch number derived from the slot that the bid is for (filter: eq)
     */
    epoch_eq?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: ne)
     */
    epoch_ne?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: lt)
     */
    epoch_lt?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: lte)
     */
    epoch_lte?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: gt)
     */
    epoch_gt?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: gte)
     */
    epoch_gte?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * Epoch number derived from the slot that the bid is for (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The start time for the epoch that the bid is for (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The start time for the epoch that the bid is for (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The start time for the epoch that the bid is for (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The start time for the epoch that the bid is for (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The start time for the epoch that the bid is for (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The start time for the epoch that the bid is for (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The start time for the epoch that the bid is for (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The start time for the epoch that the bid is for (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The start time for the epoch that the bid is for (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The start time for the epoch that the bid is for (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The total number of bids from the builder (filter: eq)
     */
    bid_total_eq?: number;
    /**
     * The total number of bids from the builder (filter: ne)
     */
    bid_total_ne?: number;
    /**
     * The total number of bids from the builder (filter: lt)
     */
    bid_total_lt?: number;
    /**
     * The total number of bids from the builder (filter: lte)
     */
    bid_total_lte?: number;
    /**
     * The total number of bids from the builder (filter: gt)
     */
    bid_total_gt?: number;
    /**
     * The total number of bids from the builder (filter: gte)
     */
    bid_total_gte?: number;
    /**
     * The total number of bids from the builder (filter: between_min)
     */
    bid_total_between_min?: number;
    /**
     * The total number of bids from the builder (filter: between_max_value)
     */
    bid_total_between_max_value?: number;
    /**
     * The total number of bids from the builder (filter: in_values) (comma-separated list)
     */
    bid_total_in_values?: string;
    /**
     * The total number of bids from the builder (filter: not_in_values) (comma-separated list)
     */
    bid_total_not_in_values?: string;
    /**
     * The maximum number of fct_mev_bid_count_by_builder to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctMevBidCountByBuilder` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_mev_bid_count_by_builder';
};

export type FctMevBidCountByBuilderServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctMevBidCountByBuilderServiceListError =
  FctMevBidCountByBuilderServiceListErrors[keyof FctMevBidCountByBuilderServiceListErrors];

export type FctMevBidCountByBuilderServiceListResponses = {
  /**
   * OK
   */
  200: ListFctMevBidCountByBuilderResponse;
};

export type FctMevBidCountByBuilderServiceListResponse =
  FctMevBidCountByBuilderServiceListResponses[keyof FctMevBidCountByBuilderServiceListResponses];

export type FctMevBidCountByBuilderServiceGetData = {
  body?: never;
  path: {
    /**
     * The start time for the slot that the bid is for
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_mev_bid_count_by_builder/{slot_start_date_time}';
};

export type FctMevBidCountByBuilderServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctMevBidCountByBuilderServiceGetError =
  FctMevBidCountByBuilderServiceGetErrors[keyof FctMevBidCountByBuilderServiceGetErrors];

export type FctMevBidCountByBuilderServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctMevBidCountByBuilderResponse;
};

export type FctMevBidCountByBuilderServiceGetResponse =
  FctMevBidCountByBuilderServiceGetResponses[keyof FctMevBidCountByBuilderServiceGetResponses];

export type FctMevBidCountByRelayServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The start time for the slot that the bid is for (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The start time for the slot that the bid is for (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The start time for the slot that the bid is for (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The start time for the slot that the bid is for (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The start time for the slot that the bid is for (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The start time for the slot that the bid is for (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The start time for the slot that the bid is for (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The start time for the slot that the bid is for (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The start time for the slot that the bid is for (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The start time for the slot that the bid is for (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The relay that the bid was fetched from (filter: eq)
     */
    relay_name_eq?: string;
    /**
     * The relay that the bid was fetched from (filter: ne)
     */
    relay_name_ne?: string;
    /**
     * The relay that the bid was fetched from (filter: contains)
     */
    relay_name_contains?: string;
    /**
     * The relay that the bid was fetched from (filter: starts_with)
     */
    relay_name_starts_with?: string;
    /**
     * The relay that the bid was fetched from (filter: ends_with)
     */
    relay_name_ends_with?: string;
    /**
     * The relay that the bid was fetched from (filter: like)
     */
    relay_name_like?: string;
    /**
     * The relay that the bid was fetched from (filter: not_like)
     */
    relay_name_not_like?: string;
    /**
     * The relay that the bid was fetched from (filter: in_values) (comma-separated list)
     */
    relay_name_in_values?: string;
    /**
     * The relay that the bid was fetched from (filter: not_in_values) (comma-separated list)
     */
    relay_name_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Slot number within the block bid (filter: eq)
     */
    slot_eq?: number;
    /**
     * Slot number within the block bid (filter: ne)
     */
    slot_ne?: number;
    /**
     * Slot number within the block bid (filter: lt)
     */
    slot_lt?: number;
    /**
     * Slot number within the block bid (filter: lte)
     */
    slot_lte?: number;
    /**
     * Slot number within the block bid (filter: gt)
     */
    slot_gt?: number;
    /**
     * Slot number within the block bid (filter: gte)
     */
    slot_gte?: number;
    /**
     * Slot number within the block bid (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * Slot number within the block bid (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * Slot number within the block bid (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * Slot number within the block bid (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * Epoch number derived from the slot that the bid is for (filter: eq)
     */
    epoch_eq?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: ne)
     */
    epoch_ne?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: lt)
     */
    epoch_lt?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: lte)
     */
    epoch_lte?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: gt)
     */
    epoch_gt?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: gte)
     */
    epoch_gte?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * Epoch number derived from the slot that the bid is for (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The start time for the epoch that the bid is for (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The start time for the epoch that the bid is for (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The start time for the epoch that the bid is for (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The start time for the epoch that the bid is for (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The start time for the epoch that the bid is for (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The start time for the epoch that the bid is for (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The start time for the epoch that the bid is for (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The start time for the epoch that the bid is for (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The start time for the epoch that the bid is for (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The start time for the epoch that the bid is for (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The total number of bids for the relay (filter: eq)
     */
    bid_total_eq?: number;
    /**
     * The total number of bids for the relay (filter: ne)
     */
    bid_total_ne?: number;
    /**
     * The total number of bids for the relay (filter: lt)
     */
    bid_total_lt?: number;
    /**
     * The total number of bids for the relay (filter: lte)
     */
    bid_total_lte?: number;
    /**
     * The total number of bids for the relay (filter: gt)
     */
    bid_total_gt?: number;
    /**
     * The total number of bids for the relay (filter: gte)
     */
    bid_total_gte?: number;
    /**
     * The total number of bids for the relay (filter: between_min)
     */
    bid_total_between_min?: number;
    /**
     * The total number of bids for the relay (filter: between_max_value)
     */
    bid_total_between_max_value?: number;
    /**
     * The total number of bids for the relay (filter: in_values) (comma-separated list)
     */
    bid_total_in_values?: string;
    /**
     * The total number of bids for the relay (filter: not_in_values) (comma-separated list)
     */
    bid_total_not_in_values?: string;
    /**
     * The maximum number of fct_mev_bid_count_by_relay to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctMevBidCountByRelay` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_mev_bid_count_by_relay';
};

export type FctMevBidCountByRelayServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctMevBidCountByRelayServiceListError =
  FctMevBidCountByRelayServiceListErrors[keyof FctMevBidCountByRelayServiceListErrors];

export type FctMevBidCountByRelayServiceListResponses = {
  /**
   * OK
   */
  200: ListFctMevBidCountByRelayResponse;
};

export type FctMevBidCountByRelayServiceListResponse =
  FctMevBidCountByRelayServiceListResponses[keyof FctMevBidCountByRelayServiceListResponses];

export type FctMevBidCountByRelayServiceGetData = {
  body?: never;
  path: {
    /**
     * The start time for the slot that the bid is for
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_mev_bid_count_by_relay/{slot_start_date_time}';
};

export type FctMevBidCountByRelayServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctMevBidCountByRelayServiceGetError =
  FctMevBidCountByRelayServiceGetErrors[keyof FctMevBidCountByRelayServiceGetErrors];

export type FctMevBidCountByRelayServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctMevBidCountByRelayResponse;
};

export type FctMevBidCountByRelayServiceGetResponse =
  FctMevBidCountByRelayServiceGetResponses[keyof FctMevBidCountByRelayServiceGetResponses];

export type FctMevBidHighestValueByBuilderChunked50MsServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The start time for the slot that the bid is for (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The start time for the slot that the bid is for (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The start time for the slot that the bid is for (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The start time for the slot that the bid is for (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The start time for the slot that the bid is for (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The start time for the slot that the bid is for (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The start time for the slot that the bid is for (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The start time for the slot that the bid is for (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The start time for the slot that the bid is for (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The start time for the slot that the bid is for (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: eq)
     */
    chunk_slot_start_diff_eq?: number;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: ne)
     */
    chunk_slot_start_diff_ne?: number;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: lt)
     */
    chunk_slot_start_diff_lt?: number;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: lte)
     */
    chunk_slot_start_diff_lte?: number;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: gt)
     */
    chunk_slot_start_diff_gt?: number;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: gte)
     */
    chunk_slot_start_diff_gte?: number;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: between_min)
     */
    chunk_slot_start_diff_between_min?: number;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: between_max_value)
     */
    chunk_slot_start_diff_between_max_value?: number;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: in_values) (comma-separated list)
     */
    chunk_slot_start_diff_in_values?: string;
    /**
     * The difference between the chunk start time and slot_start_date_time. "1500" would mean the earliest bid for this block_hash was between 1500ms and 1550ms into the slot. Negative values indicate bids received before slot start (filter: not_in_values) (comma-separated list)
     */
    chunk_slot_start_diff_not_in_values?: string;
    /**
     * The builder pubkey of the bid (filter: eq)
     */
    builder_pubkey_eq?: string;
    /**
     * The builder pubkey of the bid (filter: ne)
     */
    builder_pubkey_ne?: string;
    /**
     * The builder pubkey of the bid (filter: contains)
     */
    builder_pubkey_contains?: string;
    /**
     * The builder pubkey of the bid (filter: starts_with)
     */
    builder_pubkey_starts_with?: string;
    /**
     * The builder pubkey of the bid (filter: ends_with)
     */
    builder_pubkey_ends_with?: string;
    /**
     * The builder pubkey of the bid (filter: like)
     */
    builder_pubkey_like?: string;
    /**
     * The builder pubkey of the bid (filter: not_like)
     */
    builder_pubkey_not_like?: string;
    /**
     * The builder pubkey of the bid (filter: in_values) (comma-separated list)
     */
    builder_pubkey_in_values?: string;
    /**
     * The builder pubkey of the bid (filter: not_in_values) (comma-separated list)
     */
    builder_pubkey_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Slot number within the block bid (filter: eq)
     */
    slot_eq?: number;
    /**
     * Slot number within the block bid (filter: ne)
     */
    slot_ne?: number;
    /**
     * Slot number within the block bid (filter: lt)
     */
    slot_lt?: number;
    /**
     * Slot number within the block bid (filter: lte)
     */
    slot_lte?: number;
    /**
     * Slot number within the block bid (filter: gt)
     */
    slot_gt?: number;
    /**
     * Slot number within the block bid (filter: gte)
     */
    slot_gte?: number;
    /**
     * Slot number within the block bid (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * Slot number within the block bid (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * Slot number within the block bid (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * Slot number within the block bid (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * Epoch number derived from the slot that the bid is for (filter: eq)
     */
    epoch_eq?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: ne)
     */
    epoch_ne?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: lt)
     */
    epoch_lt?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: lte)
     */
    epoch_lte?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: gt)
     */
    epoch_gt?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: gte)
     */
    epoch_gte?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: between_min)
     */
    epoch_between_min?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: between_max_value)
     */
    epoch_between_max_value?: number;
    /**
     * Epoch number derived from the slot that the bid is for (filter: in_values) (comma-separated list)
     */
    epoch_in_values?: string;
    /**
     * Epoch number derived from the slot that the bid is for (filter: not_in_values) (comma-separated list)
     */
    epoch_not_in_values?: string;
    /**
     * The start time for the epoch that the bid is for (filter: eq)
     */
    epoch_start_date_time_eq?: number;
    /**
     * The start time for the epoch that the bid is for (filter: ne)
     */
    epoch_start_date_time_ne?: number;
    /**
     * The start time for the epoch that the bid is for (filter: lt)
     */
    epoch_start_date_time_lt?: number;
    /**
     * The start time for the epoch that the bid is for (filter: lte)
     */
    epoch_start_date_time_lte?: number;
    /**
     * The start time for the epoch that the bid is for (filter: gt)
     */
    epoch_start_date_time_gt?: number;
    /**
     * The start time for the epoch that the bid is for (filter: gte)
     */
    epoch_start_date_time_gte?: number;
    /**
     * The start time for the epoch that the bid is for (filter: between_min)
     */
    epoch_start_date_time_between_min?: number;
    /**
     * The start time for the epoch that the bid is for (filter: between_max_value)
     */
    epoch_start_date_time_between_max_value?: number;
    /**
     * The start time for the epoch that the bid is for (filter: in_values) (comma-separated list)
     */
    epoch_start_date_time_in_values?: string;
    /**
     * The start time for the epoch that the bid is for (filter: not_in_values) (comma-separated list)
     */
    epoch_start_date_time_not_in_values?: string;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: eq)
     */
    earliest_bid_date_time_eq?: number;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: ne)
     */
    earliest_bid_date_time_ne?: number;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: lt)
     */
    earliest_bid_date_time_lt?: number;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: lte)
     */
    earliest_bid_date_time_lte?: number;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: gt)
     */
    earliest_bid_date_time_gt?: number;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: gte)
     */
    earliest_bid_date_time_gte?: number;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: between_min)
     */
    earliest_bid_date_time_between_min?: number;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: between_max_value)
     */
    earliest_bid_date_time_between_max_value?: number;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: in_values) (comma-separated list)
     */
    earliest_bid_date_time_in_values?: string;
    /**
     * The timestamp of the earliest bid for this block_hash from this builder (filter: not_in_values) (comma-separated list)
     */
    earliest_bid_date_time_not_in_values?: string;
    /**
     * Filter by relay_names - The relay that the bid was fetched from (optional)
     */
    relay_names?: Array<string>;
    /**
     * The execution block hash of the bid (filter: eq)
     */
    block_hash_eq?: string;
    /**
     * The execution block hash of the bid (filter: ne)
     */
    block_hash_ne?: string;
    /**
     * The execution block hash of the bid (filter: contains)
     */
    block_hash_contains?: string;
    /**
     * The execution block hash of the bid (filter: starts_with)
     */
    block_hash_starts_with?: string;
    /**
     * The execution block hash of the bid (filter: ends_with)
     */
    block_hash_ends_with?: string;
    /**
     * The execution block hash of the bid (filter: like)
     */
    block_hash_like?: string;
    /**
     * The execution block hash of the bid (filter: not_like)
     */
    block_hash_not_like?: string;
    /**
     * The execution block hash of the bid (filter: in_values) (comma-separated list)
     */
    block_hash_in_values?: string;
    /**
     * The execution block hash of the bid (filter: not_in_values) (comma-separated list)
     */
    block_hash_not_in_values?: string;
    /**
     * The transaction value in wei (filter: eq)
     */
    value_eq?: string;
    /**
     * The transaction value in wei (filter: ne)
     */
    value_ne?: string;
    /**
     * The transaction value in wei (filter: contains)
     */
    value_contains?: string;
    /**
     * The transaction value in wei (filter: starts_with)
     */
    value_starts_with?: string;
    /**
     * The transaction value in wei (filter: ends_with)
     */
    value_ends_with?: string;
    /**
     * The transaction value in wei (filter: like)
     */
    value_like?: string;
    /**
     * The transaction value in wei (filter: not_like)
     */
    value_not_like?: string;
    /**
     * The transaction value in wei (filter: in_values) (comma-separated list)
     */
    value_in_values?: string;
    /**
     * The transaction value in wei (filter: not_in_values) (comma-separated list)
     */
    value_not_in_values?: string;
    /**
     * The maximum number of fct_mev_bid_highest_value_by_builder_chunked_50ms to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctMevBidHighestValueByBuilderChunked50ms` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_mev_bid_highest_value_by_builder_chunked_50ms';
};

export type FctMevBidHighestValueByBuilderChunked50MsServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctMevBidHighestValueByBuilderChunked50MsServiceListError =
  FctMevBidHighestValueByBuilderChunked50MsServiceListErrors[keyof FctMevBidHighestValueByBuilderChunked50MsServiceListErrors];

export type FctMevBidHighestValueByBuilderChunked50MsServiceListResponses = {
  /**
   * OK
   */
  200: ListFctMevBidHighestValueByBuilderChunked50MsResponse;
};

export type FctMevBidHighestValueByBuilderChunked50MsServiceListResponse =
  FctMevBidHighestValueByBuilderChunked50MsServiceListResponses[keyof FctMevBidHighestValueByBuilderChunked50MsServiceListResponses];

export type FctMevBidHighestValueByBuilderChunked50MsServiceGetData = {
  body?: never;
  path: {
    /**
     * The start time for the slot that the bid is for
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_mev_bid_highest_value_by_builder_chunked_50ms/{slot_start_date_time}';
};

export type FctMevBidHighestValueByBuilderChunked50MsServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctMevBidHighestValueByBuilderChunked50MsServiceGetError =
  FctMevBidHighestValueByBuilderChunked50MsServiceGetErrors[keyof FctMevBidHighestValueByBuilderChunked50MsServiceGetErrors];

export type FctMevBidHighestValueByBuilderChunked50MsServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctMevBidHighestValueByBuilderChunked50MsResponse;
};

export type FctMevBidHighestValueByBuilderChunked50MsServiceGetResponse =
  FctMevBidHighestValueByBuilderChunked50MsServiceGetResponses[keyof FctMevBidHighestValueByBuilderChunked50MsServiceGetResponses];

export type FctNodeActiveLast24hServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * Name of the client (filter: eq)
     */
    meta_client_name_eq?: string;
    /**
     * Name of the client (filter: ne)
     */
    meta_client_name_ne?: string;
    /**
     * Name of the client (filter: contains)
     */
    meta_client_name_contains?: string;
    /**
     * Name of the client (filter: starts_with)
     */
    meta_client_name_starts_with?: string;
    /**
     * Name of the client (filter: ends_with)
     */
    meta_client_name_ends_with?: string;
    /**
     * Name of the client (filter: like)
     */
    meta_client_name_like?: string;
    /**
     * Name of the client (filter: not_like)
     */
    meta_client_name_not_like?: string;
    /**
     * Name of the client (filter: in_values) (comma-separated list)
     */
    meta_client_name_in_values?: string;
    /**
     * Name of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_name_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Timestamp when the node was last seen (filter: eq)
     */
    last_seen_date_time_eq?: number;
    /**
     * Timestamp when the node was last seen (filter: ne)
     */
    last_seen_date_time_ne?: number;
    /**
     * Timestamp when the node was last seen (filter: lt)
     */
    last_seen_date_time_lt?: number;
    /**
     * Timestamp when the node was last seen (filter: lte)
     */
    last_seen_date_time_lte?: number;
    /**
     * Timestamp when the node was last seen (filter: gt)
     */
    last_seen_date_time_gt?: number;
    /**
     * Timestamp when the node was last seen (filter: gte)
     */
    last_seen_date_time_gte?: number;
    /**
     * Timestamp when the node was last seen (filter: between_min)
     */
    last_seen_date_time_between_min?: number;
    /**
     * Timestamp when the node was last seen (filter: between_max_value)
     */
    last_seen_date_time_between_max_value?: number;
    /**
     * Timestamp when the node was last seen (filter: in_values) (comma-separated list)
     */
    last_seen_date_time_in_values?: string;
    /**
     * Timestamp when the node was last seen (filter: not_in_values) (comma-separated list)
     */
    last_seen_date_time_not_in_values?: string;
    /**
     * Username of the node (filter: eq)
     */
    username_eq?: string;
    /**
     * Username of the node (filter: ne)
     */
    username_ne?: string;
    /**
     * Username of the node (filter: contains)
     */
    username_contains?: string;
    /**
     * Username of the node (filter: starts_with)
     */
    username_starts_with?: string;
    /**
     * Username of the node (filter: ends_with)
     */
    username_ends_with?: string;
    /**
     * Username of the node (filter: like)
     */
    username_like?: string;
    /**
     * Username of the node (filter: not_like)
     */
    username_not_like?: string;
    /**
     * Username of the node (filter: in_values) (comma-separated list)
     */
    username_in_values?: string;
    /**
     * Username of the node (filter: not_in_values) (comma-separated list)
     */
    username_not_in_values?: string;
    /**
     * ID of the node (filter: eq)
     */
    node_id_eq?: string;
    /**
     * ID of the node (filter: ne)
     */
    node_id_ne?: string;
    /**
     * ID of the node (filter: contains)
     */
    node_id_contains?: string;
    /**
     * ID of the node (filter: starts_with)
     */
    node_id_starts_with?: string;
    /**
     * ID of the node (filter: ends_with)
     */
    node_id_ends_with?: string;
    /**
     * ID of the node (filter: like)
     */
    node_id_like?: string;
    /**
     * ID of the node (filter: not_like)
     */
    node_id_not_like?: string;
    /**
     * ID of the node (filter: in_values) (comma-separated list)
     */
    node_id_in_values?: string;
    /**
     * ID of the node (filter: not_in_values) (comma-separated list)
     */
    node_id_not_in_values?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: eq)
     */
    classification_eq?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: ne)
     */
    classification_ne?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: contains)
     */
    classification_contains?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: starts_with)
     */
    classification_starts_with?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: ends_with)
     */
    classification_ends_with?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: like)
     */
    classification_like?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: not_like)
     */
    classification_not_like?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: in_values) (comma-separated list)
     */
    classification_in_values?: string;
    /**
     * Classification of the node, e.g. "individual", "institution", "internal" (aka ethPandaOps) or "unclassified" (filter: not_in_values) (comma-separated list)
     */
    classification_not_in_values?: string;
    /**
     * Version of the client (filter: eq)
     */
    meta_client_version_eq?: string;
    /**
     * Version of the client (filter: ne)
     */
    meta_client_version_ne?: string;
    /**
     * Version of the client (filter: contains)
     */
    meta_client_version_contains?: string;
    /**
     * Version of the client (filter: starts_with)
     */
    meta_client_version_starts_with?: string;
    /**
     * Version of the client (filter: ends_with)
     */
    meta_client_version_ends_with?: string;
    /**
     * Version of the client (filter: like)
     */
    meta_client_version_like?: string;
    /**
     * Version of the client (filter: not_like)
     */
    meta_client_version_not_like?: string;
    /**
     * Version of the client (filter: in_values) (comma-separated list)
     */
    meta_client_version_in_values?: string;
    /**
     * Version of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_version_not_in_values?: string;
    /**
     * Implementation of the client (filter: eq)
     */
    meta_client_implementation_eq?: string;
    /**
     * Implementation of the client (filter: ne)
     */
    meta_client_implementation_ne?: string;
    /**
     * Implementation of the client (filter: contains)
     */
    meta_client_implementation_contains?: string;
    /**
     * Implementation of the client (filter: starts_with)
     */
    meta_client_implementation_starts_with?: string;
    /**
     * Implementation of the client (filter: ends_with)
     */
    meta_client_implementation_ends_with?: string;
    /**
     * Implementation of the client (filter: like)
     */
    meta_client_implementation_like?: string;
    /**
     * Implementation of the client (filter: not_like)
     */
    meta_client_implementation_not_like?: string;
    /**
     * Implementation of the client (filter: in_values) (comma-separated list)
     */
    meta_client_implementation_in_values?: string;
    /**
     * Implementation of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_implementation_not_in_values?: string;
    /**
     * City of the client (filter: eq)
     */
    meta_client_geo_city_eq?: string;
    /**
     * City of the client (filter: ne)
     */
    meta_client_geo_city_ne?: string;
    /**
     * City of the client (filter: contains)
     */
    meta_client_geo_city_contains?: string;
    /**
     * City of the client (filter: starts_with)
     */
    meta_client_geo_city_starts_with?: string;
    /**
     * City of the client (filter: ends_with)
     */
    meta_client_geo_city_ends_with?: string;
    /**
     * City of the client (filter: like)
     */
    meta_client_geo_city_like?: string;
    /**
     * City of the client (filter: not_like)
     */
    meta_client_geo_city_not_like?: string;
    /**
     * City of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_city_in_values?: string;
    /**
     * City of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_city_not_in_values?: string;
    /**
     * Country of the client (filter: eq)
     */
    meta_client_geo_country_eq?: string;
    /**
     * Country of the client (filter: ne)
     */
    meta_client_geo_country_ne?: string;
    /**
     * Country of the client (filter: contains)
     */
    meta_client_geo_country_contains?: string;
    /**
     * Country of the client (filter: starts_with)
     */
    meta_client_geo_country_starts_with?: string;
    /**
     * Country of the client (filter: ends_with)
     */
    meta_client_geo_country_ends_with?: string;
    /**
     * Country of the client (filter: like)
     */
    meta_client_geo_country_like?: string;
    /**
     * Country of the client (filter: not_like)
     */
    meta_client_geo_country_not_like?: string;
    /**
     * Country of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_country_in_values?: string;
    /**
     * Country of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_country_not_in_values?: string;
    /**
     * Country code of the client (filter: eq)
     */
    meta_client_geo_country_code_eq?: string;
    /**
     * Country code of the client (filter: ne)
     */
    meta_client_geo_country_code_ne?: string;
    /**
     * Country code of the client (filter: contains)
     */
    meta_client_geo_country_code_contains?: string;
    /**
     * Country code of the client (filter: starts_with)
     */
    meta_client_geo_country_code_starts_with?: string;
    /**
     * Country code of the client (filter: ends_with)
     */
    meta_client_geo_country_code_ends_with?: string;
    /**
     * Country code of the client (filter: like)
     */
    meta_client_geo_country_code_like?: string;
    /**
     * Country code of the client (filter: not_like)
     */
    meta_client_geo_country_code_not_like?: string;
    /**
     * Country code of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_country_code_in_values?: string;
    /**
     * Country code of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_country_code_not_in_values?: string;
    /**
     * Continent code of the client (filter: eq)
     */
    meta_client_geo_continent_code_eq?: string;
    /**
     * Continent code of the client (filter: ne)
     */
    meta_client_geo_continent_code_ne?: string;
    /**
     * Continent code of the client (filter: contains)
     */
    meta_client_geo_continent_code_contains?: string;
    /**
     * Continent code of the client (filter: starts_with)
     */
    meta_client_geo_continent_code_starts_with?: string;
    /**
     * Continent code of the client (filter: ends_with)
     */
    meta_client_geo_continent_code_ends_with?: string;
    /**
     * Continent code of the client (filter: like)
     */
    meta_client_geo_continent_code_like?: string;
    /**
     * Continent code of the client (filter: not_like)
     */
    meta_client_geo_continent_code_not_like?: string;
    /**
     * Continent code of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_continent_code_in_values?: string;
    /**
     * Continent code of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_continent_code_not_in_values?: string;
    /**
     * Filter meta_client_geo_longitude using value
     */
    meta_client_geo_longitude_value?: number;
    /**
     * Filter meta_client_geo_latitude using value
     */
    meta_client_geo_latitude_value?: number;
    /**
     * Autonomous system number of the client (filter: eq)
     */
    meta_client_geo_autonomous_system_number_eq?: number;
    /**
     * Autonomous system number of the client (filter: ne)
     */
    meta_client_geo_autonomous_system_number_ne?: number;
    /**
     * Autonomous system number of the client (filter: lt)
     */
    meta_client_geo_autonomous_system_number_lt?: number;
    /**
     * Autonomous system number of the client (filter: lte)
     */
    meta_client_geo_autonomous_system_number_lte?: number;
    /**
     * Autonomous system number of the client (filter: gt)
     */
    meta_client_geo_autonomous_system_number_gt?: number;
    /**
     * Autonomous system number of the client (filter: gte)
     */
    meta_client_geo_autonomous_system_number_gte?: number;
    /**
     * Autonomous system number of the client (filter: between_min)
     */
    meta_client_geo_autonomous_system_number_between_min?: number;
    /**
     * Autonomous system number of the client (filter: between_max_value)
     */
    meta_client_geo_autonomous_system_number_between_max_value?: number;
    /**
     * Autonomous system number of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_number_in_values?: string;
    /**
     * Autonomous system number of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_number_not_in_values?: string;
    /**
     * Autonomous system organization of the client (filter: eq)
     */
    meta_client_geo_autonomous_system_organization_eq?: string;
    /**
     * Autonomous system organization of the client (filter: ne)
     */
    meta_client_geo_autonomous_system_organization_ne?: string;
    /**
     * Autonomous system organization of the client (filter: contains)
     */
    meta_client_geo_autonomous_system_organization_contains?: string;
    /**
     * Autonomous system organization of the client (filter: starts_with)
     */
    meta_client_geo_autonomous_system_organization_starts_with?: string;
    /**
     * Autonomous system organization of the client (filter: ends_with)
     */
    meta_client_geo_autonomous_system_organization_ends_with?: string;
    /**
     * Autonomous system organization of the client (filter: like)
     */
    meta_client_geo_autonomous_system_organization_like?: string;
    /**
     * Autonomous system organization of the client (filter: not_like)
     */
    meta_client_geo_autonomous_system_organization_not_like?: string;
    /**
     * Autonomous system organization of the client (filter: in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_organization_in_values?: string;
    /**
     * Autonomous system organization of the client (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_autonomous_system_organization_not_in_values?: string;
    /**
     * Ethereum consensus client version (filter: eq)
     */
    meta_consensus_version_eq?: string;
    /**
     * Ethereum consensus client version (filter: ne)
     */
    meta_consensus_version_ne?: string;
    /**
     * Ethereum consensus client version (filter: contains)
     */
    meta_consensus_version_contains?: string;
    /**
     * Ethereum consensus client version (filter: starts_with)
     */
    meta_consensus_version_starts_with?: string;
    /**
     * Ethereum consensus client version (filter: ends_with)
     */
    meta_consensus_version_ends_with?: string;
    /**
     * Ethereum consensus client version (filter: like)
     */
    meta_consensus_version_like?: string;
    /**
     * Ethereum consensus client version (filter: not_like)
     */
    meta_consensus_version_not_like?: string;
    /**
     * Ethereum consensus client version (filter: in_values) (comma-separated list)
     */
    meta_consensus_version_in_values?: string;
    /**
     * Ethereum consensus client version (filter: not_in_values) (comma-separated list)
     */
    meta_consensus_version_not_in_values?: string;
    /**
     * Ethereum consensus client implementation (filter: eq)
     */
    meta_consensus_implementation_eq?: string;
    /**
     * Ethereum consensus client implementation (filter: ne)
     */
    meta_consensus_implementation_ne?: string;
    /**
     * Ethereum consensus client implementation (filter: contains)
     */
    meta_consensus_implementation_contains?: string;
    /**
     * Ethereum consensus client implementation (filter: starts_with)
     */
    meta_consensus_implementation_starts_with?: string;
    /**
     * Ethereum consensus client implementation (filter: ends_with)
     */
    meta_consensus_implementation_ends_with?: string;
    /**
     * Ethereum consensus client implementation (filter: like)
     */
    meta_consensus_implementation_like?: string;
    /**
     * Ethereum consensus client implementation (filter: not_like)
     */
    meta_consensus_implementation_not_like?: string;
    /**
     * Ethereum consensus client implementation (filter: in_values) (comma-separated list)
     */
    meta_consensus_implementation_in_values?: string;
    /**
     * Ethereum consensus client implementation (filter: not_in_values) (comma-separated list)
     */
    meta_consensus_implementation_not_in_values?: string;
    /**
     * The maximum number of fct_node_active_last_24h to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctNodeActiveLast24h` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_node_active_last_24h';
};

export type FctNodeActiveLast24hServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctNodeActiveLast24hServiceListError =
  FctNodeActiveLast24hServiceListErrors[keyof FctNodeActiveLast24hServiceListErrors];

export type FctNodeActiveLast24hServiceListResponses = {
  /**
   * OK
   */
  200: ListFctNodeActiveLast24hResponse;
};

export type FctNodeActiveLast24hServiceListResponse =
  FctNodeActiveLast24hServiceListResponses[keyof FctNodeActiveLast24hServiceListResponses];

export type FctNodeActiveLast24hServiceGetData = {
  body?: never;
  path: {
    /**
     * Name of the client
     */
    meta_client_name: string;
  };
  query?: never;
  url: '/api/v1/fct_node_active_last_24h/{meta_client_name}';
};

export type FctNodeActiveLast24hServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctNodeActiveLast24hServiceGetError =
  FctNodeActiveLast24hServiceGetErrors[keyof FctNodeActiveLast24hServiceGetErrors];

export type FctNodeActiveLast24hServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctNodeActiveLast24hResponse;
};

export type FctNodeActiveLast24hServiceGetResponse =
  FctNodeActiveLast24hServiceGetResponses[keyof FctNodeActiveLast24hServiceGetResponses];

export type FctPreparedBlockServiceListData = {
  body?: never;
  path?: never;
  query?: {
    /**
     * The wall clock time when the slot started (filter: eq)
     */
    slot_start_date_time_eq?: number;
    /**
     * The wall clock time when the slot started (filter: ne)
     */
    slot_start_date_time_ne?: number;
    /**
     * The wall clock time when the slot started (filter: lt)
     */
    slot_start_date_time_lt?: number;
    /**
     * The wall clock time when the slot started (filter: lte)
     */
    slot_start_date_time_lte?: number;
    /**
     * The wall clock time when the slot started (filter: gt)
     */
    slot_start_date_time_gt?: number;
    /**
     * The wall clock time when the slot started (filter: gte)
     */
    slot_start_date_time_gte?: number;
    /**
     * The wall clock time when the slot started (filter: between_min)
     */
    slot_start_date_time_between_min?: number;
    /**
     * The wall clock time when the slot started (filter: between_max_value)
     */
    slot_start_date_time_between_max_value?: number;
    /**
     * The wall clock time when the slot started (filter: in_values) (comma-separated list)
     */
    slot_start_date_time_in_values?: string;
    /**
     * The wall clock time when the slot started (filter: not_in_values) (comma-separated list)
     */
    slot_start_date_time_not_in_values?: string;
    /**
     * The slot number from beacon block (filter: eq)
     */
    slot_eq?: number;
    /**
     * The slot number from beacon block (filter: ne)
     */
    slot_ne?: number;
    /**
     * The slot number from beacon block (filter: lt)
     */
    slot_lt?: number;
    /**
     * The slot number from beacon block (filter: lte)
     */
    slot_lte?: number;
    /**
     * The slot number from beacon block (filter: gt)
     */
    slot_gt?: number;
    /**
     * The slot number from beacon block (filter: gte)
     */
    slot_gte?: number;
    /**
     * The slot number from beacon block (filter: between_min)
     */
    slot_between_min?: number;
    /**
     * The slot number from beacon block (filter: between_max_value)
     */
    slot_between_max_value?: number;
    /**
     * The slot number from beacon block (filter: in_values) (comma-separated list)
     */
    slot_in_values?: string;
    /**
     * The slot number from beacon block (filter: not_in_values) (comma-separated list)
     */
    slot_not_in_values?: string;
    /**
     * Name of the client that generated the event (filter: eq)
     */
    meta_client_name_eq?: string;
    /**
     * Name of the client that generated the event (filter: ne)
     */
    meta_client_name_ne?: string;
    /**
     * Name of the client that generated the event (filter: contains)
     */
    meta_client_name_contains?: string;
    /**
     * Name of the client that generated the event (filter: starts_with)
     */
    meta_client_name_starts_with?: string;
    /**
     * Name of the client that generated the event (filter: ends_with)
     */
    meta_client_name_ends_with?: string;
    /**
     * Name of the client that generated the event (filter: like)
     */
    meta_client_name_like?: string;
    /**
     * Name of the client that generated the event (filter: not_like)
     */
    meta_client_name_not_like?: string;
    /**
     * Name of the client that generated the event (filter: in_values) (comma-separated list)
     */
    meta_client_name_in_values?: string;
    /**
     * Name of the client that generated the event (filter: not_in_values) (comma-separated list)
     */
    meta_client_name_not_in_values?: string;
    /**
     * The wall clock time when the event was received (filter: eq)
     */
    event_date_time_eq?: number;
    /**
     * The wall clock time when the event was received (filter: ne)
     */
    event_date_time_ne?: number;
    /**
     * The wall clock time when the event was received (filter: lt)
     */
    event_date_time_lt?: number;
    /**
     * The wall clock time when the event was received (filter: lte)
     */
    event_date_time_lte?: number;
    /**
     * The wall clock time when the event was received (filter: gt)
     */
    event_date_time_gt?: number;
    /**
     * The wall clock time when the event was received (filter: gte)
     */
    event_date_time_gte?: number;
    /**
     * The wall clock time when the event was received (filter: between_min)
     */
    event_date_time_between_min?: number;
    /**
     * The wall clock time when the event was received (filter: between_max_value)
     */
    event_date_time_between_max_value?: number;
    /**
     * The wall clock time when the event was received (filter: in_values) (comma-separated list)
     */
    event_date_time_in_values?: string;
    /**
     * The wall clock time when the event was received (filter: not_in_values) (comma-separated list)
     */
    event_date_time_not_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: eq)
     */
    updated_date_time_eq?: number;
    /**
     * Timestamp when the record was last updated (filter: ne)
     */
    updated_date_time_ne?: number;
    /**
     * Timestamp when the record was last updated (filter: lt)
     */
    updated_date_time_lt?: number;
    /**
     * Timestamp when the record was last updated (filter: lte)
     */
    updated_date_time_lte?: number;
    /**
     * Timestamp when the record was last updated (filter: gt)
     */
    updated_date_time_gt?: number;
    /**
     * Timestamp when the record was last updated (filter: gte)
     */
    updated_date_time_gte?: number;
    /**
     * Timestamp when the record was last updated (filter: between_min)
     */
    updated_date_time_between_min?: number;
    /**
     * Timestamp when the record was last updated (filter: between_max_value)
     */
    updated_date_time_between_max_value?: number;
    /**
     * Timestamp when the record was last updated (filter: in_values) (comma-separated list)
     */
    updated_date_time_in_values?: string;
    /**
     * Timestamp when the record was last updated (filter: not_in_values) (comma-separated list)
     */
    updated_date_time_not_in_values?: string;
    /**
     * Version of the client that generated the event (filter: eq)
     */
    meta_client_version_eq?: string;
    /**
     * Version of the client that generated the event (filter: ne)
     */
    meta_client_version_ne?: string;
    /**
     * Version of the client that generated the event (filter: contains)
     */
    meta_client_version_contains?: string;
    /**
     * Version of the client that generated the event (filter: starts_with)
     */
    meta_client_version_starts_with?: string;
    /**
     * Version of the client that generated the event (filter: ends_with)
     */
    meta_client_version_ends_with?: string;
    /**
     * Version of the client that generated the event (filter: like)
     */
    meta_client_version_like?: string;
    /**
     * Version of the client that generated the event (filter: not_like)
     */
    meta_client_version_not_like?: string;
    /**
     * Version of the client that generated the event (filter: in_values) (comma-separated list)
     */
    meta_client_version_in_values?: string;
    /**
     * Version of the client that generated the event (filter: not_in_values) (comma-separated list)
     */
    meta_client_version_not_in_values?: string;
    /**
     * Implementation of the client that generated the event (filter: eq)
     */
    meta_client_implementation_eq?: string;
    /**
     * Implementation of the client that generated the event (filter: ne)
     */
    meta_client_implementation_ne?: string;
    /**
     * Implementation of the client that generated the event (filter: contains)
     */
    meta_client_implementation_contains?: string;
    /**
     * Implementation of the client that generated the event (filter: starts_with)
     */
    meta_client_implementation_starts_with?: string;
    /**
     * Implementation of the client that generated the event (filter: ends_with)
     */
    meta_client_implementation_ends_with?: string;
    /**
     * Implementation of the client that generated the event (filter: like)
     */
    meta_client_implementation_like?: string;
    /**
     * Implementation of the client that generated the event (filter: not_like)
     */
    meta_client_implementation_not_like?: string;
    /**
     * Implementation of the client that generated the event (filter: in_values) (comma-separated list)
     */
    meta_client_implementation_in_values?: string;
    /**
     * Implementation of the client that generated the event (filter: not_in_values) (comma-separated list)
     */
    meta_client_implementation_not_in_values?: string;
    /**
     * Consensus implementation of the validator (filter: eq)
     */
    meta_consensus_implementation_eq?: string;
    /**
     * Consensus implementation of the validator (filter: ne)
     */
    meta_consensus_implementation_ne?: string;
    /**
     * Consensus implementation of the validator (filter: contains)
     */
    meta_consensus_implementation_contains?: string;
    /**
     * Consensus implementation of the validator (filter: starts_with)
     */
    meta_consensus_implementation_starts_with?: string;
    /**
     * Consensus implementation of the validator (filter: ends_with)
     */
    meta_consensus_implementation_ends_with?: string;
    /**
     * Consensus implementation of the validator (filter: like)
     */
    meta_consensus_implementation_like?: string;
    /**
     * Consensus implementation of the validator (filter: not_like)
     */
    meta_consensus_implementation_not_like?: string;
    /**
     * Consensus implementation of the validator (filter: in_values) (comma-separated list)
     */
    meta_consensus_implementation_in_values?: string;
    /**
     * Consensus implementation of the validator (filter: not_in_values) (comma-separated list)
     */
    meta_consensus_implementation_not_in_values?: string;
    /**
     * Consensus version of the validator (filter: eq)
     */
    meta_consensus_version_eq?: string;
    /**
     * Consensus version of the validator (filter: ne)
     */
    meta_consensus_version_ne?: string;
    /**
     * Consensus version of the validator (filter: contains)
     */
    meta_consensus_version_contains?: string;
    /**
     * Consensus version of the validator (filter: starts_with)
     */
    meta_consensus_version_starts_with?: string;
    /**
     * Consensus version of the validator (filter: ends_with)
     */
    meta_consensus_version_ends_with?: string;
    /**
     * Consensus version of the validator (filter: like)
     */
    meta_consensus_version_like?: string;
    /**
     * Consensus version of the validator (filter: not_like)
     */
    meta_consensus_version_not_like?: string;
    /**
     * Consensus version of the validator (filter: in_values) (comma-separated list)
     */
    meta_consensus_version_in_values?: string;
    /**
     * Consensus version of the validator (filter: not_in_values) (comma-separated list)
     */
    meta_consensus_version_not_in_values?: string;
    /**
     * City of the client that generated the event (filter: eq)
     */
    meta_client_geo_city_eq?: string;
    /**
     * City of the client that generated the event (filter: ne)
     */
    meta_client_geo_city_ne?: string;
    /**
     * City of the client that generated the event (filter: contains)
     */
    meta_client_geo_city_contains?: string;
    /**
     * City of the client that generated the event (filter: starts_with)
     */
    meta_client_geo_city_starts_with?: string;
    /**
     * City of the client that generated the event (filter: ends_with)
     */
    meta_client_geo_city_ends_with?: string;
    /**
     * City of the client that generated the event (filter: like)
     */
    meta_client_geo_city_like?: string;
    /**
     * City of the client that generated the event (filter: not_like)
     */
    meta_client_geo_city_not_like?: string;
    /**
     * City of the client that generated the event (filter: in_values) (comma-separated list)
     */
    meta_client_geo_city_in_values?: string;
    /**
     * City of the client that generated the event (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_city_not_in_values?: string;
    /**
     * Country of the client that generated the event (filter: eq)
     */
    meta_client_geo_country_eq?: string;
    /**
     * Country of the client that generated the event (filter: ne)
     */
    meta_client_geo_country_ne?: string;
    /**
     * Country of the client that generated the event (filter: contains)
     */
    meta_client_geo_country_contains?: string;
    /**
     * Country of the client that generated the event (filter: starts_with)
     */
    meta_client_geo_country_starts_with?: string;
    /**
     * Country of the client that generated the event (filter: ends_with)
     */
    meta_client_geo_country_ends_with?: string;
    /**
     * Country of the client that generated the event (filter: like)
     */
    meta_client_geo_country_like?: string;
    /**
     * Country of the client that generated the event (filter: not_like)
     */
    meta_client_geo_country_not_like?: string;
    /**
     * Country of the client that generated the event (filter: in_values) (comma-separated list)
     */
    meta_client_geo_country_in_values?: string;
    /**
     * Country of the client that generated the event (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_country_not_in_values?: string;
    /**
     * Country code of the client that generated the event (filter: eq)
     */
    meta_client_geo_country_code_eq?: string;
    /**
     * Country code of the client that generated the event (filter: ne)
     */
    meta_client_geo_country_code_ne?: string;
    /**
     * Country code of the client that generated the event (filter: contains)
     */
    meta_client_geo_country_code_contains?: string;
    /**
     * Country code of the client that generated the event (filter: starts_with)
     */
    meta_client_geo_country_code_starts_with?: string;
    /**
     * Country code of the client that generated the event (filter: ends_with)
     */
    meta_client_geo_country_code_ends_with?: string;
    /**
     * Country code of the client that generated the event (filter: like)
     */
    meta_client_geo_country_code_like?: string;
    /**
     * Country code of the client that generated the event (filter: not_like)
     */
    meta_client_geo_country_code_not_like?: string;
    /**
     * Country code of the client that generated the event (filter: in_values) (comma-separated list)
     */
    meta_client_geo_country_code_in_values?: string;
    /**
     * Country code of the client that generated the event (filter: not_in_values) (comma-separated list)
     */
    meta_client_geo_country_code_not_in_values?: string;
    /**
     * The version of the beacon block (filter: eq)
     */
    block_version_eq?: string;
    /**
     * The version of the beacon block (filter: ne)
     */
    block_version_ne?: string;
    /**
     * The version of the beacon block (filter: contains)
     */
    block_version_contains?: string;
    /**
     * The version of the beacon block (filter: starts_with)
     */
    block_version_starts_with?: string;
    /**
     * The version of the beacon block (filter: ends_with)
     */
    block_version_ends_with?: string;
    /**
     * The version of the beacon block (filter: like)
     */
    block_version_like?: string;
    /**
     * The version of the beacon block (filter: not_like)
     */
    block_version_not_like?: string;
    /**
     * The version of the beacon block (filter: in_values) (comma-separated list)
     */
    block_version_in_values?: string;
    /**
     * The version of the beacon block (filter: not_in_values) (comma-separated list)
     */
    block_version_not_in_values?: string;
    /**
     * The total bytes of the beacon block payload (filter: eq)
     */
    block_total_bytes_eq?: number;
    /**
     * The total bytes of the beacon block payload (filter: ne)
     */
    block_total_bytes_ne?: number;
    /**
     * The total bytes of the beacon block payload (filter: lt)
     */
    block_total_bytes_lt?: number;
    /**
     * The total bytes of the beacon block payload (filter: lte)
     */
    block_total_bytes_lte?: number;
    /**
     * The total bytes of the beacon block payload (filter: gt)
     */
    block_total_bytes_gt?: number;
    /**
     * The total bytes of the beacon block payload (filter: gte)
     */
    block_total_bytes_gte?: number;
    /**
     * The total bytes of the beacon block payload (filter: between_min)
     */
    block_total_bytes_between_min?: number;
    /**
     * The total bytes of the beacon block payload (filter: between_max_value)
     */
    block_total_bytes_between_max_value?: number;
    /**
     * The total bytes of the beacon block payload (filter: in_values) (comma-separated list)
     */
    block_total_bytes_in_values?: string;
    /**
     * The total bytes of the beacon block payload (filter: not_in_values) (comma-separated list)
     */
    block_total_bytes_not_in_values?: string;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: eq)
     */
    block_total_bytes_compressed_eq?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: ne)
     */
    block_total_bytes_compressed_ne?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: lt)
     */
    block_total_bytes_compressed_lt?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: lte)
     */
    block_total_bytes_compressed_lte?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: gt)
     */
    block_total_bytes_compressed_gt?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: gte)
     */
    block_total_bytes_compressed_gte?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: between_min)
     */
    block_total_bytes_compressed_between_min?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: between_max_value)
     */
    block_total_bytes_compressed_between_max_value?: number;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: in_values) (comma-separated list)
     */
    block_total_bytes_compressed_in_values?: string;
    /**
     * The total bytes of the beacon block payload when compressed using snappy (filter: not_in_values) (comma-separated list)
     */
    block_total_bytes_compressed_not_in_values?: string;
    /**
     * The value of the execution payload in wei (filter: eq)
     */
    execution_payload_value_eq?: number;
    /**
     * The value of the execution payload in wei (filter: ne)
     */
    execution_payload_value_ne?: number;
    /**
     * The value of the execution payload in wei (filter: lt)
     */
    execution_payload_value_lt?: number;
    /**
     * The value of the execution payload in wei (filter: lte)
     */
    execution_payload_value_lte?: number;
    /**
     * The value of the execution payload in wei (filter: gt)
     */
    execution_payload_value_gt?: number;
    /**
     * The value of the execution payload in wei (filter: gte)
     */
    execution_payload_value_gte?: number;
    /**
     * The value of the execution payload in wei (filter: between_min)
     */
    execution_payload_value_between_min?: number;
    /**
     * The value of the execution payload in wei (filter: between_max_value)
     */
    execution_payload_value_between_max_value?: number;
    /**
     * The value of the execution payload in wei (filter: in_values) (comma-separated list)
     */
    execution_payload_value_in_values?: string;
    /**
     * The value of the execution payload in wei (filter: not_in_values) (comma-separated list)
     */
    execution_payload_value_not_in_values?: string;
    /**
     * The value of the consensus payload in wei (filter: eq)
     */
    consensus_payload_value_eq?: number;
    /**
     * The value of the consensus payload in wei (filter: ne)
     */
    consensus_payload_value_ne?: number;
    /**
     * The value of the consensus payload in wei (filter: lt)
     */
    consensus_payload_value_lt?: number;
    /**
     * The value of the consensus payload in wei (filter: lte)
     */
    consensus_payload_value_lte?: number;
    /**
     * The value of the consensus payload in wei (filter: gt)
     */
    consensus_payload_value_gt?: number;
    /**
     * The value of the consensus payload in wei (filter: gte)
     */
    consensus_payload_value_gte?: number;
    /**
     * The value of the consensus payload in wei (filter: between_min)
     */
    consensus_payload_value_between_min?: number;
    /**
     * The value of the consensus payload in wei (filter: between_max_value)
     */
    consensus_payload_value_between_max_value?: number;
    /**
     * The value of the consensus payload in wei (filter: in_values) (comma-separated list)
     */
    consensus_payload_value_in_values?: string;
    /**
     * The value of the consensus payload in wei (filter: not_in_values) (comma-separated list)
     */
    consensus_payload_value_not_in_values?: string;
    /**
     * The block number of the execution payload (filter: eq)
     */
    execution_payload_block_number_eq?: number;
    /**
     * The block number of the execution payload (filter: ne)
     */
    execution_payload_block_number_ne?: number;
    /**
     * The block number of the execution payload (filter: lt)
     */
    execution_payload_block_number_lt?: number;
    /**
     * The block number of the execution payload (filter: lte)
     */
    execution_payload_block_number_lte?: number;
    /**
     * The block number of the execution payload (filter: gt)
     */
    execution_payload_block_number_gt?: number;
    /**
     * The block number of the execution payload (filter: gte)
     */
    execution_payload_block_number_gte?: number;
    /**
     * The block number of the execution payload (filter: between_min)
     */
    execution_payload_block_number_between_min?: number;
    /**
     * The block number of the execution payload (filter: between_max_value)
     */
    execution_payload_block_number_between_max_value?: number;
    /**
     * The block number of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_block_number_in_values?: string;
    /**
     * The block number of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_block_number_not_in_values?: string;
    /**
     * Gas limit for execution payload (filter: eq)
     */
    execution_payload_gas_limit_eq?: number;
    /**
     * Gas limit for execution payload (filter: ne)
     */
    execution_payload_gas_limit_ne?: number;
    /**
     * Gas limit for execution payload (filter: lt)
     */
    execution_payload_gas_limit_lt?: number;
    /**
     * Gas limit for execution payload (filter: lte)
     */
    execution_payload_gas_limit_lte?: number;
    /**
     * Gas limit for execution payload (filter: gt)
     */
    execution_payload_gas_limit_gt?: number;
    /**
     * Gas limit for execution payload (filter: gte)
     */
    execution_payload_gas_limit_gte?: number;
    /**
     * Gas limit for execution payload (filter: between_min)
     */
    execution_payload_gas_limit_between_min?: number;
    /**
     * Gas limit for execution payload (filter: between_max_value)
     */
    execution_payload_gas_limit_between_max_value?: number;
    /**
     * Gas limit for execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_gas_limit_in_values?: string;
    /**
     * Gas limit for execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_gas_limit_not_in_values?: string;
    /**
     * Gas used for execution payload (filter: eq)
     */
    execution_payload_gas_used_eq?: number;
    /**
     * Gas used for execution payload (filter: ne)
     */
    execution_payload_gas_used_ne?: number;
    /**
     * Gas used for execution payload (filter: lt)
     */
    execution_payload_gas_used_lt?: number;
    /**
     * Gas used for execution payload (filter: lte)
     */
    execution_payload_gas_used_lte?: number;
    /**
     * Gas used for execution payload (filter: gt)
     */
    execution_payload_gas_used_gt?: number;
    /**
     * Gas used for execution payload (filter: gte)
     */
    execution_payload_gas_used_gte?: number;
    /**
     * Gas used for execution payload (filter: between_min)
     */
    execution_payload_gas_used_between_min?: number;
    /**
     * Gas used for execution payload (filter: between_max_value)
     */
    execution_payload_gas_used_between_max_value?: number;
    /**
     * Gas used for execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_gas_used_in_values?: string;
    /**
     * Gas used for execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_gas_used_not_in_values?: string;
    /**
     * The transaction count of the execution payload (filter: eq)
     */
    execution_payload_transactions_count_eq?: number;
    /**
     * The transaction count of the execution payload (filter: ne)
     */
    execution_payload_transactions_count_ne?: number;
    /**
     * The transaction count of the execution payload (filter: lt)
     */
    execution_payload_transactions_count_lt?: number;
    /**
     * The transaction count of the execution payload (filter: lte)
     */
    execution_payload_transactions_count_lte?: number;
    /**
     * The transaction count of the execution payload (filter: gt)
     */
    execution_payload_transactions_count_gt?: number;
    /**
     * The transaction count of the execution payload (filter: gte)
     */
    execution_payload_transactions_count_gte?: number;
    /**
     * The transaction count of the execution payload (filter: between_min)
     */
    execution_payload_transactions_count_between_min?: number;
    /**
     * The transaction count of the execution payload (filter: between_max_value)
     */
    execution_payload_transactions_count_between_max_value?: number;
    /**
     * The transaction count of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_transactions_count_in_values?: string;
    /**
     * The transaction count of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_transactions_count_not_in_values?: string;
    /**
     * The transaction total bytes of the execution payload (filter: eq)
     */
    execution_payload_transactions_total_bytes_eq?: number;
    /**
     * The transaction total bytes of the execution payload (filter: ne)
     */
    execution_payload_transactions_total_bytes_ne?: number;
    /**
     * The transaction total bytes of the execution payload (filter: lt)
     */
    execution_payload_transactions_total_bytes_lt?: number;
    /**
     * The transaction total bytes of the execution payload (filter: lte)
     */
    execution_payload_transactions_total_bytes_lte?: number;
    /**
     * The transaction total bytes of the execution payload (filter: gt)
     */
    execution_payload_transactions_total_bytes_gt?: number;
    /**
     * The transaction total bytes of the execution payload (filter: gte)
     */
    execution_payload_transactions_total_bytes_gte?: number;
    /**
     * The transaction total bytes of the execution payload (filter: between_min)
     */
    execution_payload_transactions_total_bytes_between_min?: number;
    /**
     * The transaction total bytes of the execution payload (filter: between_max_value)
     */
    execution_payload_transactions_total_bytes_between_max_value?: number;
    /**
     * The transaction total bytes of the execution payload (filter: in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_in_values?: string;
    /**
     * The transaction total bytes of the execution payload (filter: not_in_values) (comma-separated list)
     */
    execution_payload_transactions_total_bytes_not_in_values?: string;
    /**
     * The maximum number of fct_prepared_block to return. If unspecified, at most 100 items will be returned. The maximum value is 10000; values above 10000 will be coerced to 10000.
     */
    page_size?: number;
    /**
     * A page token, received from a previous `ListFctPreparedBlock` call. Provide this to retrieve the subsequent page.
     */
    page_token?: string;
    /**
     * The order of results. Format: comma-separated list of fields. Example: "foo,bar" or "foo desc,bar" for descending order on foo. If unspecified, results will be returned in the default order.
     */
    order_by?: string;
  };
  url: '/api/v1/fct_prepared_block';
};

export type FctPreparedBlockServiceListErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctPreparedBlockServiceListError =
  FctPreparedBlockServiceListErrors[keyof FctPreparedBlockServiceListErrors];

export type FctPreparedBlockServiceListResponses = {
  /**
   * OK
   */
  200: ListFctPreparedBlockResponse;
};

export type FctPreparedBlockServiceListResponse =
  FctPreparedBlockServiceListResponses[keyof FctPreparedBlockServiceListResponses];

export type FctPreparedBlockServiceGetData = {
  body?: never;
  path: {
    /**
     * The wall clock time when the slot started
     */
    slot_start_date_time: number;
  };
  query?: never;
  url: '/api/v1/fct_prepared_block/{slot_start_date_time}';
};

export type FctPreparedBlockServiceGetErrors = {
  /**
   * Default error response
   */
  default: Status;
};

export type FctPreparedBlockServiceGetError = FctPreparedBlockServiceGetErrors[keyof FctPreparedBlockServiceGetErrors];

export type FctPreparedBlockServiceGetResponses = {
  /**
   * OK
   */
  200: GetFctPreparedBlockResponse;
};

export type FctPreparedBlockServiceGetResponse =
  FctPreparedBlockServiceGetResponses[keyof FctPreparedBlockServiceGetResponses];
