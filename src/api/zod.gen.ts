// This file is auto-generated by @hey-api/openapi-ts

import * as z from 'zod/mini';

export const zFctAddressAccessChunked10000 = z.object({
  chunk_start_block_number: z.optional(z.int()),
  first_accessed_accounts: z.optional(z.int()),
  last_accessed_accounts: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctAddressAccessTotal = z.object({
  expired_accounts: z.optional(z.int()),
  expired_contracts: z.optional(z.int()),
  total_accounts: z.optional(z.int()),
  total_contract_accounts: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctAddressStorageSlotChunked10000 = z.object({
  chunk_start_block_number: z.optional(z.int()),
  first_accessed_slots: z.optional(z.int()),
  last_accessed_slots: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctAddressStorageSlotExpiredTop100ByContract = z.object({
  contract_address: z.optional(z.string()),
  expired_slots: z.optional(z.int()),
  rank: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctAddressStorageSlotTop100ByContract = z.object({
  contract_address: z.optional(z.string()),
  rank: z.optional(z.int()),
  total_storage_slots: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctAddressStorageSlotTotal = z.object({
  expired_storage_slots: z.optional(z.int()),
  total_storage_slots: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctAttestationCorrectnessByValidatorCanonical = z.object({
  attesting_validator_index: z.optional(z.int()),
  block_root: z.optional(z.union([z.string(), z.null()])),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  inclusion_distance: z.optional(z.union([z.int(), z.null()])),
  slot: z.optional(z.int()),
  slot_distance: z.optional(z.union([z.int(), z.null()])),
  slot_start_date_time: z.optional(z.int()),
  status: z.optional(z.string()),
  updated_date_time: z.optional(z.int()),
});

export const zFctAttestationCorrectnessByValidatorHead = z.object({
  attesting_validator_index: z.optional(z.int()),
  block_root: z.optional(z.union([z.string(), z.null()])),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  propagation_distance: z.optional(z.union([z.int(), z.null()])),
  slot: z.optional(z.int()),
  slot_distance: z.optional(z.union([z.int(), z.null()])),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctAttestationCorrectnessCanonical = z.object({
  block_root: z.optional(z.union([z.string(), z.null()])),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
  votes_head: z.optional(z.union([z.int(), z.null()])),
  votes_max: z.optional(z.int()),
  votes_other: z.optional(z.union([z.int(), z.null()])),
});

export const zFctAttestationCorrectnessHead = z.object({
  block_root: z.optional(z.union([z.string(), z.null()])),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
  votes_head: z.optional(z.union([z.int(), z.null()])),
  votes_max: z.optional(z.int()),
  votes_other: z.optional(z.union([z.int(), z.null()])),
});

export const zFctAttestationFirstSeenChunked50Ms = z.object({
  attestation_count: z.optional(z.int()),
  block_root: z.optional(z.string()),
  chunk_slot_start_diff: z.optional(z.int()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctBlock = z.object({
  block_root: z.optional(z.string()),
  block_total_bytes: z.optional(z.union([z.int(), z.null()])),
  block_total_bytes_compressed: z.optional(z.union([z.int(), z.null()])),
  block_version: z.optional(z.string()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  eth1_data_block_hash: z.optional(z.string()),
  eth1_data_deposit_root: z.optional(z.string()),
  execution_payload_base_fee_per_gas: z.optional(z.union([z.string(), z.null()])),
  execution_payload_blob_gas_used: z.optional(z.union([z.int(), z.null()])),
  execution_payload_block_hash: z.optional(z.string()),
  execution_payload_block_number: z.optional(z.int()),
  execution_payload_excess_blob_gas: z.optional(z.union([z.int(), z.null()])),
  execution_payload_fee_recipient: z.optional(z.string()),
  execution_payload_gas_limit: z.optional(z.union([z.int(), z.null()])),
  execution_payload_gas_used: z.optional(z.union([z.int(), z.null()])),
  execution_payload_parent_hash: z.optional(z.string()),
  execution_payload_state_root: z.optional(z.string()),
  execution_payload_transactions_count: z.optional(z.union([z.int(), z.null()])),
  execution_payload_transactions_total_bytes: z.optional(z.union([z.int(), z.null()])),
  execution_payload_transactions_total_bytes_compressed: z.optional(z.union([z.int(), z.null()])),
  parent_root: z.optional(z.string()),
  proposer_index: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  state_root: z.optional(z.string()),
  status: z.optional(z.string()),
  updated_date_time: z.optional(z.int()),
});

export const zFctBlockBlobCount = z.object({
  blob_count: z.optional(z.int()),
  block_root: z.optional(z.string()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  status: z.optional(z.string()),
  updated_date_time: z.optional(z.int()),
});

export const zFctBlockBlobCountHead = z.object({
  blob_count: z.optional(z.int()),
  block_root: z.optional(z.string()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctBlockBlobFirstSeenByNode = z.object({
  blob_index: z.optional(z.int()),
  block_root: z.optional(z.string()),
  classification: z.optional(z.string()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  meta_client_geo_autonomous_system_number: z.optional(z.union([z.int(), z.null()])),
  meta_client_geo_autonomous_system_organization: z.optional(z.union([z.string(), z.null()])),
  meta_client_geo_city: z.optional(z.string()),
  meta_client_geo_continent_code: z.optional(z.string()),
  meta_client_geo_country: z.optional(z.string()),
  meta_client_geo_country_code: z.optional(z.string()),
  meta_client_geo_latitude: z.optional(z.union([z.number(), z.null()])),
  meta_client_geo_longitude: z.optional(z.union([z.number(), z.null()])),
  meta_client_implementation: z.optional(z.string()),
  meta_client_name: z.optional(z.string()),
  meta_client_version: z.optional(z.string()),
  meta_consensus_implementation: z.optional(z.string()),
  meta_consensus_version: z.optional(z.string()),
  node_id: z.optional(z.string()),
  seen_slot_start_diff: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  source: z.optional(z.string()),
  updated_date_time: z.optional(z.int()),
  username: z.optional(z.string()),
});

export const zFctBlockFirstSeenByNode = z.object({
  block_root: z.optional(z.string()),
  classification: z.optional(z.string()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  meta_client_geo_autonomous_system_number: z.optional(z.union([z.int(), z.null()])),
  meta_client_geo_autonomous_system_organization: z.optional(z.union([z.string(), z.null()])),
  meta_client_geo_city: z.optional(z.string()),
  meta_client_geo_continent_code: z.optional(z.string()),
  meta_client_geo_country: z.optional(z.string()),
  meta_client_geo_country_code: z.optional(z.string()),
  meta_client_geo_latitude: z.optional(z.union([z.number(), z.null()])),
  meta_client_geo_longitude: z.optional(z.union([z.number(), z.null()])),
  meta_client_implementation: z.optional(z.string()),
  meta_client_name: z.optional(z.string()),
  meta_client_version: z.optional(z.string()),
  meta_consensus_implementation: z.optional(z.string()),
  meta_consensus_version: z.optional(z.string()),
  node_id: z.optional(z.string()),
  seen_slot_start_diff: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  source: z.optional(z.string()),
  updated_date_time: z.optional(z.int()),
  username: z.optional(z.string()),
});

export const zFctBlockHead = z.object({
  block_root: z.optional(z.string()),
  block_total_bytes: z.optional(z.union([z.int(), z.null()])),
  block_total_bytes_compressed: z.optional(z.union([z.int(), z.null()])),
  block_version: z.optional(z.string()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  eth1_data_block_hash: z.optional(z.string()),
  eth1_data_deposit_root: z.optional(z.string()),
  execution_payload_base_fee_per_gas: z.optional(z.union([z.string(), z.null()])),
  execution_payload_blob_gas_used: z.optional(z.union([z.int(), z.null()])),
  execution_payload_block_hash: z.optional(z.string()),
  execution_payload_block_number: z.optional(z.int()),
  execution_payload_excess_blob_gas: z.optional(z.union([z.int(), z.null()])),
  execution_payload_fee_recipient: z.optional(z.string()),
  execution_payload_gas_limit: z.optional(z.union([z.int(), z.null()])),
  execution_payload_gas_used: z.optional(z.union([z.int(), z.null()])),
  execution_payload_parent_hash: z.optional(z.string()),
  execution_payload_state_root: z.optional(z.string()),
  execution_payload_transactions_count: z.optional(z.union([z.int(), z.null()])),
  execution_payload_transactions_total_bytes: z.optional(z.union([z.int(), z.null()])),
  execution_payload_transactions_total_bytes_compressed: z.optional(z.union([z.int(), z.null()])),
  parent_root: z.optional(z.string()),
  proposer_index: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  state_root: z.optional(z.string()),
  updated_date_time: z.optional(z.int()),
});

export const zFctBlockMev = z.object({
  block_hash: z.optional(z.string()),
  block_number: z.optional(z.int()),
  block_root: z.optional(z.string()),
  builder_pubkey: z.optional(z.string()),
  earliest_bid_date_time: z.optional(z.union([z.coerce.bigint(), z.null()])),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  gas_limit: z.optional(z.int()),
  gas_used: z.optional(z.int()),
  parent_hash: z.optional(z.string()),
  proposer_fee_recipient: z.optional(z.string()),
  proposer_pubkey: z.optional(z.string()),
  relay_names: z.optional(z.array(z.string())),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  status: z.optional(z.string()),
  transaction_count: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
  value: z.optional(z.union([z.string(), z.null()])),
});

export const zFctBlockMevHead = z.object({
  block_hash: z.optional(z.string()),
  block_number: z.optional(z.int()),
  block_root: z.optional(z.string()),
  builder_pubkey: z.optional(z.string()),
  earliest_bid_date_time: z.optional(z.union([z.coerce.bigint(), z.null()])),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  gas_limit: z.optional(z.int()),
  gas_used: z.optional(z.int()),
  parent_hash: z.optional(z.string()),
  proposer_fee_recipient: z.optional(z.string()),
  proposer_pubkey: z.optional(z.string()),
  relay_names: z.optional(z.array(z.string())),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  transaction_count: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
  value: z.optional(z.union([z.string(), z.null()])),
});

export const zFctBlockProposer = z.object({
  block_root: z.optional(z.union([z.string(), z.null()])),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  proposer_pubkey: z.optional(z.string()),
  proposer_validator_index: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  status: z.optional(z.string()),
  updated_date_time: z.optional(z.int()),
});

export const zFctBlockProposerEntity = z.object({
  entity: z.optional(z.union([z.string(), z.null()])),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctBlockProposerHead = z.object({
  block_root: z.optional(z.union([z.string(), z.null()])),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  proposer_pubkey: z.optional(z.string()),
  proposer_validator_index: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctMevBidCountByBuilder = z.object({
  bid_total: z.optional(z.int()),
  builder_pubkey: z.optional(z.string()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctMevBidCountByRelay = z.object({
  bid_total: z.optional(z.int()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  relay_name: z.optional(z.string()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

export const zFctMevBidHighestValueByBuilderChunked50Ms = z.object({
  block_hash: z.optional(z.string()),
  builder_pubkey: z.optional(z.string()),
  chunk_slot_start_diff: z.optional(z.int()),
  earliest_bid_date_time: z.optional(z.coerce.bigint()),
  epoch: z.optional(z.int()),
  epoch_start_date_time: z.optional(z.int()),
  relay_names: z.optional(z.array(z.string())),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
  value: z.optional(z.string()),
});

export const zFctNodeActiveLast24h = z.object({
  classification: z.optional(z.string()),
  last_seen_date_time: z.optional(z.int()),
  meta_client_geo_autonomous_system_number: z.optional(z.union([z.int(), z.null()])),
  meta_client_geo_autonomous_system_organization: z.optional(z.union([z.string(), z.null()])),
  meta_client_geo_city: z.optional(z.string()),
  meta_client_geo_continent_code: z.optional(z.string()),
  meta_client_geo_country: z.optional(z.string()),
  meta_client_geo_country_code: z.optional(z.string()),
  meta_client_geo_latitude: z.optional(z.union([z.number(), z.null()])),
  meta_client_geo_longitude: z.optional(z.union([z.number(), z.null()])),
  meta_client_implementation: z.optional(z.string()),
  meta_client_name: z.optional(z.string()),
  meta_client_version: z.optional(z.string()),
  meta_consensus_implementation: z.optional(z.string()),
  meta_consensus_version: z.optional(z.string()),
  node_id: z.optional(z.string()),
  updated_date_time: z.optional(z.int()),
  username: z.optional(z.string()),
});

export const zFctPreparedBlock = z.object({
  block_total_bytes: z.optional(z.union([z.int(), z.null()])),
  block_total_bytes_compressed: z.optional(z.union([z.int(), z.null()])),
  block_version: z.optional(z.string()),
  consensus_payload_value: z.optional(z.union([z.int(), z.null()])),
  event_date_time: z.optional(z.int()),
  execution_payload_block_number: z.optional(z.int()),
  execution_payload_gas_limit: z.optional(z.union([z.int(), z.null()])),
  execution_payload_gas_used: z.optional(z.union([z.int(), z.null()])),
  execution_payload_transactions_count: z.optional(z.union([z.int(), z.null()])),
  execution_payload_transactions_total_bytes: z.optional(z.union([z.int(), z.null()])),
  execution_payload_value: z.optional(z.union([z.int(), z.null()])),
  meta_client_geo_city: z.optional(z.string()),
  meta_client_geo_country: z.optional(z.string()),
  meta_client_geo_country_code: z.optional(z.string()),
  meta_client_implementation: z.optional(z.string()),
  meta_client_name: z.optional(z.string()),
  meta_client_version: z.optional(z.string()),
  meta_consensus_implementation: z.optional(z.string()),
  meta_consensus_version: z.optional(z.string()),
  slot: z.optional(z.int()),
  slot_start_date_time: z.optional(z.int()),
  updated_date_time: z.optional(z.int()),
});

/**
 * Response for getting a single fct_address_access_chunked_10000 record
 */
export const zGetFctAddressAccessChunked10000Response = z.object({
  item: z.optional(zFctAddressAccessChunked10000),
});

/**
 * Response for getting a single fct_address_access_total record
 */
export const zGetFctAddressAccessTotalResponse = z.object({
  item: z.optional(zFctAddressAccessTotal),
});

/**
 * Response for getting a single fct_address_storage_slot_chunked_10000 record
 */
export const zGetFctAddressStorageSlotChunked10000Response = z.object({
  item: z.optional(zFctAddressStorageSlotChunked10000),
});

/**
 * Response for getting a single fct_address_storage_slot_expired_top_100_by_contract record
 */
export const zGetFctAddressStorageSlotExpiredTop100ByContractResponse = z.object({
  item: z.optional(zFctAddressStorageSlotExpiredTop100ByContract),
});

/**
 * Response for getting a single fct_address_storage_slot_top_100_by_contract record
 */
export const zGetFctAddressStorageSlotTop100ByContractResponse = z.object({
  item: z.optional(zFctAddressStorageSlotTop100ByContract),
});

/**
 * Response for getting a single fct_address_storage_slot_total record
 */
export const zGetFctAddressStorageSlotTotalResponse = z.object({
  item: z.optional(zFctAddressStorageSlotTotal),
});

/**
 * Response for getting a single fct_attestation_correctness_by_validator_canonical record
 */
export const zGetFctAttestationCorrectnessByValidatorCanonicalResponse = z.object({
  item: z.optional(zFctAttestationCorrectnessByValidatorCanonical),
});

/**
 * Response for getting a single fct_attestation_correctness_by_validator_head record
 */
export const zGetFctAttestationCorrectnessByValidatorHeadResponse = z.object({
  item: z.optional(zFctAttestationCorrectnessByValidatorHead),
});

/**
 * Response for getting a single fct_attestation_correctness_canonical record
 */
export const zGetFctAttestationCorrectnessCanonicalResponse = z.object({
  item: z.optional(zFctAttestationCorrectnessCanonical),
});

/**
 * Response for getting a single fct_attestation_correctness_head record
 */
export const zGetFctAttestationCorrectnessHeadResponse = z.object({
  item: z.optional(zFctAttestationCorrectnessHead),
});

/**
 * Response for getting a single fct_attestation_first_seen_chunked_50ms record
 */
export const zGetFctAttestationFirstSeenChunked50MsResponse = z.object({
  item: z.optional(zFctAttestationFirstSeenChunked50Ms),
});

/**
 * Response for getting a single fct_block_blob_count_head record
 */
export const zGetFctBlockBlobCountHeadResponse = z.object({
  item: z.optional(zFctBlockBlobCountHead),
});

/**
 * Response for getting a single fct_block_blob_count record
 */
export const zGetFctBlockBlobCountResponse = z.object({
  item: z.optional(zFctBlockBlobCount),
});

/**
 * Response for getting a single fct_block_blob_first_seen_by_node record
 */
export const zGetFctBlockBlobFirstSeenByNodeResponse = z.object({
  item: z.optional(zFctBlockBlobFirstSeenByNode),
});

/**
 * Response for getting a single fct_block_first_seen_by_node record
 */
export const zGetFctBlockFirstSeenByNodeResponse = z.object({
  item: z.optional(zFctBlockFirstSeenByNode),
});

/**
 * Response for getting a single fct_block_head record
 */
export const zGetFctBlockHeadResponse = z.object({
  item: z.optional(zFctBlockHead),
});

/**
 * Response for getting a single fct_block_mev_head record
 */
export const zGetFctBlockMevHeadResponse = z.object({
  item: z.optional(zFctBlockMevHead),
});

/**
 * Response for getting a single fct_block_mev record
 */
export const zGetFctBlockMevResponse = z.object({
  item: z.optional(zFctBlockMev),
});

/**
 * Response for getting a single fct_block_proposer_entity record
 */
export const zGetFctBlockProposerEntityResponse = z.object({
  item: z.optional(zFctBlockProposerEntity),
});

/**
 * Response for getting a single fct_block_proposer_head record
 */
export const zGetFctBlockProposerHeadResponse = z.object({
  item: z.optional(zFctBlockProposerHead),
});

/**
 * Response for getting a single fct_block_proposer record
 */
export const zGetFctBlockProposerResponse = z.object({
  item: z.optional(zFctBlockProposer),
});

/**
 * Response for getting a single fct_block record
 */
export const zGetFctBlockResponse = z.object({
  item: z.optional(zFctBlock),
});

/**
 * Response for getting a single fct_mev_bid_count_by_builder record
 */
export const zGetFctMevBidCountByBuilderResponse = z.object({
  item: z.optional(zFctMevBidCountByBuilder),
});

/**
 * Response for getting a single fct_mev_bid_count_by_relay record
 */
export const zGetFctMevBidCountByRelayResponse = z.object({
  item: z.optional(zFctMevBidCountByRelay),
});

/**
 * Response for getting a single fct_mev_bid_highest_value_by_builder_chunked_50ms record
 */
export const zGetFctMevBidHighestValueByBuilderChunked50MsResponse = z.object({
  item: z.optional(zFctMevBidHighestValueByBuilderChunked50Ms),
});

/**
 * Response for getting a single fct_node_active_last_24h record
 */
export const zGetFctNodeActiveLast24hResponse = z.object({
  item: z.optional(zFctNodeActiveLast24h),
});

/**
 * Response for getting a single fct_prepared_block record
 */
export const zGetFctPreparedBlockResponse = z.object({
  item: z.optional(zFctPreparedBlock),
});

/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 */
export const zGoogleProtobufAny = z.object({
  '@type': z.optional(z.string()),
});

/**
 * Response for listing fct_address_access_chunked_10000 records
 */
export const zListFctAddressAccessChunked10000Response = z.object({
  fct_address_access_chunked_10000: z.optional(z.array(zFctAddressAccessChunked10000)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_address_access_total records
 */
export const zListFctAddressAccessTotalResponse = z.object({
  fct_address_access_total: z.optional(z.array(zFctAddressAccessTotal)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_address_storage_slot_chunked_10000 records
 */
export const zListFctAddressStorageSlotChunked10000Response = z.object({
  fct_address_storage_slot_chunked_10000: z.optional(z.array(zFctAddressStorageSlotChunked10000)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_address_storage_slot_expired_top_100_by_contract records
 */
export const zListFctAddressStorageSlotExpiredTop100ByContractResponse = z.object({
  fct_address_storage_slot_expired_top_100_by_contract: z.optional(
    z.array(zFctAddressStorageSlotExpiredTop100ByContract)
  ),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_address_storage_slot_top_100_by_contract records
 */
export const zListFctAddressStorageSlotTop100ByContractResponse = z.object({
  fct_address_storage_slot_top_100_by_contract: z.optional(z.array(zFctAddressStorageSlotTop100ByContract)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_address_storage_slot_total records
 */
export const zListFctAddressStorageSlotTotalResponse = z.object({
  fct_address_storage_slot_total: z.optional(z.array(zFctAddressStorageSlotTotal)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_attestation_correctness_by_validator_canonical records
 */
export const zListFctAttestationCorrectnessByValidatorCanonicalResponse = z.object({
  fct_attestation_correctness_by_validator_canonical: z.optional(
    z.array(zFctAttestationCorrectnessByValidatorCanonical)
  ),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_attestation_correctness_by_validator_head records
 */
export const zListFctAttestationCorrectnessByValidatorHeadResponse = z.object({
  fct_attestation_correctness_by_validator_head: z.optional(z.array(zFctAttestationCorrectnessByValidatorHead)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_attestation_correctness_canonical records
 */
export const zListFctAttestationCorrectnessCanonicalResponse = z.object({
  fct_attestation_correctness_canonical: z.optional(z.array(zFctAttestationCorrectnessCanonical)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_attestation_correctness_head records
 */
export const zListFctAttestationCorrectnessHeadResponse = z.object({
  fct_attestation_correctness_head: z.optional(z.array(zFctAttestationCorrectnessHead)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_attestation_first_seen_chunked_50ms records
 */
export const zListFctAttestationFirstSeenChunked50MsResponse = z.object({
  fct_attestation_first_seen_chunked_50ms: z.optional(z.array(zFctAttestationFirstSeenChunked50Ms)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_blob_count_head records
 */
export const zListFctBlockBlobCountHeadResponse = z.object({
  fct_block_blob_count_head: z.optional(z.array(zFctBlockBlobCountHead)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_blob_count records
 */
export const zListFctBlockBlobCountResponse = z.object({
  fct_block_blob_count: z.optional(z.array(zFctBlockBlobCount)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_blob_first_seen_by_node records
 */
export const zListFctBlockBlobFirstSeenByNodeResponse = z.object({
  fct_block_blob_first_seen_by_node: z.optional(z.array(zFctBlockBlobFirstSeenByNode)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_first_seen_by_node records
 */
export const zListFctBlockFirstSeenByNodeResponse = z.object({
  fct_block_first_seen_by_node: z.optional(z.array(zFctBlockFirstSeenByNode)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_head records
 */
export const zListFctBlockHeadResponse = z.object({
  fct_block_head: z.optional(z.array(zFctBlockHead)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_mev_head records
 */
export const zListFctBlockMevHeadResponse = z.object({
  fct_block_mev_head: z.optional(z.array(zFctBlockMevHead)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_mev records
 */
export const zListFctBlockMevResponse = z.object({
  fct_block_mev: z.optional(z.array(zFctBlockMev)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_proposer_entity records
 */
export const zListFctBlockProposerEntityResponse = z.object({
  fct_block_proposer_entity: z.optional(z.array(zFctBlockProposerEntity)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_proposer_head records
 */
export const zListFctBlockProposerHeadResponse = z.object({
  fct_block_proposer_head: z.optional(z.array(zFctBlockProposerHead)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block_proposer records
 */
export const zListFctBlockProposerResponse = z.object({
  fct_block_proposer: z.optional(z.array(zFctBlockProposer)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_block records
 */
export const zListFctBlockResponse = z.object({
  fct_block: z.optional(z.array(zFctBlock)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_mev_bid_count_by_builder records
 */
export const zListFctMevBidCountByBuilderResponse = z.object({
  fct_mev_bid_count_by_builder: z.optional(z.array(zFctMevBidCountByBuilder)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_mev_bid_count_by_relay records
 */
export const zListFctMevBidCountByRelayResponse = z.object({
  fct_mev_bid_count_by_relay: z.optional(z.array(zFctMevBidCountByRelay)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_mev_bid_highest_value_by_builder_chunked_50ms records
 */
export const zListFctMevBidHighestValueByBuilderChunked50MsResponse = z.object({
  fct_mev_bid_highest_value_by_builder_chunked_50ms: z.optional(z.array(zFctMevBidHighestValueByBuilderChunked50Ms)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_node_active_last_24h records
 */
export const zListFctNodeActiveLast24hResponse = z.object({
  fct_node_active_last_24h: z.optional(z.array(zFctNodeActiveLast24h)),
  next_page_token: z.optional(z.string()),
});

/**
 * Response for listing fct_prepared_block records
 */
export const zListFctPreparedBlockResponse = z.object({
  fct_prepared_block: z.optional(z.array(zFctPreparedBlock)),
  next_page_token: z.optional(z.string()),
});

/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 */
export const zStatus = z.object({
  code: z.optional(z.int()),
  details: z.optional(z.array(zGoogleProtobufAny)),
  message: z.optional(z.string()),
});

export const zFctAddressAccessChunked10000ServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      chunk_start_block_number_eq: z.optional(z.int()),
      chunk_start_block_number_ne: z.optional(z.int()),
      chunk_start_block_number_lt: z.optional(z.int()),
      chunk_start_block_number_lte: z.optional(z.int()),
      chunk_start_block_number_gt: z.optional(z.int()),
      chunk_start_block_number_gte: z.optional(z.int()),
      chunk_start_block_number_between_min: z.optional(z.int()),
      chunk_start_block_number_between_max_value: z.optional(z.int()),
      chunk_start_block_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      chunk_start_block_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      first_accessed_accounts_eq: z.optional(z.int()),
      first_accessed_accounts_ne: z.optional(z.int()),
      first_accessed_accounts_lt: z.optional(z.int()),
      first_accessed_accounts_lte: z.optional(z.int()),
      first_accessed_accounts_gt: z.optional(z.int()),
      first_accessed_accounts_gte: z.optional(z.int()),
      first_accessed_accounts_between_min: z.optional(z.int()),
      first_accessed_accounts_between_max_value: z.optional(z.int()),
      first_accessed_accounts_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      first_accessed_accounts_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      last_accessed_accounts_eq: z.optional(z.int()),
      last_accessed_accounts_ne: z.optional(z.int()),
      last_accessed_accounts_lt: z.optional(z.int()),
      last_accessed_accounts_lte: z.optional(z.int()),
      last_accessed_accounts_gt: z.optional(z.int()),
      last_accessed_accounts_gte: z.optional(z.int()),
      last_accessed_accounts_between_min: z.optional(z.int()),
      last_accessed_accounts_between_max_value: z.optional(z.int()),
      last_accessed_accounts_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      last_accessed_accounts_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAddressAccessChunked10000ServiceListResponse = zListFctAddressAccessChunked10000Response;

export const zFctAddressAccessChunked10000ServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    chunk_start_block_number: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAddressAccessChunked10000ServiceGetResponse = zGetFctAddressAccessChunked10000Response;

export const zFctAddressAccessTotalServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      total_accounts_eq: z.optional(z.int()),
      total_accounts_ne: z.optional(z.int()),
      total_accounts_lt: z.optional(z.int()),
      total_accounts_lte: z.optional(z.int()),
      total_accounts_gt: z.optional(z.int()),
      total_accounts_gte: z.optional(z.int()),
      total_accounts_between_min: z.optional(z.int()),
      total_accounts_between_max_value: z.optional(z.int()),
      total_accounts_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      total_accounts_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      expired_accounts_eq: z.optional(z.int()),
      expired_accounts_ne: z.optional(z.int()),
      expired_accounts_lt: z.optional(z.int()),
      expired_accounts_lte: z.optional(z.int()),
      expired_accounts_gt: z.optional(z.int()),
      expired_accounts_gte: z.optional(z.int()),
      expired_accounts_between_min: z.optional(z.int()),
      expired_accounts_between_max_value: z.optional(z.int()),
      expired_accounts_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      expired_accounts_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      total_contract_accounts_eq: z.optional(z.int()),
      total_contract_accounts_ne: z.optional(z.int()),
      total_contract_accounts_lt: z.optional(z.int()),
      total_contract_accounts_lte: z.optional(z.int()),
      total_contract_accounts_gt: z.optional(z.int()),
      total_contract_accounts_gte: z.optional(z.int()),
      total_contract_accounts_between_min: z.optional(z.int()),
      total_contract_accounts_between_max_value: z.optional(z.int()),
      total_contract_accounts_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      total_contract_accounts_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      expired_contracts_eq: z.optional(z.int()),
      expired_contracts_ne: z.optional(z.int()),
      expired_contracts_lt: z.optional(z.int()),
      expired_contracts_lte: z.optional(z.int()),
      expired_contracts_gt: z.optional(z.int()),
      expired_contracts_gte: z.optional(z.int()),
      expired_contracts_between_min: z.optional(z.int()),
      expired_contracts_between_max_value: z.optional(z.int()),
      expired_contracts_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      expired_contracts_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAddressAccessTotalServiceListResponse = zListFctAddressAccessTotalResponse;

export const zFctAddressAccessTotalServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    updated_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAddressAccessTotalServiceGetResponse = zGetFctAddressAccessTotalResponse;

export const zFctAddressStorageSlotChunked10000ServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      chunk_start_block_number_eq: z.optional(z.int()),
      chunk_start_block_number_ne: z.optional(z.int()),
      chunk_start_block_number_lt: z.optional(z.int()),
      chunk_start_block_number_lte: z.optional(z.int()),
      chunk_start_block_number_gt: z.optional(z.int()),
      chunk_start_block_number_gte: z.optional(z.int()),
      chunk_start_block_number_between_min: z.optional(z.int()),
      chunk_start_block_number_between_max_value: z.optional(z.int()),
      chunk_start_block_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      chunk_start_block_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      first_accessed_slots_eq: z.optional(z.int()),
      first_accessed_slots_ne: z.optional(z.int()),
      first_accessed_slots_lt: z.optional(z.int()),
      first_accessed_slots_lte: z.optional(z.int()),
      first_accessed_slots_gt: z.optional(z.int()),
      first_accessed_slots_gte: z.optional(z.int()),
      first_accessed_slots_between_min: z.optional(z.int()),
      first_accessed_slots_between_max_value: z.optional(z.int()),
      first_accessed_slots_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      first_accessed_slots_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      last_accessed_slots_eq: z.optional(z.int()),
      last_accessed_slots_ne: z.optional(z.int()),
      last_accessed_slots_lt: z.optional(z.int()),
      last_accessed_slots_lte: z.optional(z.int()),
      last_accessed_slots_gt: z.optional(z.int()),
      last_accessed_slots_gte: z.optional(z.int()),
      last_accessed_slots_between_min: z.optional(z.int()),
      last_accessed_slots_between_max_value: z.optional(z.int()),
      last_accessed_slots_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      last_accessed_slots_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAddressStorageSlotChunked10000ServiceListResponse = zListFctAddressStorageSlotChunked10000Response;

export const zFctAddressStorageSlotChunked10000ServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    chunk_start_block_number: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAddressStorageSlotChunked10000ServiceGetResponse = zGetFctAddressStorageSlotChunked10000Response;

export const zFctAddressStorageSlotExpiredTop100ByContractServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      rank_eq: z.optional(z.int()),
      rank_ne: z.optional(z.int()),
      rank_lt: z.optional(z.int()),
      rank_lte: z.optional(z.int()),
      rank_gt: z.optional(z.int()),
      rank_gte: z.optional(z.int()),
      rank_between_min: z.optional(z.int()),
      rank_between_max_value: z.optional(z.int()),
      rank_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      rank_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      contract_address_eq: z.optional(z.string()),
      contract_address_ne: z.optional(z.string()),
      contract_address_contains: z.optional(z.string()),
      contract_address_starts_with: z.optional(z.string()),
      contract_address_ends_with: z.optional(z.string()),
      contract_address_like: z.optional(z.string()),
      contract_address_not_like: z.optional(z.string()),
      contract_address_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      contract_address_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      expired_slots_eq: z.optional(z.int()),
      expired_slots_ne: z.optional(z.int()),
      expired_slots_lt: z.optional(z.int()),
      expired_slots_lte: z.optional(z.int()),
      expired_slots_gt: z.optional(z.int()),
      expired_slots_gte: z.optional(z.int()),
      expired_slots_between_min: z.optional(z.int()),
      expired_slots_between_max_value: z.optional(z.int()),
      expired_slots_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      expired_slots_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAddressStorageSlotExpiredTop100ByContractServiceListResponse =
  zListFctAddressStorageSlotExpiredTop100ByContractResponse;

export const zFctAddressStorageSlotExpiredTop100ByContractServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    rank: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAddressStorageSlotExpiredTop100ByContractServiceGetResponse =
  zGetFctAddressStorageSlotExpiredTop100ByContractResponse;

export const zFctAddressStorageSlotTop100ByContractServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      rank_eq: z.optional(z.int()),
      rank_ne: z.optional(z.int()),
      rank_lt: z.optional(z.int()),
      rank_lte: z.optional(z.int()),
      rank_gt: z.optional(z.int()),
      rank_gte: z.optional(z.int()),
      rank_between_min: z.optional(z.int()),
      rank_between_max_value: z.optional(z.int()),
      rank_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      rank_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      contract_address_eq: z.optional(z.string()),
      contract_address_ne: z.optional(z.string()),
      contract_address_contains: z.optional(z.string()),
      contract_address_starts_with: z.optional(z.string()),
      contract_address_ends_with: z.optional(z.string()),
      contract_address_like: z.optional(z.string()),
      contract_address_not_like: z.optional(z.string()),
      contract_address_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      contract_address_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      total_storage_slots_eq: z.optional(z.int()),
      total_storage_slots_ne: z.optional(z.int()),
      total_storage_slots_lt: z.optional(z.int()),
      total_storage_slots_lte: z.optional(z.int()),
      total_storage_slots_gt: z.optional(z.int()),
      total_storage_slots_gte: z.optional(z.int()),
      total_storage_slots_between_min: z.optional(z.int()),
      total_storage_slots_between_max_value: z.optional(z.int()),
      total_storage_slots_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      total_storage_slots_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAddressStorageSlotTop100ByContractServiceListResponse =
  zListFctAddressStorageSlotTop100ByContractResponse;

export const zFctAddressStorageSlotTop100ByContractServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    rank: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAddressStorageSlotTop100ByContractServiceGetResponse =
  zGetFctAddressStorageSlotTop100ByContractResponse;

export const zFctAddressStorageSlotTotalServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      total_storage_slots_eq: z.optional(z.int()),
      total_storage_slots_ne: z.optional(z.int()),
      total_storage_slots_lt: z.optional(z.int()),
      total_storage_slots_lte: z.optional(z.int()),
      total_storage_slots_gt: z.optional(z.int()),
      total_storage_slots_gte: z.optional(z.int()),
      total_storage_slots_between_min: z.optional(z.int()),
      total_storage_slots_between_max_value: z.optional(z.int()),
      total_storage_slots_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      total_storage_slots_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      expired_storage_slots_eq: z.optional(z.int()),
      expired_storage_slots_ne: z.optional(z.int()),
      expired_storage_slots_lt: z.optional(z.int()),
      expired_storage_slots_lte: z.optional(z.int()),
      expired_storage_slots_gt: z.optional(z.int()),
      expired_storage_slots_gte: z.optional(z.int()),
      expired_storage_slots_between_min: z.optional(z.int()),
      expired_storage_slots_between_max_value: z.optional(z.int()),
      expired_storage_slots_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      expired_storage_slots_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAddressStorageSlotTotalServiceListResponse = zListFctAddressStorageSlotTotalResponse;

export const zFctAddressStorageSlotTotalServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    updated_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAddressStorageSlotTotalServiceGetResponse = zGetFctAddressStorageSlotTotalResponse;

export const zFctAttestationCorrectnessByValidatorCanonicalServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      attesting_validator_index_eq: z.optional(z.int()),
      attesting_validator_index_ne: z.optional(z.int()),
      attesting_validator_index_lt: z.optional(z.int()),
      attesting_validator_index_lte: z.optional(z.int()),
      attesting_validator_index_gt: z.optional(z.int()),
      attesting_validator_index_gte: z.optional(z.int()),
      attesting_validator_index_between_min: z.optional(z.int()),
      attesting_validator_index_between_max_value: z.optional(z.int()),
      attesting_validator_index_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      attesting_validator_index_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      slot_distance_eq: z.optional(z.int()),
      slot_distance_ne: z.optional(z.int()),
      slot_distance_lt: z.optional(z.int()),
      slot_distance_lte: z.optional(z.int()),
      slot_distance_gt: z.optional(z.int()),
      slot_distance_gte: z.optional(z.int()),
      slot_distance_between_min: z.optional(z.int()),
      slot_distance_between_max_value: z.optional(z.int()),
      slot_distance_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_distance_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      inclusion_distance_eq: z.optional(z.int()),
      inclusion_distance_ne: z.optional(z.int()),
      inclusion_distance_lt: z.optional(z.int()),
      inclusion_distance_lte: z.optional(z.int()),
      inclusion_distance_gt: z.optional(z.int()),
      inclusion_distance_gte: z.optional(z.int()),
      inclusion_distance_between_min: z.optional(z.int()),
      inclusion_distance_between_max_value: z.optional(z.int()),
      inclusion_distance_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      inclusion_distance_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      status_eq: z.optional(z.string()),
      status_ne: z.optional(z.string()),
      status_contains: z.optional(z.string()),
      status_starts_with: z.optional(z.string()),
      status_ends_with: z.optional(z.string()),
      status_like: z.optional(z.string()),
      status_not_like: z.optional(z.string()),
      status_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      status_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAttestationCorrectnessByValidatorCanonicalServiceListResponse =
  zListFctAttestationCorrectnessByValidatorCanonicalResponse;

export const zFctAttestationCorrectnessByValidatorCanonicalServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAttestationCorrectnessByValidatorCanonicalServiceGetResponse =
  zGetFctAttestationCorrectnessByValidatorCanonicalResponse;

export const zFctAttestationCorrectnessByValidatorHeadServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      attesting_validator_index_eq: z.optional(z.int()),
      attesting_validator_index_ne: z.optional(z.int()),
      attesting_validator_index_lt: z.optional(z.int()),
      attesting_validator_index_lte: z.optional(z.int()),
      attesting_validator_index_gt: z.optional(z.int()),
      attesting_validator_index_gte: z.optional(z.int()),
      attesting_validator_index_between_min: z.optional(z.int()),
      attesting_validator_index_between_max_value: z.optional(z.int()),
      attesting_validator_index_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      attesting_validator_index_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      slot_distance_eq: z.optional(z.int()),
      slot_distance_ne: z.optional(z.int()),
      slot_distance_lt: z.optional(z.int()),
      slot_distance_lte: z.optional(z.int()),
      slot_distance_gt: z.optional(z.int()),
      slot_distance_gte: z.optional(z.int()),
      slot_distance_between_min: z.optional(z.int()),
      slot_distance_between_max_value: z.optional(z.int()),
      slot_distance_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_distance_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      propagation_distance_eq: z.optional(z.int()),
      propagation_distance_ne: z.optional(z.int()),
      propagation_distance_lt: z.optional(z.int()),
      propagation_distance_lte: z.optional(z.int()),
      propagation_distance_gt: z.optional(z.int()),
      propagation_distance_gte: z.optional(z.int()),
      propagation_distance_between_min: z.optional(z.int()),
      propagation_distance_between_max_value: z.optional(z.int()),
      propagation_distance_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      propagation_distance_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAttestationCorrectnessByValidatorHeadServiceListResponse =
  zListFctAttestationCorrectnessByValidatorHeadResponse;

export const zFctAttestationCorrectnessByValidatorHeadServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAttestationCorrectnessByValidatorHeadServiceGetResponse =
  zGetFctAttestationCorrectnessByValidatorHeadResponse;

export const zFctAttestationCorrectnessCanonicalServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      votes_max_eq: z.optional(z.int()),
      votes_max_ne: z.optional(z.int()),
      votes_max_lt: z.optional(z.int()),
      votes_max_lte: z.optional(z.int()),
      votes_max_gt: z.optional(z.int()),
      votes_max_gte: z.optional(z.int()),
      votes_max_between_min: z.optional(z.int()),
      votes_max_between_max_value: z.optional(z.int()),
      votes_max_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_max_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_head_eq: z.optional(z.int()),
      votes_head_ne: z.optional(z.int()),
      votes_head_lt: z.optional(z.int()),
      votes_head_lte: z.optional(z.int()),
      votes_head_gt: z.optional(z.int()),
      votes_head_gte: z.optional(z.int()),
      votes_head_between_min: z.optional(z.int()),
      votes_head_between_max_value: z.optional(z.int()),
      votes_head_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_head_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_other_eq: z.optional(z.int()),
      votes_other_ne: z.optional(z.int()),
      votes_other_lt: z.optional(z.int()),
      votes_other_lte: z.optional(z.int()),
      votes_other_gt: z.optional(z.int()),
      votes_other_gte: z.optional(z.int()),
      votes_other_between_min: z.optional(z.int()),
      votes_other_between_max_value: z.optional(z.int()),
      votes_other_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_other_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAttestationCorrectnessCanonicalServiceListResponse = zListFctAttestationCorrectnessCanonicalResponse;

export const zFctAttestationCorrectnessCanonicalServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAttestationCorrectnessCanonicalServiceGetResponse = zGetFctAttestationCorrectnessCanonicalResponse;

export const zFctAttestationCorrectnessHeadServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      votes_max_eq: z.optional(z.int()),
      votes_max_ne: z.optional(z.int()),
      votes_max_lt: z.optional(z.int()),
      votes_max_lte: z.optional(z.int()),
      votes_max_gt: z.optional(z.int()),
      votes_max_gte: z.optional(z.int()),
      votes_max_between_min: z.optional(z.int()),
      votes_max_between_max_value: z.optional(z.int()),
      votes_max_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_max_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_head_eq: z.optional(z.int()),
      votes_head_ne: z.optional(z.int()),
      votes_head_lt: z.optional(z.int()),
      votes_head_lte: z.optional(z.int()),
      votes_head_gt: z.optional(z.int()),
      votes_head_gte: z.optional(z.int()),
      votes_head_between_min: z.optional(z.int()),
      votes_head_between_max_value: z.optional(z.int()),
      votes_head_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_head_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_other_eq: z.optional(z.int()),
      votes_other_ne: z.optional(z.int()),
      votes_other_lt: z.optional(z.int()),
      votes_other_lte: z.optional(z.int()),
      votes_other_gt: z.optional(z.int()),
      votes_other_gte: z.optional(z.int()),
      votes_other_between_min: z.optional(z.int()),
      votes_other_between_max_value: z.optional(z.int()),
      votes_other_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      votes_other_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAttestationCorrectnessHeadServiceListResponse = zListFctAttestationCorrectnessHeadResponse;

export const zFctAttestationCorrectnessHeadServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAttestationCorrectnessHeadServiceGetResponse = zGetFctAttestationCorrectnessHeadResponse;

export const zFctAttestationFirstSeenChunked50MsServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      chunk_slot_start_diff_eq: z.optional(z.int()),
      chunk_slot_start_diff_ne: z.optional(z.int()),
      chunk_slot_start_diff_lt: z.optional(z.int()),
      chunk_slot_start_diff_lte: z.optional(z.int()),
      chunk_slot_start_diff_gt: z.optional(z.int()),
      chunk_slot_start_diff_gte: z.optional(z.int()),
      chunk_slot_start_diff_between_min: z.optional(z.int()),
      chunk_slot_start_diff_between_max_value: z.optional(z.int()),
      chunk_slot_start_diff_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      chunk_slot_start_diff_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      attestation_count_eq: z.optional(z.int()),
      attestation_count_ne: z.optional(z.int()),
      attestation_count_lt: z.optional(z.int()),
      attestation_count_lte: z.optional(z.int()),
      attestation_count_gt: z.optional(z.int()),
      attestation_count_gte: z.optional(z.int()),
      attestation_count_between_min: z.optional(z.int()),
      attestation_count_between_max_value: z.optional(z.int()),
      attestation_count_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      attestation_count_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctAttestationFirstSeenChunked50MsServiceListResponse = zListFctAttestationFirstSeenChunked50MsResponse;

export const zFctAttestationFirstSeenChunked50MsServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctAttestationFirstSeenChunked50MsServiceGetResponse = zGetFctAttestationFirstSeenChunked50MsResponse;

export const zFctBlockServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_version_eq: z.optional(z.string()),
      block_version_ne: z.optional(z.string()),
      block_version_contains: z.optional(z.string()),
      block_version_starts_with: z.optional(z.string()),
      block_version_ends_with: z.optional(z.string()),
      block_version_like: z.optional(z.string()),
      block_version_not_like: z.optional(z.string()),
      block_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_total_bytes_eq: z.optional(z.int()),
      block_total_bytes_ne: z.optional(z.int()),
      block_total_bytes_lt: z.optional(z.int()),
      block_total_bytes_lte: z.optional(z.int()),
      block_total_bytes_gt: z.optional(z.int()),
      block_total_bytes_gte: z.optional(z.int()),
      block_total_bytes_between_min: z.optional(z.int()),
      block_total_bytes_between_max_value: z.optional(z.int()),
      block_total_bytes_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_total_bytes_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_total_bytes_compressed_eq: z.optional(z.int()),
      block_total_bytes_compressed_ne: z.optional(z.int()),
      block_total_bytes_compressed_lt: z.optional(z.int()),
      block_total_bytes_compressed_lte: z.optional(z.int()),
      block_total_bytes_compressed_gt: z.optional(z.int()),
      block_total_bytes_compressed_gte: z.optional(z.int()),
      block_total_bytes_compressed_between_min: z.optional(z.int()),
      block_total_bytes_compressed_between_max_value: z.optional(z.int()),
      block_total_bytes_compressed_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_total_bytes_compressed_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      parent_root_eq: z.optional(z.string()),
      parent_root_ne: z.optional(z.string()),
      parent_root_contains: z.optional(z.string()),
      parent_root_starts_with: z.optional(z.string()),
      parent_root_ends_with: z.optional(z.string()),
      parent_root_like: z.optional(z.string()),
      parent_root_not_like: z.optional(z.string()),
      parent_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      parent_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      state_root_eq: z.optional(z.string()),
      state_root_ne: z.optional(z.string()),
      state_root_contains: z.optional(z.string()),
      state_root_starts_with: z.optional(z.string()),
      state_root_ends_with: z.optional(z.string()),
      state_root_like: z.optional(z.string()),
      state_root_not_like: z.optional(z.string()),
      state_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      state_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_index_eq: z.optional(z.int()),
      proposer_index_ne: z.optional(z.int()),
      proposer_index_lt: z.optional(z.int()),
      proposer_index_lte: z.optional(z.int()),
      proposer_index_gt: z.optional(z.int()),
      proposer_index_gte: z.optional(z.int()),
      proposer_index_between_min: z.optional(z.int()),
      proposer_index_between_max_value: z.optional(z.int()),
      proposer_index_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      proposer_index_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      eth1_data_block_hash_eq: z.optional(z.string()),
      eth1_data_block_hash_ne: z.optional(z.string()),
      eth1_data_block_hash_contains: z.optional(z.string()),
      eth1_data_block_hash_starts_with: z.optional(z.string()),
      eth1_data_block_hash_ends_with: z.optional(z.string()),
      eth1_data_block_hash_like: z.optional(z.string()),
      eth1_data_block_hash_not_like: z.optional(z.string()),
      eth1_data_block_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      eth1_data_block_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      eth1_data_deposit_root_eq: z.optional(z.string()),
      eth1_data_deposit_root_ne: z.optional(z.string()),
      eth1_data_deposit_root_contains: z.optional(z.string()),
      eth1_data_deposit_root_starts_with: z.optional(z.string()),
      eth1_data_deposit_root_ends_with: z.optional(z.string()),
      eth1_data_deposit_root_like: z.optional(z.string()),
      eth1_data_deposit_root_not_like: z.optional(z.string()),
      eth1_data_deposit_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      eth1_data_deposit_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_block_hash_eq: z.optional(z.string()),
      execution_payload_block_hash_ne: z.optional(z.string()),
      execution_payload_block_hash_contains: z.optional(z.string()),
      execution_payload_block_hash_starts_with: z.optional(z.string()),
      execution_payload_block_hash_ends_with: z.optional(z.string()),
      execution_payload_block_hash_like: z.optional(z.string()),
      execution_payload_block_hash_not_like: z.optional(z.string()),
      execution_payload_block_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_block_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_block_number_eq: z.optional(z.int()),
      execution_payload_block_number_ne: z.optional(z.int()),
      execution_payload_block_number_lt: z.optional(z.int()),
      execution_payload_block_number_lte: z.optional(z.int()),
      execution_payload_block_number_gt: z.optional(z.int()),
      execution_payload_block_number_gte: z.optional(z.int()),
      execution_payload_block_number_between_min: z.optional(z.int()),
      execution_payload_block_number_between_max_value: z.optional(z.int()),
      execution_payload_block_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_block_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_fee_recipient_eq: z.optional(z.string()),
      execution_payload_fee_recipient_ne: z.optional(z.string()),
      execution_payload_fee_recipient_contains: z.optional(z.string()),
      execution_payload_fee_recipient_starts_with: z.optional(z.string()),
      execution_payload_fee_recipient_ends_with: z.optional(z.string()),
      execution_payload_fee_recipient_like: z.optional(z.string()),
      execution_payload_fee_recipient_not_like: z.optional(z.string()),
      execution_payload_fee_recipient_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_fee_recipient_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_base_fee_per_gas_eq: z.optional(z.string()),
      execution_payload_base_fee_per_gas_ne: z.optional(z.string()),
      execution_payload_base_fee_per_gas_contains: z.optional(z.string()),
      execution_payload_base_fee_per_gas_starts_with: z.optional(z.string()),
      execution_payload_base_fee_per_gas_ends_with: z.optional(z.string()),
      execution_payload_base_fee_per_gas_like: z.optional(z.string()),
      execution_payload_base_fee_per_gas_not_like: z.optional(z.string()),
      execution_payload_base_fee_per_gas_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_base_fee_per_gas_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_blob_gas_used_eq: z.optional(z.int()),
      execution_payload_blob_gas_used_ne: z.optional(z.int()),
      execution_payload_blob_gas_used_lt: z.optional(z.int()),
      execution_payload_blob_gas_used_lte: z.optional(z.int()),
      execution_payload_blob_gas_used_gt: z.optional(z.int()),
      execution_payload_blob_gas_used_gte: z.optional(z.int()),
      execution_payload_blob_gas_used_between_min: z.optional(z.int()),
      execution_payload_blob_gas_used_between_max_value: z.optional(z.int()),
      execution_payload_blob_gas_used_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_blob_gas_used_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_excess_blob_gas_eq: z.optional(z.int()),
      execution_payload_excess_blob_gas_ne: z.optional(z.int()),
      execution_payload_excess_blob_gas_lt: z.optional(z.int()),
      execution_payload_excess_blob_gas_lte: z.optional(z.int()),
      execution_payload_excess_blob_gas_gt: z.optional(z.int()),
      execution_payload_excess_blob_gas_gte: z.optional(z.int()),
      execution_payload_excess_blob_gas_between_min: z.optional(z.int()),
      execution_payload_excess_blob_gas_between_max_value: z.optional(z.int()),
      execution_payload_excess_blob_gas_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_excess_blob_gas_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_limit_eq: z.optional(z.int()),
      execution_payload_gas_limit_ne: z.optional(z.int()),
      execution_payload_gas_limit_lt: z.optional(z.int()),
      execution_payload_gas_limit_lte: z.optional(z.int()),
      execution_payload_gas_limit_gt: z.optional(z.int()),
      execution_payload_gas_limit_gte: z.optional(z.int()),
      execution_payload_gas_limit_between_min: z.optional(z.int()),
      execution_payload_gas_limit_between_max_value: z.optional(z.int()),
      execution_payload_gas_limit_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_limit_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_used_eq: z.optional(z.int()),
      execution_payload_gas_used_ne: z.optional(z.int()),
      execution_payload_gas_used_lt: z.optional(z.int()),
      execution_payload_gas_used_lte: z.optional(z.int()),
      execution_payload_gas_used_gt: z.optional(z.int()),
      execution_payload_gas_used_gte: z.optional(z.int()),
      execution_payload_gas_used_between_min: z.optional(z.int()),
      execution_payload_gas_used_between_max_value: z.optional(z.int()),
      execution_payload_gas_used_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_used_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_state_root_eq: z.optional(z.string()),
      execution_payload_state_root_ne: z.optional(z.string()),
      execution_payload_state_root_contains: z.optional(z.string()),
      execution_payload_state_root_starts_with: z.optional(z.string()),
      execution_payload_state_root_ends_with: z.optional(z.string()),
      execution_payload_state_root_like: z.optional(z.string()),
      execution_payload_state_root_not_like: z.optional(z.string()),
      execution_payload_state_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_state_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_parent_hash_eq: z.optional(z.string()),
      execution_payload_parent_hash_ne: z.optional(z.string()),
      execution_payload_parent_hash_contains: z.optional(z.string()),
      execution_payload_parent_hash_starts_with: z.optional(z.string()),
      execution_payload_parent_hash_ends_with: z.optional(z.string()),
      execution_payload_parent_hash_like: z.optional(z.string()),
      execution_payload_parent_hash_not_like: z.optional(z.string()),
      execution_payload_parent_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_parent_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_transactions_count_eq: z.optional(z.int()),
      execution_payload_transactions_count_ne: z.optional(z.int()),
      execution_payload_transactions_count_lt: z.optional(z.int()),
      execution_payload_transactions_count_lte: z.optional(z.int()),
      execution_payload_transactions_count_gt: z.optional(z.int()),
      execution_payload_transactions_count_gte: z.optional(z.int()),
      execution_payload_transactions_count_between_min: z.optional(z.int()),
      execution_payload_transactions_count_between_max_value: z.optional(z.int()),
      execution_payload_transactions_count_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_count_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_total_bytes_eq: z.optional(z.int()),
      execution_payload_transactions_total_bytes_ne: z.optional(z.int()),
      execution_payload_transactions_total_bytes_lt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_lte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_gt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_gte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_between_min: z.optional(z.int()),
      execution_payload_transactions_total_bytes_between_max_value: z.optional(z.int()),
      execution_payload_transactions_total_bytes_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_total_bytes_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_total_bytes_compressed_eq: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_ne: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_lt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_lte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_gt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_gte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_between_min: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_between_max_value: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_in_values: z.optional(
        z.string().check(z.regex(/^\d+(,\d+)*$/))
      ),
      execution_payload_transactions_total_bytes_compressed_not_in_values: z.optional(
        z.string().check(z.regex(/^\d+(,\d+)*$/))
      ),
      status_eq: z.optional(z.string()),
      status_ne: z.optional(z.string()),
      status_contains: z.optional(z.string()),
      status_starts_with: z.optional(z.string()),
      status_ends_with: z.optional(z.string()),
      status_like: z.optional(z.string()),
      status_not_like: z.optional(z.string()),
      status_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      status_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockServiceListResponse = zListFctBlockResponse;

export const zFctBlockServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockServiceGetResponse = zGetFctBlockResponse;

export const zFctBlockBlobCountServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      blob_count_eq: z.optional(z.int()),
      blob_count_ne: z.optional(z.int()),
      blob_count_lt: z.optional(z.int()),
      blob_count_lte: z.optional(z.int()),
      blob_count_gt: z.optional(z.int()),
      blob_count_gte: z.optional(z.int()),
      blob_count_between_min: z.optional(z.int()),
      blob_count_between_max_value: z.optional(z.int()),
      blob_count_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      blob_count_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      status_eq: z.optional(z.string()),
      status_ne: z.optional(z.string()),
      status_contains: z.optional(z.string()),
      status_starts_with: z.optional(z.string()),
      status_ends_with: z.optional(z.string()),
      status_like: z.optional(z.string()),
      status_not_like: z.optional(z.string()),
      status_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      status_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockBlobCountServiceListResponse = zListFctBlockBlobCountResponse;

export const zFctBlockBlobCountServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockBlobCountServiceGetResponse = zGetFctBlockBlobCountResponse;

export const zFctBlockBlobCountHeadServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      blob_count_eq: z.optional(z.int()),
      blob_count_ne: z.optional(z.int()),
      blob_count_lt: z.optional(z.int()),
      blob_count_lte: z.optional(z.int()),
      blob_count_gt: z.optional(z.int()),
      blob_count_gte: z.optional(z.int()),
      blob_count_between_min: z.optional(z.int()),
      blob_count_between_max_value: z.optional(z.int()),
      blob_count_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      blob_count_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockBlobCountHeadServiceListResponse = zListFctBlockBlobCountHeadResponse;

export const zFctBlockBlobCountHeadServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockBlobCountHeadServiceGetResponse = zGetFctBlockBlobCountHeadResponse;

export const zFctBlockBlobFirstSeenByNodeServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      blob_index_eq: z.optional(z.int()),
      blob_index_ne: z.optional(z.int()),
      blob_index_lt: z.optional(z.int()),
      blob_index_lte: z.optional(z.int()),
      blob_index_gt: z.optional(z.int()),
      blob_index_gte: z.optional(z.int()),
      blob_index_between_min: z.optional(z.int()),
      blob_index_between_max_value: z.optional(z.int()),
      blob_index_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      blob_index_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      meta_client_name_eq: z.optional(z.string()),
      meta_client_name_ne: z.optional(z.string()),
      meta_client_name_contains: z.optional(z.string()),
      meta_client_name_starts_with: z.optional(z.string()),
      meta_client_name_ends_with: z.optional(z.string()),
      meta_client_name_like: z.optional(z.string()),
      meta_client_name_not_like: z.optional(z.string()),
      meta_client_name_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_name_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      source_eq: z.optional(z.string()),
      source_ne: z.optional(z.string()),
      source_contains: z.optional(z.string()),
      source_starts_with: z.optional(z.string()),
      source_ends_with: z.optional(z.string()),
      source_like: z.optional(z.string()),
      source_not_like: z.optional(z.string()),
      source_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      source_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      seen_slot_start_diff_eq: z.optional(z.int()),
      seen_slot_start_diff_ne: z.optional(z.int()),
      seen_slot_start_diff_lt: z.optional(z.int()),
      seen_slot_start_diff_lte: z.optional(z.int()),
      seen_slot_start_diff_gt: z.optional(z.int()),
      seen_slot_start_diff_gte: z.optional(z.int()),
      seen_slot_start_diff_between_min: z.optional(z.int()),
      seen_slot_start_diff_between_max_value: z.optional(z.int()),
      seen_slot_start_diff_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      seen_slot_start_diff_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      username_eq: z.optional(z.string()),
      username_ne: z.optional(z.string()),
      username_contains: z.optional(z.string()),
      username_starts_with: z.optional(z.string()),
      username_ends_with: z.optional(z.string()),
      username_like: z.optional(z.string()),
      username_not_like: z.optional(z.string()),
      username_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      username_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      node_id_eq: z.optional(z.string()),
      node_id_ne: z.optional(z.string()),
      node_id_contains: z.optional(z.string()),
      node_id_starts_with: z.optional(z.string()),
      node_id_ends_with: z.optional(z.string()),
      node_id_like: z.optional(z.string()),
      node_id_not_like: z.optional(z.string()),
      node_id_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      node_id_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      classification_eq: z.optional(z.string()),
      classification_ne: z.optional(z.string()),
      classification_contains: z.optional(z.string()),
      classification_starts_with: z.optional(z.string()),
      classification_ends_with: z.optional(z.string()),
      classification_like: z.optional(z.string()),
      classification_not_like: z.optional(z.string()),
      classification_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      classification_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_version_eq: z.optional(z.string()),
      meta_client_version_ne: z.optional(z.string()),
      meta_client_version_contains: z.optional(z.string()),
      meta_client_version_starts_with: z.optional(z.string()),
      meta_client_version_ends_with: z.optional(z.string()),
      meta_client_version_like: z.optional(z.string()),
      meta_client_version_not_like: z.optional(z.string()),
      meta_client_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_implementation_eq: z.optional(z.string()),
      meta_client_implementation_ne: z.optional(z.string()),
      meta_client_implementation_contains: z.optional(z.string()),
      meta_client_implementation_starts_with: z.optional(z.string()),
      meta_client_implementation_ends_with: z.optional(z.string()),
      meta_client_implementation_like: z.optional(z.string()),
      meta_client_implementation_not_like: z.optional(z.string()),
      meta_client_implementation_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_implementation_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_city_eq: z.optional(z.string()),
      meta_client_geo_city_ne: z.optional(z.string()),
      meta_client_geo_city_contains: z.optional(z.string()),
      meta_client_geo_city_starts_with: z.optional(z.string()),
      meta_client_geo_city_ends_with: z.optional(z.string()),
      meta_client_geo_city_like: z.optional(z.string()),
      meta_client_geo_city_not_like: z.optional(z.string()),
      meta_client_geo_city_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_city_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_eq: z.optional(z.string()),
      meta_client_geo_country_ne: z.optional(z.string()),
      meta_client_geo_country_contains: z.optional(z.string()),
      meta_client_geo_country_starts_with: z.optional(z.string()),
      meta_client_geo_country_ends_with: z.optional(z.string()),
      meta_client_geo_country_like: z.optional(z.string()),
      meta_client_geo_country_not_like: z.optional(z.string()),
      meta_client_geo_country_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_code_eq: z.optional(z.string()),
      meta_client_geo_country_code_ne: z.optional(z.string()),
      meta_client_geo_country_code_contains: z.optional(z.string()),
      meta_client_geo_country_code_starts_with: z.optional(z.string()),
      meta_client_geo_country_code_ends_with: z.optional(z.string()),
      meta_client_geo_country_code_like: z.optional(z.string()),
      meta_client_geo_country_code_not_like: z.optional(z.string()),
      meta_client_geo_country_code_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_code_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_continent_code_eq: z.optional(z.string()),
      meta_client_geo_continent_code_ne: z.optional(z.string()),
      meta_client_geo_continent_code_contains: z.optional(z.string()),
      meta_client_geo_continent_code_starts_with: z.optional(z.string()),
      meta_client_geo_continent_code_ends_with: z.optional(z.string()),
      meta_client_geo_continent_code_like: z.optional(z.string()),
      meta_client_geo_continent_code_not_like: z.optional(z.string()),
      meta_client_geo_continent_code_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_continent_code_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_longitude_value: z.optional(z.number()),
      meta_client_geo_latitude_value: z.optional(z.number()),
      meta_client_geo_autonomous_system_number_eq: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_ne: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_lt: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_lte: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_gt: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_gte: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_between_min: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_between_max_value: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      meta_client_geo_autonomous_system_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      meta_client_geo_autonomous_system_organization_eq: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_ne: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_contains: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_starts_with: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_ends_with: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_like: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_not_like: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_in_values: z.optional(
        z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))
      ),
      meta_client_geo_autonomous_system_organization_not_in_values: z.optional(
        z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))
      ),
      meta_consensus_version_eq: z.optional(z.string()),
      meta_consensus_version_ne: z.optional(z.string()),
      meta_consensus_version_contains: z.optional(z.string()),
      meta_consensus_version_starts_with: z.optional(z.string()),
      meta_consensus_version_ends_with: z.optional(z.string()),
      meta_consensus_version_like: z.optional(z.string()),
      meta_consensus_version_not_like: z.optional(z.string()),
      meta_consensus_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_implementation_eq: z.optional(z.string()),
      meta_consensus_implementation_ne: z.optional(z.string()),
      meta_consensus_implementation_contains: z.optional(z.string()),
      meta_consensus_implementation_starts_with: z.optional(z.string()),
      meta_consensus_implementation_ends_with: z.optional(z.string()),
      meta_consensus_implementation_like: z.optional(z.string()),
      meta_consensus_implementation_not_like: z.optional(z.string()),
      meta_consensus_implementation_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_implementation_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockBlobFirstSeenByNodeServiceListResponse = zListFctBlockBlobFirstSeenByNodeResponse;

export const zFctBlockBlobFirstSeenByNodeServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockBlobFirstSeenByNodeServiceGetResponse = zGetFctBlockBlobFirstSeenByNodeResponse;

export const zFctBlockFirstSeenByNodeServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_name_eq: z.optional(z.string()),
      meta_client_name_ne: z.optional(z.string()),
      meta_client_name_contains: z.optional(z.string()),
      meta_client_name_starts_with: z.optional(z.string()),
      meta_client_name_ends_with: z.optional(z.string()),
      meta_client_name_like: z.optional(z.string()),
      meta_client_name_not_like: z.optional(z.string()),
      meta_client_name_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_name_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      source_eq: z.optional(z.string()),
      source_ne: z.optional(z.string()),
      source_contains: z.optional(z.string()),
      source_starts_with: z.optional(z.string()),
      source_ends_with: z.optional(z.string()),
      source_like: z.optional(z.string()),
      source_not_like: z.optional(z.string()),
      source_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      source_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      seen_slot_start_diff_eq: z.optional(z.int()),
      seen_slot_start_diff_ne: z.optional(z.int()),
      seen_slot_start_diff_lt: z.optional(z.int()),
      seen_slot_start_diff_lte: z.optional(z.int()),
      seen_slot_start_diff_gt: z.optional(z.int()),
      seen_slot_start_diff_gte: z.optional(z.int()),
      seen_slot_start_diff_between_min: z.optional(z.int()),
      seen_slot_start_diff_between_max_value: z.optional(z.int()),
      seen_slot_start_diff_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      seen_slot_start_diff_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      username_eq: z.optional(z.string()),
      username_ne: z.optional(z.string()),
      username_contains: z.optional(z.string()),
      username_starts_with: z.optional(z.string()),
      username_ends_with: z.optional(z.string()),
      username_like: z.optional(z.string()),
      username_not_like: z.optional(z.string()),
      username_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      username_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      node_id_eq: z.optional(z.string()),
      node_id_ne: z.optional(z.string()),
      node_id_contains: z.optional(z.string()),
      node_id_starts_with: z.optional(z.string()),
      node_id_ends_with: z.optional(z.string()),
      node_id_like: z.optional(z.string()),
      node_id_not_like: z.optional(z.string()),
      node_id_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      node_id_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      classification_eq: z.optional(z.string()),
      classification_ne: z.optional(z.string()),
      classification_contains: z.optional(z.string()),
      classification_starts_with: z.optional(z.string()),
      classification_ends_with: z.optional(z.string()),
      classification_like: z.optional(z.string()),
      classification_not_like: z.optional(z.string()),
      classification_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      classification_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_version_eq: z.optional(z.string()),
      meta_client_version_ne: z.optional(z.string()),
      meta_client_version_contains: z.optional(z.string()),
      meta_client_version_starts_with: z.optional(z.string()),
      meta_client_version_ends_with: z.optional(z.string()),
      meta_client_version_like: z.optional(z.string()),
      meta_client_version_not_like: z.optional(z.string()),
      meta_client_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_implementation_eq: z.optional(z.string()),
      meta_client_implementation_ne: z.optional(z.string()),
      meta_client_implementation_contains: z.optional(z.string()),
      meta_client_implementation_starts_with: z.optional(z.string()),
      meta_client_implementation_ends_with: z.optional(z.string()),
      meta_client_implementation_like: z.optional(z.string()),
      meta_client_implementation_not_like: z.optional(z.string()),
      meta_client_implementation_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_implementation_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_city_eq: z.optional(z.string()),
      meta_client_geo_city_ne: z.optional(z.string()),
      meta_client_geo_city_contains: z.optional(z.string()),
      meta_client_geo_city_starts_with: z.optional(z.string()),
      meta_client_geo_city_ends_with: z.optional(z.string()),
      meta_client_geo_city_like: z.optional(z.string()),
      meta_client_geo_city_not_like: z.optional(z.string()),
      meta_client_geo_city_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_city_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_eq: z.optional(z.string()),
      meta_client_geo_country_ne: z.optional(z.string()),
      meta_client_geo_country_contains: z.optional(z.string()),
      meta_client_geo_country_starts_with: z.optional(z.string()),
      meta_client_geo_country_ends_with: z.optional(z.string()),
      meta_client_geo_country_like: z.optional(z.string()),
      meta_client_geo_country_not_like: z.optional(z.string()),
      meta_client_geo_country_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_code_eq: z.optional(z.string()),
      meta_client_geo_country_code_ne: z.optional(z.string()),
      meta_client_geo_country_code_contains: z.optional(z.string()),
      meta_client_geo_country_code_starts_with: z.optional(z.string()),
      meta_client_geo_country_code_ends_with: z.optional(z.string()),
      meta_client_geo_country_code_like: z.optional(z.string()),
      meta_client_geo_country_code_not_like: z.optional(z.string()),
      meta_client_geo_country_code_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_code_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_continent_code_eq: z.optional(z.string()),
      meta_client_geo_continent_code_ne: z.optional(z.string()),
      meta_client_geo_continent_code_contains: z.optional(z.string()),
      meta_client_geo_continent_code_starts_with: z.optional(z.string()),
      meta_client_geo_continent_code_ends_with: z.optional(z.string()),
      meta_client_geo_continent_code_like: z.optional(z.string()),
      meta_client_geo_continent_code_not_like: z.optional(z.string()),
      meta_client_geo_continent_code_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_continent_code_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_longitude_value: z.optional(z.number()),
      meta_client_geo_latitude_value: z.optional(z.number()),
      meta_client_geo_autonomous_system_number_eq: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_ne: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_lt: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_lte: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_gt: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_gte: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_between_min: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_between_max_value: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      meta_client_geo_autonomous_system_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      meta_client_geo_autonomous_system_organization_eq: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_ne: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_contains: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_starts_with: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_ends_with: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_like: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_not_like: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_in_values: z.optional(
        z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))
      ),
      meta_client_geo_autonomous_system_organization_not_in_values: z.optional(
        z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))
      ),
      meta_consensus_version_eq: z.optional(z.string()),
      meta_consensus_version_ne: z.optional(z.string()),
      meta_consensus_version_contains: z.optional(z.string()),
      meta_consensus_version_starts_with: z.optional(z.string()),
      meta_consensus_version_ends_with: z.optional(z.string()),
      meta_consensus_version_like: z.optional(z.string()),
      meta_consensus_version_not_like: z.optional(z.string()),
      meta_consensus_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_implementation_eq: z.optional(z.string()),
      meta_consensus_implementation_ne: z.optional(z.string()),
      meta_consensus_implementation_contains: z.optional(z.string()),
      meta_consensus_implementation_starts_with: z.optional(z.string()),
      meta_consensus_implementation_ends_with: z.optional(z.string()),
      meta_consensus_implementation_like: z.optional(z.string()),
      meta_consensus_implementation_not_like: z.optional(z.string()),
      meta_consensus_implementation_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_implementation_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockFirstSeenByNodeServiceListResponse = zListFctBlockFirstSeenByNodeResponse;

export const zFctBlockFirstSeenByNodeServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockFirstSeenByNodeServiceGetResponse = zGetFctBlockFirstSeenByNodeResponse;

export const zFctBlockHeadServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_version_eq: z.optional(z.string()),
      block_version_ne: z.optional(z.string()),
      block_version_contains: z.optional(z.string()),
      block_version_starts_with: z.optional(z.string()),
      block_version_ends_with: z.optional(z.string()),
      block_version_like: z.optional(z.string()),
      block_version_not_like: z.optional(z.string()),
      block_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_total_bytes_eq: z.optional(z.int()),
      block_total_bytes_ne: z.optional(z.int()),
      block_total_bytes_lt: z.optional(z.int()),
      block_total_bytes_lte: z.optional(z.int()),
      block_total_bytes_gt: z.optional(z.int()),
      block_total_bytes_gte: z.optional(z.int()),
      block_total_bytes_between_min: z.optional(z.int()),
      block_total_bytes_between_max_value: z.optional(z.int()),
      block_total_bytes_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_total_bytes_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_total_bytes_compressed_eq: z.optional(z.int()),
      block_total_bytes_compressed_ne: z.optional(z.int()),
      block_total_bytes_compressed_lt: z.optional(z.int()),
      block_total_bytes_compressed_lte: z.optional(z.int()),
      block_total_bytes_compressed_gt: z.optional(z.int()),
      block_total_bytes_compressed_gte: z.optional(z.int()),
      block_total_bytes_compressed_between_min: z.optional(z.int()),
      block_total_bytes_compressed_between_max_value: z.optional(z.int()),
      block_total_bytes_compressed_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_total_bytes_compressed_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      parent_root_eq: z.optional(z.string()),
      parent_root_ne: z.optional(z.string()),
      parent_root_contains: z.optional(z.string()),
      parent_root_starts_with: z.optional(z.string()),
      parent_root_ends_with: z.optional(z.string()),
      parent_root_like: z.optional(z.string()),
      parent_root_not_like: z.optional(z.string()),
      parent_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      parent_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      state_root_eq: z.optional(z.string()),
      state_root_ne: z.optional(z.string()),
      state_root_contains: z.optional(z.string()),
      state_root_starts_with: z.optional(z.string()),
      state_root_ends_with: z.optional(z.string()),
      state_root_like: z.optional(z.string()),
      state_root_not_like: z.optional(z.string()),
      state_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      state_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_index_eq: z.optional(z.int()),
      proposer_index_ne: z.optional(z.int()),
      proposer_index_lt: z.optional(z.int()),
      proposer_index_lte: z.optional(z.int()),
      proposer_index_gt: z.optional(z.int()),
      proposer_index_gte: z.optional(z.int()),
      proposer_index_between_min: z.optional(z.int()),
      proposer_index_between_max_value: z.optional(z.int()),
      proposer_index_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      proposer_index_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      eth1_data_block_hash_eq: z.optional(z.string()),
      eth1_data_block_hash_ne: z.optional(z.string()),
      eth1_data_block_hash_contains: z.optional(z.string()),
      eth1_data_block_hash_starts_with: z.optional(z.string()),
      eth1_data_block_hash_ends_with: z.optional(z.string()),
      eth1_data_block_hash_like: z.optional(z.string()),
      eth1_data_block_hash_not_like: z.optional(z.string()),
      eth1_data_block_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      eth1_data_block_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      eth1_data_deposit_root_eq: z.optional(z.string()),
      eth1_data_deposit_root_ne: z.optional(z.string()),
      eth1_data_deposit_root_contains: z.optional(z.string()),
      eth1_data_deposit_root_starts_with: z.optional(z.string()),
      eth1_data_deposit_root_ends_with: z.optional(z.string()),
      eth1_data_deposit_root_like: z.optional(z.string()),
      eth1_data_deposit_root_not_like: z.optional(z.string()),
      eth1_data_deposit_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      eth1_data_deposit_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_block_hash_eq: z.optional(z.string()),
      execution_payload_block_hash_ne: z.optional(z.string()),
      execution_payload_block_hash_contains: z.optional(z.string()),
      execution_payload_block_hash_starts_with: z.optional(z.string()),
      execution_payload_block_hash_ends_with: z.optional(z.string()),
      execution_payload_block_hash_like: z.optional(z.string()),
      execution_payload_block_hash_not_like: z.optional(z.string()),
      execution_payload_block_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_block_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_block_number_eq: z.optional(z.int()),
      execution_payload_block_number_ne: z.optional(z.int()),
      execution_payload_block_number_lt: z.optional(z.int()),
      execution_payload_block_number_lte: z.optional(z.int()),
      execution_payload_block_number_gt: z.optional(z.int()),
      execution_payload_block_number_gte: z.optional(z.int()),
      execution_payload_block_number_between_min: z.optional(z.int()),
      execution_payload_block_number_between_max_value: z.optional(z.int()),
      execution_payload_block_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_block_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_fee_recipient_eq: z.optional(z.string()),
      execution_payload_fee_recipient_ne: z.optional(z.string()),
      execution_payload_fee_recipient_contains: z.optional(z.string()),
      execution_payload_fee_recipient_starts_with: z.optional(z.string()),
      execution_payload_fee_recipient_ends_with: z.optional(z.string()),
      execution_payload_fee_recipient_like: z.optional(z.string()),
      execution_payload_fee_recipient_not_like: z.optional(z.string()),
      execution_payload_fee_recipient_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_fee_recipient_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_base_fee_per_gas_eq: z.optional(z.string()),
      execution_payload_base_fee_per_gas_ne: z.optional(z.string()),
      execution_payload_base_fee_per_gas_contains: z.optional(z.string()),
      execution_payload_base_fee_per_gas_starts_with: z.optional(z.string()),
      execution_payload_base_fee_per_gas_ends_with: z.optional(z.string()),
      execution_payload_base_fee_per_gas_like: z.optional(z.string()),
      execution_payload_base_fee_per_gas_not_like: z.optional(z.string()),
      execution_payload_base_fee_per_gas_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_base_fee_per_gas_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_blob_gas_used_eq: z.optional(z.int()),
      execution_payload_blob_gas_used_ne: z.optional(z.int()),
      execution_payload_blob_gas_used_lt: z.optional(z.int()),
      execution_payload_blob_gas_used_lte: z.optional(z.int()),
      execution_payload_blob_gas_used_gt: z.optional(z.int()),
      execution_payload_blob_gas_used_gte: z.optional(z.int()),
      execution_payload_blob_gas_used_between_min: z.optional(z.int()),
      execution_payload_blob_gas_used_between_max_value: z.optional(z.int()),
      execution_payload_blob_gas_used_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_blob_gas_used_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_excess_blob_gas_eq: z.optional(z.int()),
      execution_payload_excess_blob_gas_ne: z.optional(z.int()),
      execution_payload_excess_blob_gas_lt: z.optional(z.int()),
      execution_payload_excess_blob_gas_lte: z.optional(z.int()),
      execution_payload_excess_blob_gas_gt: z.optional(z.int()),
      execution_payload_excess_blob_gas_gte: z.optional(z.int()),
      execution_payload_excess_blob_gas_between_min: z.optional(z.int()),
      execution_payload_excess_blob_gas_between_max_value: z.optional(z.int()),
      execution_payload_excess_blob_gas_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_excess_blob_gas_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_limit_eq: z.optional(z.int()),
      execution_payload_gas_limit_ne: z.optional(z.int()),
      execution_payload_gas_limit_lt: z.optional(z.int()),
      execution_payload_gas_limit_lte: z.optional(z.int()),
      execution_payload_gas_limit_gt: z.optional(z.int()),
      execution_payload_gas_limit_gte: z.optional(z.int()),
      execution_payload_gas_limit_between_min: z.optional(z.int()),
      execution_payload_gas_limit_between_max_value: z.optional(z.int()),
      execution_payload_gas_limit_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_limit_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_used_eq: z.optional(z.int()),
      execution_payload_gas_used_ne: z.optional(z.int()),
      execution_payload_gas_used_lt: z.optional(z.int()),
      execution_payload_gas_used_lte: z.optional(z.int()),
      execution_payload_gas_used_gt: z.optional(z.int()),
      execution_payload_gas_used_gte: z.optional(z.int()),
      execution_payload_gas_used_between_min: z.optional(z.int()),
      execution_payload_gas_used_between_max_value: z.optional(z.int()),
      execution_payload_gas_used_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_used_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_state_root_eq: z.optional(z.string()),
      execution_payload_state_root_ne: z.optional(z.string()),
      execution_payload_state_root_contains: z.optional(z.string()),
      execution_payload_state_root_starts_with: z.optional(z.string()),
      execution_payload_state_root_ends_with: z.optional(z.string()),
      execution_payload_state_root_like: z.optional(z.string()),
      execution_payload_state_root_not_like: z.optional(z.string()),
      execution_payload_state_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_state_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_parent_hash_eq: z.optional(z.string()),
      execution_payload_parent_hash_ne: z.optional(z.string()),
      execution_payload_parent_hash_contains: z.optional(z.string()),
      execution_payload_parent_hash_starts_with: z.optional(z.string()),
      execution_payload_parent_hash_ends_with: z.optional(z.string()),
      execution_payload_parent_hash_like: z.optional(z.string()),
      execution_payload_parent_hash_not_like: z.optional(z.string()),
      execution_payload_parent_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_parent_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      execution_payload_transactions_count_eq: z.optional(z.int()),
      execution_payload_transactions_count_ne: z.optional(z.int()),
      execution_payload_transactions_count_lt: z.optional(z.int()),
      execution_payload_transactions_count_lte: z.optional(z.int()),
      execution_payload_transactions_count_gt: z.optional(z.int()),
      execution_payload_transactions_count_gte: z.optional(z.int()),
      execution_payload_transactions_count_between_min: z.optional(z.int()),
      execution_payload_transactions_count_between_max_value: z.optional(z.int()),
      execution_payload_transactions_count_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_count_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_total_bytes_eq: z.optional(z.int()),
      execution_payload_transactions_total_bytes_ne: z.optional(z.int()),
      execution_payload_transactions_total_bytes_lt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_lte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_gt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_gte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_between_min: z.optional(z.int()),
      execution_payload_transactions_total_bytes_between_max_value: z.optional(z.int()),
      execution_payload_transactions_total_bytes_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_total_bytes_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_total_bytes_compressed_eq: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_ne: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_lt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_lte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_gt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_gte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_between_min: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_between_max_value: z.optional(z.int()),
      execution_payload_transactions_total_bytes_compressed_in_values: z.optional(
        z.string().check(z.regex(/^\d+(,\d+)*$/))
      ),
      execution_payload_transactions_total_bytes_compressed_not_in_values: z.optional(
        z.string().check(z.regex(/^\d+(,\d+)*$/))
      ),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockHeadServiceListResponse = zListFctBlockHeadResponse;

export const zFctBlockHeadServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockHeadServiceGetResponse = zGetFctBlockHeadResponse;

export const zFctBlockMevServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      earliest_bid_date_time_eq: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_ne: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_lt: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_lte: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_gt: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_gte: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_between_min: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_between_max_value: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_in_values: z.optional(z.string().check(z.regex(/^-?\d+(,-?\d+)*$/))),
      earliest_bid_date_time_not_in_values: z.optional(z.string().check(z.regex(/^-?\d+(,-?\d+)*$/))),
      relay_names: z.optional(z.array(z.string())),
      parent_hash_eq: z.optional(z.string()),
      parent_hash_ne: z.optional(z.string()),
      parent_hash_contains: z.optional(z.string()),
      parent_hash_starts_with: z.optional(z.string()),
      parent_hash_ends_with: z.optional(z.string()),
      parent_hash_like: z.optional(z.string()),
      parent_hash_not_like: z.optional(z.string()),
      parent_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      parent_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_number_eq: z.optional(z.int()),
      block_number_ne: z.optional(z.int()),
      block_number_lt: z.optional(z.int()),
      block_number_lte: z.optional(z.int()),
      block_number_gt: z.optional(z.int()),
      block_number_gte: z.optional(z.int()),
      block_number_between_min: z.optional(z.int()),
      block_number_between_max_value: z.optional(z.int()),
      block_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_hash_eq: z.optional(z.string()),
      block_hash_ne: z.optional(z.string()),
      block_hash_contains: z.optional(z.string()),
      block_hash_starts_with: z.optional(z.string()),
      block_hash_ends_with: z.optional(z.string()),
      block_hash_like: z.optional(z.string()),
      block_hash_not_like: z.optional(z.string()),
      block_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      builder_pubkey_eq: z.optional(z.string()),
      builder_pubkey_ne: z.optional(z.string()),
      builder_pubkey_contains: z.optional(z.string()),
      builder_pubkey_starts_with: z.optional(z.string()),
      builder_pubkey_ends_with: z.optional(z.string()),
      builder_pubkey_like: z.optional(z.string()),
      builder_pubkey_not_like: z.optional(z.string()),
      builder_pubkey_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      builder_pubkey_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_pubkey_eq: z.optional(z.string()),
      proposer_pubkey_ne: z.optional(z.string()),
      proposer_pubkey_contains: z.optional(z.string()),
      proposer_pubkey_starts_with: z.optional(z.string()),
      proposer_pubkey_ends_with: z.optional(z.string()),
      proposer_pubkey_like: z.optional(z.string()),
      proposer_pubkey_not_like: z.optional(z.string()),
      proposer_pubkey_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_pubkey_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_fee_recipient_eq: z.optional(z.string()),
      proposer_fee_recipient_ne: z.optional(z.string()),
      proposer_fee_recipient_contains: z.optional(z.string()),
      proposer_fee_recipient_starts_with: z.optional(z.string()),
      proposer_fee_recipient_ends_with: z.optional(z.string()),
      proposer_fee_recipient_like: z.optional(z.string()),
      proposer_fee_recipient_not_like: z.optional(z.string()),
      proposer_fee_recipient_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_fee_recipient_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      gas_limit_eq: z.optional(z.int()),
      gas_limit_ne: z.optional(z.int()),
      gas_limit_lt: z.optional(z.int()),
      gas_limit_lte: z.optional(z.int()),
      gas_limit_gt: z.optional(z.int()),
      gas_limit_gte: z.optional(z.int()),
      gas_limit_between_min: z.optional(z.int()),
      gas_limit_between_max_value: z.optional(z.int()),
      gas_limit_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      gas_limit_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      gas_used_eq: z.optional(z.int()),
      gas_used_ne: z.optional(z.int()),
      gas_used_lt: z.optional(z.int()),
      gas_used_lte: z.optional(z.int()),
      gas_used_gt: z.optional(z.int()),
      gas_used_gte: z.optional(z.int()),
      gas_used_between_min: z.optional(z.int()),
      gas_used_between_max_value: z.optional(z.int()),
      gas_used_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      gas_used_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      value_eq: z.optional(z.string()),
      value_ne: z.optional(z.string()),
      value_contains: z.optional(z.string()),
      value_starts_with: z.optional(z.string()),
      value_ends_with: z.optional(z.string()),
      value_like: z.optional(z.string()),
      value_not_like: z.optional(z.string()),
      value_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      value_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      transaction_count_eq: z.optional(z.int()),
      transaction_count_ne: z.optional(z.int()),
      transaction_count_lt: z.optional(z.int()),
      transaction_count_lte: z.optional(z.int()),
      transaction_count_gt: z.optional(z.int()),
      transaction_count_gte: z.optional(z.int()),
      transaction_count_between_min: z.optional(z.int()),
      transaction_count_between_max_value: z.optional(z.int()),
      transaction_count_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      transaction_count_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      status_eq: z.optional(z.string()),
      status_ne: z.optional(z.string()),
      status_contains: z.optional(z.string()),
      status_starts_with: z.optional(z.string()),
      status_ends_with: z.optional(z.string()),
      status_like: z.optional(z.string()),
      status_not_like: z.optional(z.string()),
      status_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      status_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockMevServiceListResponse = zListFctBlockMevResponse;

export const zFctBlockMevServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockMevServiceGetResponse = zGetFctBlockMevResponse;

export const zFctBlockMevHeadServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      earliest_bid_date_time_eq: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_ne: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_lt: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_lte: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_gt: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_gte: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_between_min: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_between_max_value: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_in_values: z.optional(z.string().check(z.regex(/^-?\d+(,-?\d+)*$/))),
      earliest_bid_date_time_not_in_values: z.optional(z.string().check(z.regex(/^-?\d+(,-?\d+)*$/))),
      relay_names: z.optional(z.array(z.string())),
      parent_hash_eq: z.optional(z.string()),
      parent_hash_ne: z.optional(z.string()),
      parent_hash_contains: z.optional(z.string()),
      parent_hash_starts_with: z.optional(z.string()),
      parent_hash_ends_with: z.optional(z.string()),
      parent_hash_like: z.optional(z.string()),
      parent_hash_not_like: z.optional(z.string()),
      parent_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      parent_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_number_eq: z.optional(z.int()),
      block_number_ne: z.optional(z.int()),
      block_number_lt: z.optional(z.int()),
      block_number_lte: z.optional(z.int()),
      block_number_gt: z.optional(z.int()),
      block_number_gte: z.optional(z.int()),
      block_number_between_min: z.optional(z.int()),
      block_number_between_max_value: z.optional(z.int()),
      block_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_hash_eq: z.optional(z.string()),
      block_hash_ne: z.optional(z.string()),
      block_hash_contains: z.optional(z.string()),
      block_hash_starts_with: z.optional(z.string()),
      block_hash_ends_with: z.optional(z.string()),
      block_hash_like: z.optional(z.string()),
      block_hash_not_like: z.optional(z.string()),
      block_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      builder_pubkey_eq: z.optional(z.string()),
      builder_pubkey_ne: z.optional(z.string()),
      builder_pubkey_contains: z.optional(z.string()),
      builder_pubkey_starts_with: z.optional(z.string()),
      builder_pubkey_ends_with: z.optional(z.string()),
      builder_pubkey_like: z.optional(z.string()),
      builder_pubkey_not_like: z.optional(z.string()),
      builder_pubkey_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      builder_pubkey_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_pubkey_eq: z.optional(z.string()),
      proposer_pubkey_ne: z.optional(z.string()),
      proposer_pubkey_contains: z.optional(z.string()),
      proposer_pubkey_starts_with: z.optional(z.string()),
      proposer_pubkey_ends_with: z.optional(z.string()),
      proposer_pubkey_like: z.optional(z.string()),
      proposer_pubkey_not_like: z.optional(z.string()),
      proposer_pubkey_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_pubkey_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_fee_recipient_eq: z.optional(z.string()),
      proposer_fee_recipient_ne: z.optional(z.string()),
      proposer_fee_recipient_contains: z.optional(z.string()),
      proposer_fee_recipient_starts_with: z.optional(z.string()),
      proposer_fee_recipient_ends_with: z.optional(z.string()),
      proposer_fee_recipient_like: z.optional(z.string()),
      proposer_fee_recipient_not_like: z.optional(z.string()),
      proposer_fee_recipient_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_fee_recipient_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      gas_limit_eq: z.optional(z.int()),
      gas_limit_ne: z.optional(z.int()),
      gas_limit_lt: z.optional(z.int()),
      gas_limit_lte: z.optional(z.int()),
      gas_limit_gt: z.optional(z.int()),
      gas_limit_gte: z.optional(z.int()),
      gas_limit_between_min: z.optional(z.int()),
      gas_limit_between_max_value: z.optional(z.int()),
      gas_limit_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      gas_limit_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      gas_used_eq: z.optional(z.int()),
      gas_used_ne: z.optional(z.int()),
      gas_used_lt: z.optional(z.int()),
      gas_used_lte: z.optional(z.int()),
      gas_used_gt: z.optional(z.int()),
      gas_used_gte: z.optional(z.int()),
      gas_used_between_min: z.optional(z.int()),
      gas_used_between_max_value: z.optional(z.int()),
      gas_used_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      gas_used_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      value_eq: z.optional(z.string()),
      value_ne: z.optional(z.string()),
      value_contains: z.optional(z.string()),
      value_starts_with: z.optional(z.string()),
      value_ends_with: z.optional(z.string()),
      value_like: z.optional(z.string()),
      value_not_like: z.optional(z.string()),
      value_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      value_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      transaction_count_eq: z.optional(z.int()),
      transaction_count_ne: z.optional(z.int()),
      transaction_count_lt: z.optional(z.int()),
      transaction_count_lte: z.optional(z.int()),
      transaction_count_gt: z.optional(z.int()),
      transaction_count_gte: z.optional(z.int()),
      transaction_count_between_min: z.optional(z.int()),
      transaction_count_between_max_value: z.optional(z.int()),
      transaction_count_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      transaction_count_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockMevHeadServiceListResponse = zListFctBlockMevHeadResponse;

export const zFctBlockMevHeadServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockMevHeadServiceGetResponse = zGetFctBlockMevHeadResponse;

export const zFctBlockProposerServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      proposer_validator_index_eq: z.optional(z.int()),
      proposer_validator_index_ne: z.optional(z.int()),
      proposer_validator_index_lt: z.optional(z.int()),
      proposer_validator_index_lte: z.optional(z.int()),
      proposer_validator_index_gt: z.optional(z.int()),
      proposer_validator_index_gte: z.optional(z.int()),
      proposer_validator_index_between_min: z.optional(z.int()),
      proposer_validator_index_between_max_value: z.optional(z.int()),
      proposer_validator_index_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      proposer_validator_index_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      proposer_pubkey_eq: z.optional(z.string()),
      proposer_pubkey_ne: z.optional(z.string()),
      proposer_pubkey_contains: z.optional(z.string()),
      proposer_pubkey_starts_with: z.optional(z.string()),
      proposer_pubkey_ends_with: z.optional(z.string()),
      proposer_pubkey_like: z.optional(z.string()),
      proposer_pubkey_not_like: z.optional(z.string()),
      proposer_pubkey_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_pubkey_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      status_eq: z.optional(z.string()),
      status_ne: z.optional(z.string()),
      status_contains: z.optional(z.string()),
      status_starts_with: z.optional(z.string()),
      status_ends_with: z.optional(z.string()),
      status_like: z.optional(z.string()),
      status_not_like: z.optional(z.string()),
      status_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      status_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockProposerServiceListResponse = zListFctBlockProposerResponse;

export const zFctBlockProposerServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockProposerServiceGetResponse = zGetFctBlockProposerResponse;

export const zFctBlockProposerEntityServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      entity_eq: z.optional(z.string()),
      entity_ne: z.optional(z.string()),
      entity_contains: z.optional(z.string()),
      entity_starts_with: z.optional(z.string()),
      entity_ends_with: z.optional(z.string()),
      entity_like: z.optional(z.string()),
      entity_not_like: z.optional(z.string()),
      entity_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      entity_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockProposerEntityServiceListResponse = zListFctBlockProposerEntityResponse;

export const zFctBlockProposerEntityServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockProposerEntityServiceGetResponse = zGetFctBlockProposerEntityResponse;

export const zFctBlockProposerHeadServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      proposer_validator_index_eq: z.optional(z.int()),
      proposer_validator_index_ne: z.optional(z.int()),
      proposer_validator_index_lt: z.optional(z.int()),
      proposer_validator_index_lte: z.optional(z.int()),
      proposer_validator_index_gt: z.optional(z.int()),
      proposer_validator_index_gte: z.optional(z.int()),
      proposer_validator_index_between_min: z.optional(z.int()),
      proposer_validator_index_between_max_value: z.optional(z.int()),
      proposer_validator_index_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      proposer_validator_index_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      proposer_pubkey_eq: z.optional(z.string()),
      proposer_pubkey_ne: z.optional(z.string()),
      proposer_pubkey_contains: z.optional(z.string()),
      proposer_pubkey_starts_with: z.optional(z.string()),
      proposer_pubkey_ends_with: z.optional(z.string()),
      proposer_pubkey_like: z.optional(z.string()),
      proposer_pubkey_not_like: z.optional(z.string()),
      proposer_pubkey_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      proposer_pubkey_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_eq: z.optional(z.string()),
      block_root_ne: z.optional(z.string()),
      block_root_contains: z.optional(z.string()),
      block_root_starts_with: z.optional(z.string()),
      block_root_ends_with: z.optional(z.string()),
      block_root_like: z.optional(z.string()),
      block_root_not_like: z.optional(z.string()),
      block_root_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_root_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctBlockProposerHeadServiceListResponse = zListFctBlockProposerHeadResponse;

export const zFctBlockProposerHeadServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctBlockProposerHeadServiceGetResponse = zGetFctBlockProposerHeadResponse;

export const zFctMevBidCountByBuilderServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      builder_pubkey_eq: z.optional(z.string()),
      builder_pubkey_ne: z.optional(z.string()),
      builder_pubkey_contains: z.optional(z.string()),
      builder_pubkey_starts_with: z.optional(z.string()),
      builder_pubkey_ends_with: z.optional(z.string()),
      builder_pubkey_like: z.optional(z.string()),
      builder_pubkey_not_like: z.optional(z.string()),
      builder_pubkey_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      builder_pubkey_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      bid_total_eq: z.optional(z.int()),
      bid_total_ne: z.optional(z.int()),
      bid_total_lt: z.optional(z.int()),
      bid_total_lte: z.optional(z.int()),
      bid_total_gt: z.optional(z.int()),
      bid_total_gte: z.optional(z.int()),
      bid_total_between_min: z.optional(z.int()),
      bid_total_between_max_value: z.optional(z.int()),
      bid_total_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      bid_total_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctMevBidCountByBuilderServiceListResponse = zListFctMevBidCountByBuilderResponse;

export const zFctMevBidCountByBuilderServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctMevBidCountByBuilderServiceGetResponse = zGetFctMevBidCountByBuilderResponse;

export const zFctMevBidCountByRelayServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      relay_name_eq: z.optional(z.string()),
      relay_name_ne: z.optional(z.string()),
      relay_name_contains: z.optional(z.string()),
      relay_name_starts_with: z.optional(z.string()),
      relay_name_ends_with: z.optional(z.string()),
      relay_name_like: z.optional(z.string()),
      relay_name_not_like: z.optional(z.string()),
      relay_name_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      relay_name_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      bid_total_eq: z.optional(z.int()),
      bid_total_ne: z.optional(z.int()),
      bid_total_lt: z.optional(z.int()),
      bid_total_lte: z.optional(z.int()),
      bid_total_gt: z.optional(z.int()),
      bid_total_gte: z.optional(z.int()),
      bid_total_between_min: z.optional(z.int()),
      bid_total_between_max_value: z.optional(z.int()),
      bid_total_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      bid_total_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctMevBidCountByRelayServiceListResponse = zListFctMevBidCountByRelayResponse;

export const zFctMevBidCountByRelayServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctMevBidCountByRelayServiceGetResponse = zGetFctMevBidCountByRelayResponse;

export const zFctMevBidHighestValueByBuilderChunked50MsServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      chunk_slot_start_diff_eq: z.optional(z.int()),
      chunk_slot_start_diff_ne: z.optional(z.int()),
      chunk_slot_start_diff_lt: z.optional(z.int()),
      chunk_slot_start_diff_lte: z.optional(z.int()),
      chunk_slot_start_diff_gt: z.optional(z.int()),
      chunk_slot_start_diff_gte: z.optional(z.int()),
      chunk_slot_start_diff_between_min: z.optional(z.int()),
      chunk_slot_start_diff_between_max_value: z.optional(z.int()),
      chunk_slot_start_diff_in_values: z.optional(z.string().check(z.regex(/^-?\d+(,-?\d+)*$/))),
      chunk_slot_start_diff_not_in_values: z.optional(z.string().check(z.regex(/^-?\d+(,-?\d+)*$/))),
      builder_pubkey_eq: z.optional(z.string()),
      builder_pubkey_ne: z.optional(z.string()),
      builder_pubkey_contains: z.optional(z.string()),
      builder_pubkey_starts_with: z.optional(z.string()),
      builder_pubkey_ends_with: z.optional(z.string()),
      builder_pubkey_like: z.optional(z.string()),
      builder_pubkey_not_like: z.optional(z.string()),
      builder_pubkey_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      builder_pubkey_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_eq: z.optional(z.int()),
      epoch_ne: z.optional(z.int()),
      epoch_lt: z.optional(z.int()),
      epoch_lte: z.optional(z.int()),
      epoch_gt: z.optional(z.int()),
      epoch_gte: z.optional(z.int()),
      epoch_between_min: z.optional(z.int()),
      epoch_between_max_value: z.optional(z.int()),
      epoch_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_eq: z.optional(z.int()),
      epoch_start_date_time_ne: z.optional(z.int()),
      epoch_start_date_time_lt: z.optional(z.int()),
      epoch_start_date_time_lte: z.optional(z.int()),
      epoch_start_date_time_gt: z.optional(z.int()),
      epoch_start_date_time_gte: z.optional(z.int()),
      epoch_start_date_time_between_min: z.optional(z.int()),
      epoch_start_date_time_between_max_value: z.optional(z.int()),
      epoch_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      epoch_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      earliest_bid_date_time_eq: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_ne: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_lt: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_lte: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_gt: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_gte: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_between_min: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_between_max_value: z.optional(z.coerce.bigint()),
      earliest_bid_date_time_in_values: z.optional(z.string().check(z.regex(/^-?\d+(,-?\d+)*$/))),
      earliest_bid_date_time_not_in_values: z.optional(z.string().check(z.regex(/^-?\d+(,-?\d+)*$/))),
      relay_names: z.optional(z.array(z.string())),
      block_hash_eq: z.optional(z.string()),
      block_hash_ne: z.optional(z.string()),
      block_hash_contains: z.optional(z.string()),
      block_hash_starts_with: z.optional(z.string()),
      block_hash_ends_with: z.optional(z.string()),
      block_hash_like: z.optional(z.string()),
      block_hash_not_like: z.optional(z.string()),
      block_hash_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_hash_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      value_eq: z.optional(z.string()),
      value_ne: z.optional(z.string()),
      value_contains: z.optional(z.string()),
      value_starts_with: z.optional(z.string()),
      value_ends_with: z.optional(z.string()),
      value_like: z.optional(z.string()),
      value_not_like: z.optional(z.string()),
      value_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      value_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctMevBidHighestValueByBuilderChunked50MsServiceListResponse =
  zListFctMevBidHighestValueByBuilderChunked50MsResponse;

export const zFctMevBidHighestValueByBuilderChunked50MsServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctMevBidHighestValueByBuilderChunked50MsServiceGetResponse =
  zGetFctMevBidHighestValueByBuilderChunked50MsResponse;

export const zFctNodeActiveLast24hServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      meta_client_name_eq: z.optional(z.string()),
      meta_client_name_ne: z.optional(z.string()),
      meta_client_name_contains: z.optional(z.string()),
      meta_client_name_starts_with: z.optional(z.string()),
      meta_client_name_ends_with: z.optional(z.string()),
      meta_client_name_like: z.optional(z.string()),
      meta_client_name_not_like: z.optional(z.string()),
      meta_client_name_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_name_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      last_seen_date_time_eq: z.optional(z.int()),
      last_seen_date_time_ne: z.optional(z.int()),
      last_seen_date_time_lt: z.optional(z.int()),
      last_seen_date_time_lte: z.optional(z.int()),
      last_seen_date_time_gt: z.optional(z.int()),
      last_seen_date_time_gte: z.optional(z.int()),
      last_seen_date_time_between_min: z.optional(z.int()),
      last_seen_date_time_between_max_value: z.optional(z.int()),
      last_seen_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      last_seen_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      username_eq: z.optional(z.string()),
      username_ne: z.optional(z.string()),
      username_contains: z.optional(z.string()),
      username_starts_with: z.optional(z.string()),
      username_ends_with: z.optional(z.string()),
      username_like: z.optional(z.string()),
      username_not_like: z.optional(z.string()),
      username_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      username_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      node_id_eq: z.optional(z.string()),
      node_id_ne: z.optional(z.string()),
      node_id_contains: z.optional(z.string()),
      node_id_starts_with: z.optional(z.string()),
      node_id_ends_with: z.optional(z.string()),
      node_id_like: z.optional(z.string()),
      node_id_not_like: z.optional(z.string()),
      node_id_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      node_id_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      classification_eq: z.optional(z.string()),
      classification_ne: z.optional(z.string()),
      classification_contains: z.optional(z.string()),
      classification_starts_with: z.optional(z.string()),
      classification_ends_with: z.optional(z.string()),
      classification_like: z.optional(z.string()),
      classification_not_like: z.optional(z.string()),
      classification_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      classification_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_version_eq: z.optional(z.string()),
      meta_client_version_ne: z.optional(z.string()),
      meta_client_version_contains: z.optional(z.string()),
      meta_client_version_starts_with: z.optional(z.string()),
      meta_client_version_ends_with: z.optional(z.string()),
      meta_client_version_like: z.optional(z.string()),
      meta_client_version_not_like: z.optional(z.string()),
      meta_client_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_implementation_eq: z.optional(z.string()),
      meta_client_implementation_ne: z.optional(z.string()),
      meta_client_implementation_contains: z.optional(z.string()),
      meta_client_implementation_starts_with: z.optional(z.string()),
      meta_client_implementation_ends_with: z.optional(z.string()),
      meta_client_implementation_like: z.optional(z.string()),
      meta_client_implementation_not_like: z.optional(z.string()),
      meta_client_implementation_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_implementation_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_city_eq: z.optional(z.string()),
      meta_client_geo_city_ne: z.optional(z.string()),
      meta_client_geo_city_contains: z.optional(z.string()),
      meta_client_geo_city_starts_with: z.optional(z.string()),
      meta_client_geo_city_ends_with: z.optional(z.string()),
      meta_client_geo_city_like: z.optional(z.string()),
      meta_client_geo_city_not_like: z.optional(z.string()),
      meta_client_geo_city_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_city_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_eq: z.optional(z.string()),
      meta_client_geo_country_ne: z.optional(z.string()),
      meta_client_geo_country_contains: z.optional(z.string()),
      meta_client_geo_country_starts_with: z.optional(z.string()),
      meta_client_geo_country_ends_with: z.optional(z.string()),
      meta_client_geo_country_like: z.optional(z.string()),
      meta_client_geo_country_not_like: z.optional(z.string()),
      meta_client_geo_country_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_code_eq: z.optional(z.string()),
      meta_client_geo_country_code_ne: z.optional(z.string()),
      meta_client_geo_country_code_contains: z.optional(z.string()),
      meta_client_geo_country_code_starts_with: z.optional(z.string()),
      meta_client_geo_country_code_ends_with: z.optional(z.string()),
      meta_client_geo_country_code_like: z.optional(z.string()),
      meta_client_geo_country_code_not_like: z.optional(z.string()),
      meta_client_geo_country_code_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_code_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_continent_code_eq: z.optional(z.string()),
      meta_client_geo_continent_code_ne: z.optional(z.string()),
      meta_client_geo_continent_code_contains: z.optional(z.string()),
      meta_client_geo_continent_code_starts_with: z.optional(z.string()),
      meta_client_geo_continent_code_ends_with: z.optional(z.string()),
      meta_client_geo_continent_code_like: z.optional(z.string()),
      meta_client_geo_continent_code_not_like: z.optional(z.string()),
      meta_client_geo_continent_code_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_continent_code_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_longitude_value: z.optional(z.number()),
      meta_client_geo_latitude_value: z.optional(z.number()),
      meta_client_geo_autonomous_system_number_eq: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_ne: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_lt: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_lte: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_gt: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_gte: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_between_min: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_between_max_value: z.optional(z.int()),
      meta_client_geo_autonomous_system_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      meta_client_geo_autonomous_system_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      meta_client_geo_autonomous_system_organization_eq: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_ne: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_contains: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_starts_with: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_ends_with: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_like: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_not_like: z.optional(z.string()),
      meta_client_geo_autonomous_system_organization_in_values: z.optional(
        z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))
      ),
      meta_client_geo_autonomous_system_organization_not_in_values: z.optional(
        z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))
      ),
      meta_consensus_version_eq: z.optional(z.string()),
      meta_consensus_version_ne: z.optional(z.string()),
      meta_consensus_version_contains: z.optional(z.string()),
      meta_consensus_version_starts_with: z.optional(z.string()),
      meta_consensus_version_ends_with: z.optional(z.string()),
      meta_consensus_version_like: z.optional(z.string()),
      meta_consensus_version_not_like: z.optional(z.string()),
      meta_consensus_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_implementation_eq: z.optional(z.string()),
      meta_consensus_implementation_ne: z.optional(z.string()),
      meta_consensus_implementation_contains: z.optional(z.string()),
      meta_consensus_implementation_starts_with: z.optional(z.string()),
      meta_consensus_implementation_ends_with: z.optional(z.string()),
      meta_consensus_implementation_like: z.optional(z.string()),
      meta_consensus_implementation_not_like: z.optional(z.string()),
      meta_consensus_implementation_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_implementation_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctNodeActiveLast24hServiceListResponse = zListFctNodeActiveLast24hResponse;

export const zFctNodeActiveLast24hServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    meta_client_name: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctNodeActiveLast24hServiceGetResponse = zGetFctNodeActiveLast24hResponse;

export const zFctPreparedBlockServiceListData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      slot_start_date_time_eq: z.optional(z.int()),
      slot_start_date_time_ne: z.optional(z.int()),
      slot_start_date_time_lt: z.optional(z.int()),
      slot_start_date_time_lte: z.optional(z.int()),
      slot_start_date_time_gt: z.optional(z.int()),
      slot_start_date_time_gte: z.optional(z.int()),
      slot_start_date_time_between_min: z.optional(z.int()),
      slot_start_date_time_between_max_value: z.optional(z.int()),
      slot_start_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_start_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_eq: z.optional(z.int()),
      slot_ne: z.optional(z.int()),
      slot_lt: z.optional(z.int()),
      slot_lte: z.optional(z.int()),
      slot_gt: z.optional(z.int()),
      slot_gte: z.optional(z.int()),
      slot_between_min: z.optional(z.int()),
      slot_between_max_value: z.optional(z.int()),
      slot_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      slot_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      meta_client_name_eq: z.optional(z.string()),
      meta_client_name_ne: z.optional(z.string()),
      meta_client_name_contains: z.optional(z.string()),
      meta_client_name_starts_with: z.optional(z.string()),
      meta_client_name_ends_with: z.optional(z.string()),
      meta_client_name_like: z.optional(z.string()),
      meta_client_name_not_like: z.optional(z.string()),
      meta_client_name_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_name_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      event_date_time_eq: z.optional(z.int()),
      event_date_time_ne: z.optional(z.int()),
      event_date_time_lt: z.optional(z.int()),
      event_date_time_lte: z.optional(z.int()),
      event_date_time_gt: z.optional(z.int()),
      event_date_time_gte: z.optional(z.int()),
      event_date_time_between_min: z.optional(z.int()),
      event_date_time_between_max_value: z.optional(z.int()),
      event_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      event_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_eq: z.optional(z.int()),
      updated_date_time_ne: z.optional(z.int()),
      updated_date_time_lt: z.optional(z.int()),
      updated_date_time_lte: z.optional(z.int()),
      updated_date_time_gt: z.optional(z.int()),
      updated_date_time_gte: z.optional(z.int()),
      updated_date_time_between_min: z.optional(z.int()),
      updated_date_time_between_max_value: z.optional(z.int()),
      updated_date_time_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      updated_date_time_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      meta_client_version_eq: z.optional(z.string()),
      meta_client_version_ne: z.optional(z.string()),
      meta_client_version_contains: z.optional(z.string()),
      meta_client_version_starts_with: z.optional(z.string()),
      meta_client_version_ends_with: z.optional(z.string()),
      meta_client_version_like: z.optional(z.string()),
      meta_client_version_not_like: z.optional(z.string()),
      meta_client_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_implementation_eq: z.optional(z.string()),
      meta_client_implementation_ne: z.optional(z.string()),
      meta_client_implementation_contains: z.optional(z.string()),
      meta_client_implementation_starts_with: z.optional(z.string()),
      meta_client_implementation_ends_with: z.optional(z.string()),
      meta_client_implementation_like: z.optional(z.string()),
      meta_client_implementation_not_like: z.optional(z.string()),
      meta_client_implementation_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_implementation_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_implementation_eq: z.optional(z.string()),
      meta_consensus_implementation_ne: z.optional(z.string()),
      meta_consensus_implementation_contains: z.optional(z.string()),
      meta_consensus_implementation_starts_with: z.optional(z.string()),
      meta_consensus_implementation_ends_with: z.optional(z.string()),
      meta_consensus_implementation_like: z.optional(z.string()),
      meta_consensus_implementation_not_like: z.optional(z.string()),
      meta_consensus_implementation_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_implementation_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_version_eq: z.optional(z.string()),
      meta_consensus_version_ne: z.optional(z.string()),
      meta_consensus_version_contains: z.optional(z.string()),
      meta_consensus_version_starts_with: z.optional(z.string()),
      meta_consensus_version_ends_with: z.optional(z.string()),
      meta_consensus_version_like: z.optional(z.string()),
      meta_consensus_version_not_like: z.optional(z.string()),
      meta_consensus_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_consensus_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_city_eq: z.optional(z.string()),
      meta_client_geo_city_ne: z.optional(z.string()),
      meta_client_geo_city_contains: z.optional(z.string()),
      meta_client_geo_city_starts_with: z.optional(z.string()),
      meta_client_geo_city_ends_with: z.optional(z.string()),
      meta_client_geo_city_like: z.optional(z.string()),
      meta_client_geo_city_not_like: z.optional(z.string()),
      meta_client_geo_city_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_city_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_eq: z.optional(z.string()),
      meta_client_geo_country_ne: z.optional(z.string()),
      meta_client_geo_country_contains: z.optional(z.string()),
      meta_client_geo_country_starts_with: z.optional(z.string()),
      meta_client_geo_country_ends_with: z.optional(z.string()),
      meta_client_geo_country_like: z.optional(z.string()),
      meta_client_geo_country_not_like: z.optional(z.string()),
      meta_client_geo_country_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_code_eq: z.optional(z.string()),
      meta_client_geo_country_code_ne: z.optional(z.string()),
      meta_client_geo_country_code_contains: z.optional(z.string()),
      meta_client_geo_country_code_starts_with: z.optional(z.string()),
      meta_client_geo_country_code_ends_with: z.optional(z.string()),
      meta_client_geo_country_code_like: z.optional(z.string()),
      meta_client_geo_country_code_not_like: z.optional(z.string()),
      meta_client_geo_country_code_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      meta_client_geo_country_code_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_version_eq: z.optional(z.string()),
      block_version_ne: z.optional(z.string()),
      block_version_contains: z.optional(z.string()),
      block_version_starts_with: z.optional(z.string()),
      block_version_ends_with: z.optional(z.string()),
      block_version_like: z.optional(z.string()),
      block_version_not_like: z.optional(z.string()),
      block_version_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_version_not_in_values: z.optional(z.string().check(z.regex(/^[^,]+(,[^,]+)*$/))),
      block_total_bytes_eq: z.optional(z.int()),
      block_total_bytes_ne: z.optional(z.int()),
      block_total_bytes_lt: z.optional(z.int()),
      block_total_bytes_lte: z.optional(z.int()),
      block_total_bytes_gt: z.optional(z.int()),
      block_total_bytes_gte: z.optional(z.int()),
      block_total_bytes_between_min: z.optional(z.int()),
      block_total_bytes_between_max_value: z.optional(z.int()),
      block_total_bytes_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_total_bytes_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_total_bytes_compressed_eq: z.optional(z.int()),
      block_total_bytes_compressed_ne: z.optional(z.int()),
      block_total_bytes_compressed_lt: z.optional(z.int()),
      block_total_bytes_compressed_lte: z.optional(z.int()),
      block_total_bytes_compressed_gt: z.optional(z.int()),
      block_total_bytes_compressed_gte: z.optional(z.int()),
      block_total_bytes_compressed_between_min: z.optional(z.int()),
      block_total_bytes_compressed_between_max_value: z.optional(z.int()),
      block_total_bytes_compressed_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      block_total_bytes_compressed_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_value_eq: z.optional(z.int()),
      execution_payload_value_ne: z.optional(z.int()),
      execution_payload_value_lt: z.optional(z.int()),
      execution_payload_value_lte: z.optional(z.int()),
      execution_payload_value_gt: z.optional(z.int()),
      execution_payload_value_gte: z.optional(z.int()),
      execution_payload_value_between_min: z.optional(z.int()),
      execution_payload_value_between_max_value: z.optional(z.int()),
      execution_payload_value_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_value_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      consensus_payload_value_eq: z.optional(z.int()),
      consensus_payload_value_ne: z.optional(z.int()),
      consensus_payload_value_lt: z.optional(z.int()),
      consensus_payload_value_lte: z.optional(z.int()),
      consensus_payload_value_gt: z.optional(z.int()),
      consensus_payload_value_gte: z.optional(z.int()),
      consensus_payload_value_between_min: z.optional(z.int()),
      consensus_payload_value_between_max_value: z.optional(z.int()),
      consensus_payload_value_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      consensus_payload_value_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_block_number_eq: z.optional(z.int()),
      execution_payload_block_number_ne: z.optional(z.int()),
      execution_payload_block_number_lt: z.optional(z.int()),
      execution_payload_block_number_lte: z.optional(z.int()),
      execution_payload_block_number_gt: z.optional(z.int()),
      execution_payload_block_number_gte: z.optional(z.int()),
      execution_payload_block_number_between_min: z.optional(z.int()),
      execution_payload_block_number_between_max_value: z.optional(z.int()),
      execution_payload_block_number_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_block_number_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_limit_eq: z.optional(z.int()),
      execution_payload_gas_limit_ne: z.optional(z.int()),
      execution_payload_gas_limit_lt: z.optional(z.int()),
      execution_payload_gas_limit_lte: z.optional(z.int()),
      execution_payload_gas_limit_gt: z.optional(z.int()),
      execution_payload_gas_limit_gte: z.optional(z.int()),
      execution_payload_gas_limit_between_min: z.optional(z.int()),
      execution_payload_gas_limit_between_max_value: z.optional(z.int()),
      execution_payload_gas_limit_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_limit_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_used_eq: z.optional(z.int()),
      execution_payload_gas_used_ne: z.optional(z.int()),
      execution_payload_gas_used_lt: z.optional(z.int()),
      execution_payload_gas_used_lte: z.optional(z.int()),
      execution_payload_gas_used_gt: z.optional(z.int()),
      execution_payload_gas_used_gte: z.optional(z.int()),
      execution_payload_gas_used_between_min: z.optional(z.int()),
      execution_payload_gas_used_between_max_value: z.optional(z.int()),
      execution_payload_gas_used_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_gas_used_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_count_eq: z.optional(z.int()),
      execution_payload_transactions_count_ne: z.optional(z.int()),
      execution_payload_transactions_count_lt: z.optional(z.int()),
      execution_payload_transactions_count_lte: z.optional(z.int()),
      execution_payload_transactions_count_gt: z.optional(z.int()),
      execution_payload_transactions_count_gte: z.optional(z.int()),
      execution_payload_transactions_count_between_min: z.optional(z.int()),
      execution_payload_transactions_count_between_max_value: z.optional(z.int()),
      execution_payload_transactions_count_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_count_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_total_bytes_eq: z.optional(z.int()),
      execution_payload_transactions_total_bytes_ne: z.optional(z.int()),
      execution_payload_transactions_total_bytes_lt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_lte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_gt: z.optional(z.int()),
      execution_payload_transactions_total_bytes_gte: z.optional(z.int()),
      execution_payload_transactions_total_bytes_between_min: z.optional(z.int()),
      execution_payload_transactions_total_bytes_between_max_value: z.optional(z.int()),
      execution_payload_transactions_total_bytes_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      execution_payload_transactions_total_bytes_not_in_values: z.optional(z.string().check(z.regex(/^\d+(,\d+)*$/))),
      page_size: z.optional(z.int()),
      page_token: z.optional(z.string()),
      order_by: z.optional(z.string()),
    })
  ),
});

/**
 * OK
 */
export const zFctPreparedBlockServiceListResponse = zListFctPreparedBlockResponse;

export const zFctPreparedBlockServiceGetData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    slot_start_date_time: z.int(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zFctPreparedBlockServiceGetResponse = zGetFctPreparedBlockResponse;
