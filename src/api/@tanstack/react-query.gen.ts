// This file is auto-generated by @hey-api/openapi-ts

import { queryOptions } from '@tanstack/react-query';

import { client } from '../client.gen';
import {
  fctAddressAccessChunked10000ServiceGet,
  fctAddressAccessChunked10000ServiceList,
  fctAddressAccessTotalServiceGet,
  fctAddressAccessTotalServiceList,
  fctAddressStorageSlotChunked10000ServiceGet,
  fctAddressStorageSlotChunked10000ServiceList,
  fctAddressStorageSlotExpiredTop100ByContractServiceGet,
  fctAddressStorageSlotExpiredTop100ByContractServiceList,
  fctAddressStorageSlotTop100ByContractServiceGet,
  fctAddressStorageSlotTop100ByContractServiceList,
  fctAddressStorageSlotTotalServiceGet,
  fctAddressStorageSlotTotalServiceList,
  fctAttestationCorrectnessByValidatorCanonicalServiceGet,
  fctAttestationCorrectnessByValidatorCanonicalServiceList,
  fctAttestationCorrectnessByValidatorHeadServiceGet,
  fctAttestationCorrectnessByValidatorHeadServiceList,
  fctAttestationCorrectnessCanonicalServiceGet,
  fctAttestationCorrectnessCanonicalServiceList,
  fctAttestationCorrectnessHeadServiceGet,
  fctAttestationCorrectnessHeadServiceList,
  fctAttestationFirstSeenChunked50MsServiceGet,
  fctAttestationFirstSeenChunked50MsServiceList,
  fctBlockBlobCountHeadServiceGet,
  fctBlockBlobCountHeadServiceList,
  fctBlockBlobCountServiceGet,
  fctBlockBlobCountServiceList,
  fctBlockBlobFirstSeenByNodeServiceGet,
  fctBlockBlobFirstSeenByNodeServiceList,
  fctBlockFirstSeenByNodeServiceGet,
  fctBlockFirstSeenByNodeServiceList,
  fctBlockHeadServiceGet,
  fctBlockHeadServiceList,
  fctBlockMevHeadServiceGet,
  fctBlockMevHeadServiceList,
  fctBlockMevServiceGet,
  fctBlockMevServiceList,
  fctBlockProposerEntityServiceGet,
  fctBlockProposerEntityServiceList,
  fctBlockProposerHeadServiceGet,
  fctBlockProposerHeadServiceList,
  fctBlockProposerServiceGet,
  fctBlockProposerServiceList,
  fctBlockServiceGet,
  fctBlockServiceList,
  fctMevBidCountByBuilderServiceGet,
  fctMevBidCountByBuilderServiceList,
  fctMevBidCountByRelayServiceGet,
  fctMevBidCountByRelayServiceList,
  fctMevBidHighestValueByBuilderChunked50MsServiceGet,
  fctMevBidHighestValueByBuilderChunked50MsServiceList,
  fctNodeActiveLast24hServiceGet,
  fctNodeActiveLast24hServiceList,
  fctPreparedBlockServiceGet,
  fctPreparedBlockServiceList,
  type Options,
} from '../sdk.gen';
import type {
  FctAddressAccessChunked10000ServiceGetData,
  FctAddressAccessChunked10000ServiceListData,
  FctAddressAccessTotalServiceGetData,
  FctAddressAccessTotalServiceListData,
  FctAddressStorageSlotChunked10000ServiceGetData,
  FctAddressStorageSlotChunked10000ServiceListData,
  FctAddressStorageSlotExpiredTop100ByContractServiceGetData,
  FctAddressStorageSlotExpiredTop100ByContractServiceListData,
  FctAddressStorageSlotTop100ByContractServiceGetData,
  FctAddressStorageSlotTop100ByContractServiceListData,
  FctAddressStorageSlotTotalServiceGetData,
  FctAddressStorageSlotTotalServiceListData,
  FctAttestationCorrectnessByValidatorCanonicalServiceGetData,
  FctAttestationCorrectnessByValidatorCanonicalServiceListData,
  FctAttestationCorrectnessByValidatorHeadServiceGetData,
  FctAttestationCorrectnessByValidatorHeadServiceListData,
  FctAttestationCorrectnessCanonicalServiceGetData,
  FctAttestationCorrectnessCanonicalServiceListData,
  FctAttestationCorrectnessHeadServiceGetData,
  FctAttestationCorrectnessHeadServiceListData,
  FctAttestationFirstSeenChunked50MsServiceGetData,
  FctAttestationFirstSeenChunked50MsServiceListData,
  FctBlockBlobCountHeadServiceGetData,
  FctBlockBlobCountHeadServiceListData,
  FctBlockBlobCountServiceGetData,
  FctBlockBlobCountServiceListData,
  FctBlockBlobFirstSeenByNodeServiceGetData,
  FctBlockBlobFirstSeenByNodeServiceListData,
  FctBlockFirstSeenByNodeServiceGetData,
  FctBlockFirstSeenByNodeServiceListData,
  FctBlockHeadServiceGetData,
  FctBlockHeadServiceListData,
  FctBlockMevHeadServiceGetData,
  FctBlockMevHeadServiceListData,
  FctBlockMevServiceGetData,
  FctBlockMevServiceListData,
  FctBlockProposerEntityServiceGetData,
  FctBlockProposerEntityServiceListData,
  FctBlockProposerHeadServiceGetData,
  FctBlockProposerHeadServiceListData,
  FctBlockProposerServiceGetData,
  FctBlockProposerServiceListData,
  FctBlockServiceGetData,
  FctBlockServiceListData,
  FctMevBidCountByBuilderServiceGetData,
  FctMevBidCountByBuilderServiceListData,
  FctMevBidCountByRelayServiceGetData,
  FctMevBidCountByRelayServiceListData,
  FctMevBidHighestValueByBuilderChunked50MsServiceGetData,
  FctMevBidHighestValueByBuilderChunked50MsServiceListData,
  FctNodeActiveLast24hServiceGetData,
  FctNodeActiveLast24hServiceListData,
  FctPreparedBlockServiceGetData,
  FctPreparedBlockServiceListData,
} from '../types.gen';

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const fctAddressAccessChunked10000ServiceListQueryKey = (
  options?: Options<FctAddressAccessChunked10000ServiceListData>
) => createQueryKey('fctAddressAccessChunked10000ServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressAccessChunked10000ServiceListOptions = (
  options?: Options<FctAddressAccessChunked10000ServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressAccessChunked10000ServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressAccessChunked10000ServiceListQueryKey(options),
  });
};

export const fctAddressAccessChunked10000ServiceGetQueryKey = (
  options: Options<FctAddressAccessChunked10000ServiceGetData>
) => createQueryKey('fctAddressAccessChunked10000ServiceGet', options);

/**
 * Get record
 * Retrieve a single record by chunk_start_block_number
 */
export const fctAddressAccessChunked10000ServiceGetOptions = (
  options: Options<FctAddressAccessChunked10000ServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressAccessChunked10000ServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressAccessChunked10000ServiceGetQueryKey(options),
  });
};

export const fctAddressAccessTotalServiceListQueryKey = (options?: Options<FctAddressAccessTotalServiceListData>) =>
  createQueryKey('fctAddressAccessTotalServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressAccessTotalServiceListOptions = (options?: Options<FctAddressAccessTotalServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressAccessTotalServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressAccessTotalServiceListQueryKey(options),
  });
};

export const fctAddressAccessTotalServiceGetQueryKey = (options: Options<FctAddressAccessTotalServiceGetData>) =>
  createQueryKey('fctAddressAccessTotalServiceGet', options);

/**
 * Get record
 * Retrieve a single record by updated_date_time
 */
export const fctAddressAccessTotalServiceGetOptions = (options: Options<FctAddressAccessTotalServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressAccessTotalServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressAccessTotalServiceGetQueryKey(options),
  });
};

export const fctAddressStorageSlotChunked10000ServiceListQueryKey = (
  options?: Options<FctAddressStorageSlotChunked10000ServiceListData>
) => createQueryKey('fctAddressStorageSlotChunked10000ServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressStorageSlotChunked10000ServiceListOptions = (
  options?: Options<FctAddressStorageSlotChunked10000ServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressStorageSlotChunked10000ServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressStorageSlotChunked10000ServiceListQueryKey(options),
  });
};

export const fctAddressStorageSlotChunked10000ServiceGetQueryKey = (
  options: Options<FctAddressStorageSlotChunked10000ServiceGetData>
) => createQueryKey('fctAddressStorageSlotChunked10000ServiceGet', options);

/**
 * Get record
 * Retrieve a single record by chunk_start_block_number
 */
export const fctAddressStorageSlotChunked10000ServiceGetOptions = (
  options: Options<FctAddressStorageSlotChunked10000ServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressStorageSlotChunked10000ServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressStorageSlotChunked10000ServiceGetQueryKey(options),
  });
};

export const fctAddressStorageSlotExpiredTop100ByContractServiceListQueryKey = (
  options?: Options<FctAddressStorageSlotExpiredTop100ByContractServiceListData>
) => createQueryKey('fctAddressStorageSlotExpiredTop100ByContractServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressStorageSlotExpiredTop100ByContractServiceListOptions = (
  options?: Options<FctAddressStorageSlotExpiredTop100ByContractServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressStorageSlotExpiredTop100ByContractServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressStorageSlotExpiredTop100ByContractServiceListQueryKey(options),
  });
};

export const fctAddressStorageSlotExpiredTop100ByContractServiceGetQueryKey = (
  options: Options<FctAddressStorageSlotExpiredTop100ByContractServiceGetData>
) => createQueryKey('fctAddressStorageSlotExpiredTop100ByContractServiceGet', options);

/**
 * Get record
 * Retrieve a single record by rank
 */
export const fctAddressStorageSlotExpiredTop100ByContractServiceGetOptions = (
  options: Options<FctAddressStorageSlotExpiredTop100ByContractServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressStorageSlotExpiredTop100ByContractServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressStorageSlotExpiredTop100ByContractServiceGetQueryKey(options),
  });
};

export const fctAddressStorageSlotTop100ByContractServiceListQueryKey = (
  options?: Options<FctAddressStorageSlotTop100ByContractServiceListData>
) => createQueryKey('fctAddressStorageSlotTop100ByContractServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressStorageSlotTop100ByContractServiceListOptions = (
  options?: Options<FctAddressStorageSlotTop100ByContractServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressStorageSlotTop100ByContractServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressStorageSlotTop100ByContractServiceListQueryKey(options),
  });
};

export const fctAddressStorageSlotTop100ByContractServiceGetQueryKey = (
  options: Options<FctAddressStorageSlotTop100ByContractServiceGetData>
) => createQueryKey('fctAddressStorageSlotTop100ByContractServiceGet', options);

/**
 * Get record
 * Retrieve a single record by rank
 */
export const fctAddressStorageSlotTop100ByContractServiceGetOptions = (
  options: Options<FctAddressStorageSlotTop100ByContractServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressStorageSlotTop100ByContractServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressStorageSlotTop100ByContractServiceGetQueryKey(options),
  });
};

export const fctAddressStorageSlotTotalServiceListQueryKey = (
  options?: Options<FctAddressStorageSlotTotalServiceListData>
) => createQueryKey('fctAddressStorageSlotTotalServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAddressStorageSlotTotalServiceListOptions = (
  options?: Options<FctAddressStorageSlotTotalServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressStorageSlotTotalServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressStorageSlotTotalServiceListQueryKey(options),
  });
};

export const fctAddressStorageSlotTotalServiceGetQueryKey = (
  options: Options<FctAddressStorageSlotTotalServiceGetData>
) => createQueryKey('fctAddressStorageSlotTotalServiceGet', options);

/**
 * Get record
 * Retrieve a single record by updated_date_time
 */
export const fctAddressStorageSlotTotalServiceGetOptions = (
  options: Options<FctAddressStorageSlotTotalServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAddressStorageSlotTotalServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAddressStorageSlotTotalServiceGetQueryKey(options),
  });
};

export const fctAttestationCorrectnessByValidatorCanonicalServiceListQueryKey = (
  options?: Options<FctAttestationCorrectnessByValidatorCanonicalServiceListData>
) => createQueryKey('fctAttestationCorrectnessByValidatorCanonicalServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationCorrectnessByValidatorCanonicalServiceListOptions = (
  options?: Options<FctAttestationCorrectnessByValidatorCanonicalServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationCorrectnessByValidatorCanonicalServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationCorrectnessByValidatorCanonicalServiceListQueryKey(options),
  });
};

export const fctAttestationCorrectnessByValidatorCanonicalServiceGetQueryKey = (
  options: Options<FctAttestationCorrectnessByValidatorCanonicalServiceGetData>
) => createQueryKey('fctAttestationCorrectnessByValidatorCanonicalServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationCorrectnessByValidatorCanonicalServiceGetOptions = (
  options: Options<FctAttestationCorrectnessByValidatorCanonicalServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationCorrectnessByValidatorCanonicalServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationCorrectnessByValidatorCanonicalServiceGetQueryKey(options),
  });
};

export const fctAttestationCorrectnessByValidatorHeadServiceListQueryKey = (
  options?: Options<FctAttestationCorrectnessByValidatorHeadServiceListData>
) => createQueryKey('fctAttestationCorrectnessByValidatorHeadServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationCorrectnessByValidatorHeadServiceListOptions = (
  options?: Options<FctAttestationCorrectnessByValidatorHeadServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationCorrectnessByValidatorHeadServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationCorrectnessByValidatorHeadServiceListQueryKey(options),
  });
};

export const fctAttestationCorrectnessByValidatorHeadServiceGetQueryKey = (
  options: Options<FctAttestationCorrectnessByValidatorHeadServiceGetData>
) => createQueryKey('fctAttestationCorrectnessByValidatorHeadServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationCorrectnessByValidatorHeadServiceGetOptions = (
  options: Options<FctAttestationCorrectnessByValidatorHeadServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationCorrectnessByValidatorHeadServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationCorrectnessByValidatorHeadServiceGetQueryKey(options),
  });
};

export const fctAttestationCorrectnessCanonicalServiceListQueryKey = (
  options?: Options<FctAttestationCorrectnessCanonicalServiceListData>
) => createQueryKey('fctAttestationCorrectnessCanonicalServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationCorrectnessCanonicalServiceListOptions = (
  options?: Options<FctAttestationCorrectnessCanonicalServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationCorrectnessCanonicalServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationCorrectnessCanonicalServiceListQueryKey(options),
  });
};

export const fctAttestationCorrectnessCanonicalServiceGetQueryKey = (
  options: Options<FctAttestationCorrectnessCanonicalServiceGetData>
) => createQueryKey('fctAttestationCorrectnessCanonicalServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationCorrectnessCanonicalServiceGetOptions = (
  options: Options<FctAttestationCorrectnessCanonicalServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationCorrectnessCanonicalServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationCorrectnessCanonicalServiceGetQueryKey(options),
  });
};

export const fctAttestationCorrectnessHeadServiceListQueryKey = (
  options?: Options<FctAttestationCorrectnessHeadServiceListData>
) => createQueryKey('fctAttestationCorrectnessHeadServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationCorrectnessHeadServiceListOptions = (
  options?: Options<FctAttestationCorrectnessHeadServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationCorrectnessHeadServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationCorrectnessHeadServiceListQueryKey(options),
  });
};

export const fctAttestationCorrectnessHeadServiceGetQueryKey = (
  options: Options<FctAttestationCorrectnessHeadServiceGetData>
) => createQueryKey('fctAttestationCorrectnessHeadServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationCorrectnessHeadServiceGetOptions = (
  options: Options<FctAttestationCorrectnessHeadServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationCorrectnessHeadServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationCorrectnessHeadServiceGetQueryKey(options),
  });
};

export const fctAttestationFirstSeenChunked50MsServiceListQueryKey = (
  options?: Options<FctAttestationFirstSeenChunked50MsServiceListData>
) => createQueryKey('fctAttestationFirstSeenChunked50MsServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctAttestationFirstSeenChunked50MsServiceListOptions = (
  options?: Options<FctAttestationFirstSeenChunked50MsServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationFirstSeenChunked50MsServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationFirstSeenChunked50MsServiceListQueryKey(options),
  });
};

export const fctAttestationFirstSeenChunked50MsServiceGetQueryKey = (
  options: Options<FctAttestationFirstSeenChunked50MsServiceGetData>
) => createQueryKey('fctAttestationFirstSeenChunked50MsServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctAttestationFirstSeenChunked50MsServiceGetOptions = (
  options: Options<FctAttestationFirstSeenChunked50MsServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctAttestationFirstSeenChunked50MsServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctAttestationFirstSeenChunked50MsServiceGetQueryKey(options),
  });
};

export const fctBlockServiceListQueryKey = (options?: Options<FctBlockServiceListData>) =>
  createQueryKey('fctBlockServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockServiceListOptions = (options?: Options<FctBlockServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockServiceListQueryKey(options),
  });
};

export const fctBlockServiceGetQueryKey = (options: Options<FctBlockServiceGetData>) =>
  createQueryKey('fctBlockServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockServiceGetOptions = (options: Options<FctBlockServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockServiceGetQueryKey(options),
  });
};

export const fctBlockBlobCountServiceListQueryKey = (options?: Options<FctBlockBlobCountServiceListData>) =>
  createQueryKey('fctBlockBlobCountServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockBlobCountServiceListOptions = (options?: Options<FctBlockBlobCountServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockBlobCountServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockBlobCountServiceListQueryKey(options),
  });
};

export const fctBlockBlobCountServiceGetQueryKey = (options: Options<FctBlockBlobCountServiceGetData>) =>
  createQueryKey('fctBlockBlobCountServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockBlobCountServiceGetOptions = (options: Options<FctBlockBlobCountServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockBlobCountServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockBlobCountServiceGetQueryKey(options),
  });
};

export const fctBlockBlobCountHeadServiceListQueryKey = (options?: Options<FctBlockBlobCountHeadServiceListData>) =>
  createQueryKey('fctBlockBlobCountHeadServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockBlobCountHeadServiceListOptions = (options?: Options<FctBlockBlobCountHeadServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockBlobCountHeadServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockBlobCountHeadServiceListQueryKey(options),
  });
};

export const fctBlockBlobCountHeadServiceGetQueryKey = (options: Options<FctBlockBlobCountHeadServiceGetData>) =>
  createQueryKey('fctBlockBlobCountHeadServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockBlobCountHeadServiceGetOptions = (options: Options<FctBlockBlobCountHeadServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockBlobCountHeadServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockBlobCountHeadServiceGetQueryKey(options),
  });
};

export const fctBlockBlobFirstSeenByNodeServiceListQueryKey = (
  options?: Options<FctBlockBlobFirstSeenByNodeServiceListData>
) => createQueryKey('fctBlockBlobFirstSeenByNodeServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockBlobFirstSeenByNodeServiceListOptions = (
  options?: Options<FctBlockBlobFirstSeenByNodeServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockBlobFirstSeenByNodeServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockBlobFirstSeenByNodeServiceListQueryKey(options),
  });
};

export const fctBlockBlobFirstSeenByNodeServiceGetQueryKey = (
  options: Options<FctBlockBlobFirstSeenByNodeServiceGetData>
) => createQueryKey('fctBlockBlobFirstSeenByNodeServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockBlobFirstSeenByNodeServiceGetOptions = (
  options: Options<FctBlockBlobFirstSeenByNodeServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockBlobFirstSeenByNodeServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockBlobFirstSeenByNodeServiceGetQueryKey(options),
  });
};

export const fctBlockFirstSeenByNodeServiceListQueryKey = (options?: Options<FctBlockFirstSeenByNodeServiceListData>) =>
  createQueryKey('fctBlockFirstSeenByNodeServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockFirstSeenByNodeServiceListOptions = (
  options?: Options<FctBlockFirstSeenByNodeServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockFirstSeenByNodeServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockFirstSeenByNodeServiceListQueryKey(options),
  });
};

export const fctBlockFirstSeenByNodeServiceGetQueryKey = (options: Options<FctBlockFirstSeenByNodeServiceGetData>) =>
  createQueryKey('fctBlockFirstSeenByNodeServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockFirstSeenByNodeServiceGetOptions = (options: Options<FctBlockFirstSeenByNodeServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockFirstSeenByNodeServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockFirstSeenByNodeServiceGetQueryKey(options),
  });
};

export const fctBlockHeadServiceListQueryKey = (options?: Options<FctBlockHeadServiceListData>) =>
  createQueryKey('fctBlockHeadServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockHeadServiceListOptions = (options?: Options<FctBlockHeadServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockHeadServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockHeadServiceListQueryKey(options),
  });
};

export const fctBlockHeadServiceGetQueryKey = (options: Options<FctBlockHeadServiceGetData>) =>
  createQueryKey('fctBlockHeadServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockHeadServiceGetOptions = (options: Options<FctBlockHeadServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockHeadServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockHeadServiceGetQueryKey(options),
  });
};

export const fctBlockMevServiceListQueryKey = (options?: Options<FctBlockMevServiceListData>) =>
  createQueryKey('fctBlockMevServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockMevServiceListOptions = (options?: Options<FctBlockMevServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockMevServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockMevServiceListQueryKey(options),
  });
};

export const fctBlockMevServiceGetQueryKey = (options: Options<FctBlockMevServiceGetData>) =>
  createQueryKey('fctBlockMevServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockMevServiceGetOptions = (options: Options<FctBlockMevServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockMevServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockMevServiceGetQueryKey(options),
  });
};

export const fctBlockMevHeadServiceListQueryKey = (options?: Options<FctBlockMevHeadServiceListData>) =>
  createQueryKey('fctBlockMevHeadServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockMevHeadServiceListOptions = (options?: Options<FctBlockMevHeadServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockMevHeadServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockMevHeadServiceListQueryKey(options),
  });
};

export const fctBlockMevHeadServiceGetQueryKey = (options: Options<FctBlockMevHeadServiceGetData>) =>
  createQueryKey('fctBlockMevHeadServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockMevHeadServiceGetOptions = (options: Options<FctBlockMevHeadServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockMevHeadServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockMevHeadServiceGetQueryKey(options),
  });
};

export const fctBlockProposerServiceListQueryKey = (options?: Options<FctBlockProposerServiceListData>) =>
  createQueryKey('fctBlockProposerServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockProposerServiceListOptions = (options?: Options<FctBlockProposerServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockProposerServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockProposerServiceListQueryKey(options),
  });
};

export const fctBlockProposerServiceGetQueryKey = (options: Options<FctBlockProposerServiceGetData>) =>
  createQueryKey('fctBlockProposerServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockProposerServiceGetOptions = (options: Options<FctBlockProposerServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockProposerServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockProposerServiceGetQueryKey(options),
  });
};

export const fctBlockProposerEntityServiceListQueryKey = (options?: Options<FctBlockProposerEntityServiceListData>) =>
  createQueryKey('fctBlockProposerEntityServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockProposerEntityServiceListOptions = (options?: Options<FctBlockProposerEntityServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockProposerEntityServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockProposerEntityServiceListQueryKey(options),
  });
};

export const fctBlockProposerEntityServiceGetQueryKey = (options: Options<FctBlockProposerEntityServiceGetData>) =>
  createQueryKey('fctBlockProposerEntityServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockProposerEntityServiceGetOptions = (options: Options<FctBlockProposerEntityServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockProposerEntityServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockProposerEntityServiceGetQueryKey(options),
  });
};

export const fctBlockProposerHeadServiceListQueryKey = (options?: Options<FctBlockProposerHeadServiceListData>) =>
  createQueryKey('fctBlockProposerHeadServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctBlockProposerHeadServiceListOptions = (options?: Options<FctBlockProposerHeadServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockProposerHeadServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockProposerHeadServiceListQueryKey(options),
  });
};

export const fctBlockProposerHeadServiceGetQueryKey = (options: Options<FctBlockProposerHeadServiceGetData>) =>
  createQueryKey('fctBlockProposerHeadServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctBlockProposerHeadServiceGetOptions = (options: Options<FctBlockProposerHeadServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctBlockProposerHeadServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctBlockProposerHeadServiceGetQueryKey(options),
  });
};

export const fctMevBidCountByBuilderServiceListQueryKey = (options?: Options<FctMevBidCountByBuilderServiceListData>) =>
  createQueryKey('fctMevBidCountByBuilderServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctMevBidCountByBuilderServiceListOptions = (
  options?: Options<FctMevBidCountByBuilderServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctMevBidCountByBuilderServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctMevBidCountByBuilderServiceListQueryKey(options),
  });
};

export const fctMevBidCountByBuilderServiceGetQueryKey = (options: Options<FctMevBidCountByBuilderServiceGetData>) =>
  createQueryKey('fctMevBidCountByBuilderServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctMevBidCountByBuilderServiceGetOptions = (options: Options<FctMevBidCountByBuilderServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctMevBidCountByBuilderServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctMevBidCountByBuilderServiceGetQueryKey(options),
  });
};

export const fctMevBidCountByRelayServiceListQueryKey = (options?: Options<FctMevBidCountByRelayServiceListData>) =>
  createQueryKey('fctMevBidCountByRelayServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctMevBidCountByRelayServiceListOptions = (options?: Options<FctMevBidCountByRelayServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctMevBidCountByRelayServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctMevBidCountByRelayServiceListQueryKey(options),
  });
};

export const fctMevBidCountByRelayServiceGetQueryKey = (options: Options<FctMevBidCountByRelayServiceGetData>) =>
  createQueryKey('fctMevBidCountByRelayServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctMevBidCountByRelayServiceGetOptions = (options: Options<FctMevBidCountByRelayServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctMevBidCountByRelayServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctMevBidCountByRelayServiceGetQueryKey(options),
  });
};

export const fctMevBidHighestValueByBuilderChunked50MsServiceListQueryKey = (
  options?: Options<FctMevBidHighestValueByBuilderChunked50MsServiceListData>
) => createQueryKey('fctMevBidHighestValueByBuilderChunked50MsServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctMevBidHighestValueByBuilderChunked50MsServiceListOptions = (
  options?: Options<FctMevBidHighestValueByBuilderChunked50MsServiceListData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctMevBidHighestValueByBuilderChunked50MsServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctMevBidHighestValueByBuilderChunked50MsServiceListQueryKey(options),
  });
};

export const fctMevBidHighestValueByBuilderChunked50MsServiceGetQueryKey = (
  options: Options<FctMevBidHighestValueByBuilderChunked50MsServiceGetData>
) => createQueryKey('fctMevBidHighestValueByBuilderChunked50MsServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctMevBidHighestValueByBuilderChunked50MsServiceGetOptions = (
  options: Options<FctMevBidHighestValueByBuilderChunked50MsServiceGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctMevBidHighestValueByBuilderChunked50MsServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctMevBidHighestValueByBuilderChunked50MsServiceGetQueryKey(options),
  });
};

export const fctNodeActiveLast24hServiceListQueryKey = (options?: Options<FctNodeActiveLast24hServiceListData>) =>
  createQueryKey('fctNodeActiveLast24hServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctNodeActiveLast24hServiceListOptions = (options?: Options<FctNodeActiveLast24hServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctNodeActiveLast24hServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctNodeActiveLast24hServiceListQueryKey(options),
  });
};

export const fctNodeActiveLast24hServiceGetQueryKey = (options: Options<FctNodeActiveLast24hServiceGetData>) =>
  createQueryKey('fctNodeActiveLast24hServiceGet', options);

/**
 * Get record
 * Retrieve a single record by meta_client_name
 */
export const fctNodeActiveLast24hServiceGetOptions = (options: Options<FctNodeActiveLast24hServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctNodeActiveLast24hServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctNodeActiveLast24hServiceGetQueryKey(options),
  });
};

export const fctPreparedBlockServiceListQueryKey = (options?: Options<FctPreparedBlockServiceListData>) =>
  createQueryKey('fctPreparedBlockServiceList', options);

/**
 * List records
 * Retrieve paginated results with optional filtering
 */
export const fctPreparedBlockServiceListOptions = (options?: Options<FctPreparedBlockServiceListData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctPreparedBlockServiceList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctPreparedBlockServiceListQueryKey(options),
  });
};

export const fctPreparedBlockServiceGetQueryKey = (options: Options<FctPreparedBlockServiceGetData>) =>
  createQueryKey('fctPreparedBlockServiceGet', options);

/**
 * Get record
 * Retrieve a single record by slot_start_date_time
 */
export const fctPreparedBlockServiceGetOptions = (options: Options<FctPreparedBlockServiceGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await fctPreparedBlockServiceGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: fctPreparedBlockServiceGetQueryKey(options),
  });
};
