---
description: Frontend UI System Rules
globs: *frontend*
alwaysApply: false
---
# UI System Rules

## Important Note
- When implementing new reusable patterns, design principles, or best practices, add them to this file
- This file should evolve organically as we discover better ways to do things
- Document any decisions that would be useful for future implementations
- The frontend is already running a http://localhost:5173 -- don't try and run the dev server

## Color System
- Colors are defined in semantic layers:
  1. Text hierarchy:
    - text-primary: Main text content
    - text-secondary: Supporting text
    - text-tertiary: Less important text
    - text-muted: Subdued text

  2. Interactive/State colors:
    - text-accent: Primary call to action/highlights
    - text-accent-secondary: Secondary highlights
    - text-accent-tertiary: Tertiary highlights
    - text-success: Success states
    - text-warning: Warning/caution states
    - text-error: Error/danger states

  3. Background colors:
    - bg-base: Main application background
    - bg-surface: Card/container background
    - bg-surface-raised: Elevated surface
    - bg-hover: Hover state background
    - bg-active: Active/pressed state background

  4. Border colors:
    - border-subtle: Subtle separators
    - border-default: Standard borders
    - border-prominent: Emphasized borders

- Never use raw color values in components
- Always use semantic color classes
- Maintain consistent opacity values:
  - 100%: Full opacity
  - 85%: Secondary text
  - 70%: Tertiary text
  - 50%: Muted text
  - 30%: Prominent borders
  - 20%: Default borders
  - 10%: Subtle borders
  - 5%: Hover backgrounds

## Typography
- Font families:
  - `font-sans` (Orbitron): Use for all headings (h1-h6) and brand elements
  - `font-mono` (JetBrains Mono): Use for all body text, data, and navigation
- Font weights:
  - Headings: `font-bold` or `font-black` for extra emphasis
  - Body: `font-normal` for regular text, `font-medium` for emphasis
- Font sizes:
  - text-xs: Small labels (12px)
  - text-sm: Body text (14px)
  - text-base: Default size (16px)
  - text-lg/text-xl: Section headers (18px/20px)
  - text-2xl+: Page headers (24px+)

## Common Patterns

### Section Types

1.  **Page Header (Legacy/Specific Use):**
    *   **Note:** This large, centered header pattern consumes significant vertical space. Prefer the `Integrated Contextual Header` for most data-display and content pages. Reserve this pattern for landing pages or specific scenarios requiring a prominent, isolated title.
    ```tsx
    <div className="relative mb-12">
      <div className="absolute inset-0 flex items-center">
        <div className="w-full h-px bg-gradient-to-r from-transparent via-primary/20 to-transparent" />
      </div>
      <div className="relative flex justify-center">
        <div className="px-4 bg-base">
          <h1 className="text-3xl md:text-4xl font-sans font-black text-primary">
            Page Title
          </h1>
        </div>
      </div>
    </div>
    ```

2.  **Integrated Contextual Header (Preferred):**
    *   **Purpose:** To provide essential page context (title, description, controls) with minimal vertical footprint, maximizing space for primary content. Placed directly above or alongside the main interactive elements.
    *   **Structure:** A compact container holding:
        *   Page Title (e.g., `h2` or `h3`).
        *   Brief Description (optional, potentially toggleable).
        *   Key Actions/Controls (e.g., view mode tabs, refresh buttons).
    *   **Layout Options:**
        *   *Compact Row:* A single row spanning the content area width.
        *   *Sidebar Integration:* Place context in a sidebar adjacent to the main content (requires adjusting content width).
    *   **Example (Conceptual - Compact Row):**
    ```tsx
    <div className="mb-6 p-4 bg-surface/50 rounded-lg border border-subtle">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        {/* Left: Title & Description */}
        <div>
          <h2 className="text-xl font-sans font-bold text-primary mb-1">Page Title</h2>
          <p className="text-sm font-mono text-secondary">Brief page description.</p>
        </div>
        {/* Right: Controls/Actions */}
        <div className="flex items-center gap-2">
          {/* e.g., View Mode Tabs, Refresh Button */}
        </div>
      </div>
    </div>
    ```

3.  **Major Section:**
    ```tsx
    <section className="mb-16">
      <h2 className="text-2xl font-sans font-bold text-primary mb-6">
        Section Title
      </h2>
      <div className="space-y-4">
        {/* Content */}
      </div>
    </section>
    ```

4.  **Content Groups:**
    *   **Note:** The full-width description `Card` previously used after the legacy `Page Header` should generally be replaced or integrated into the `Integrated Contextual Header` or specific content sections.
    ```tsx
    {/* Parent Container */}
    <div className="backdrop-blur-sm rounded-lg bg-surface/80">
      {/* Content Groups */}
      <div className="space-y-4">
        {/* Group 1 */}
        <div className="p-4 border-b border-subtle/30">
          <h3 className="text-xl font-sans font-bold mb-2 text-primary">Group 1</h3>
          <p className="text-sm font-mono text-tertiary">Content</p>
        </div>
        {/* Group 2 */}
        <div className="p-4">
          <h3 className="text-xl font-sans font-bold mb-2 text-primary">Group 2</h3>
          <p className="text-sm font-mono text-tertiary">Content</p>
        </div>
      </div>
    </div>
    ```

### Chart Standards
1. Axes:
- Font size: 12px for ticks, 14px for labels
- Labels: Inside axes
- X-axis: Bottom-aligned, -45Â° angle for dates
- Y-axis: Left-aligned, vertical text
- Left margin: 60px minimum to accommodate Y-axis label

2. Series Table:
- Position: Right side of chart (25% width)
- Shows series name and last value only
- Min/avg/max values shown in tooltip on hover
- Compact layout with small text (text-xs)
- Small color indicators (2x2px)

3. Chart Interactions:
- Click legend item: Toggle between showing only that item or showing all
- Shift+click: Toggle individual items while keeping others unchanged
- Hidden items: Remain visible at 20% opacity
- Hover states on all interactive elements

4. Chart Styling:
- Lines:
  - Type: monotone
  - Stroke width: 2px
  - No dots
  - Full opacity (1) when active
  - 20% opacity when hidden
- Tooltip:
  - Use bg-surface for background
  - Use border-default for border
  - Rounded corners (rounded-lg)
- Reference Lines:
  - Dashed style (5 2)
  - 2px width

5. Chart Percentiles:
- Use semantic colors for percentiles:
  - Maximum: text-error
  - P95: text-warning
  - P75: text-accent-secondary
  - P50/Median: text-primary
  - P25: text-accent-tertiary
  - P05: text-muted
  - Minimum: text-tertiary

## Content Spacing
- Use consistent spacing scale:
  - mb-2: Minimal separation (e.g., between related items)
  - mb-4: Standard separation (e.g., between paragraphs)
  - mb-6: Medium separation (e.g., between subsections)
  - mb-8: Large separation (e.g., between related sections)
  - mb-12: Extra large separation (e.g., after legacy page headers)
  - mb-16: Maximum separation (e.g., between major sections)
- Use space-y-{n} for consistent vertical spacing between children

## Best Practices
1. Always use semantic color classes instead of raw colors
2. Maintain consistent spacing with Tailwind's spacing scale
3. Use the predefined animations for interactive elements
4. Use opacity variants for creating depth
5. Apply consistent blur effects for layering
6. Maintain text hierarchy using semantic classes
8. Use proper mobile navigation patterns with overlays
9. Ensure smooth transitions between states
10. Use semantic HTML elements
11. Ensure interactive elements have proper focus states
12. Maintain WCAG 2.1 compliant contrast ratios
13. **Prefer the `Integrated Contextual Header` pattern over the legacy `Page Header` and separate description cards for most content pages to maximize vertical space.**

# Frontend UI System Rules

## API Client Usage in Components

When using the LabAPI client in components:

1. Use the singleton pattern - import from the API module:
   ```typescript
   import { getLabApiClient } from '../api';
   ```

2. Call API methods inside React hooks or event handlers:
   ```typescript
   // In a useEffect or similar hook:
   useEffect(() => {
     const fetchData = async () => {
       const client = await getLabApiClient();
       const request = new SomeRequest({ param: "value" });
       const response = await client.someMethod(request);
       // Process response...
     };

     fetchData().catch(console.error);
   }, []);
   ```

3. Handle loading and error states:
   ```typescript
   const [data, setData] = useState(null);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState(null);

   useEffect(() => {
     const fetchData = async () => {
       try {
         setLoading(true);
         const client = await getLabApiClient();
         const response = await client.someMethod(request);
         setData(response);
       } catch (err) {
         setError(err);
         console.error('API error:', err);
       } finally {
         setLoading(false);
       }
     };

     fetchData();
   }, []);
   ```

4. Use custom hooks for repeated API calls:
   ```typescript
   function useLabApiMethod(methodFn, requestData, dependencies = []) {
     const [data, setData] = useState(null);
     const [loading, setLoading] = useState(true);
     const [error, setError] = useState(null);

     useEffect(() => {
       const callApi = async () => {
         try {
           setLoading(true);
           const client = await getLabApiClient();
           const response = await methodFn(client, requestData);
           setData(response);
         } catch (err) {
           setError(err);
         } finally {
           setLoading(false);
         }
       };

       callApi();
     }, dependencies);

     return { data, loading, error };
   }
   ```

## UI Component Guidelines

5. Follow existing design patterns for data display and user interaction.
6. Maintain consistent loading and error states across components.
7. Use TypeScript for all new components and API interactions.
8. **Card Component Usage Guidelines**

   ### Standard Card vs. FeatureCard

   The codebase uses two primary card components that serve different purposes:

   #### Standard Card Component
   - **Usage:** For general content, data display, or information containers
   - **When to use:** 
     - For most dashboard screens
     - When displaying dense information or data
     - For administrative interfaces
     - When many cards need to be shown in a grid or list
   - **Example:** Dashboard widgets, data tables, form containers

   ```tsx
   import { Card, CardBody } from '../components/common/Card';

   <Card>
     <CardBody>
       <h3>Card Title</h3>
       <p>Content goes here</p>
     </CardBody>
   </Card>
   ```

   #### FeatureCard Component
   - **Usage:** For highlighted features, promotional content, or key offerings
   - **When to use:**
     - On landing or marketing pages
     - When showcasing key features that need visual impact
     - For product or service cards that benefit from visual differentiation
     - On pages where drawing visual attention to specific options is desired
   - **When NOT to use:**
     - For regular data display or dense information (use the standard Card component)
     - When multiple cards are needed in tight layouts
     - For administrative interfaces or data-heavy applications
     - When performance is a concern (animations can be costly)

   ```tsx
   import FeatureCard from '../components/common/FeatureCard';

   <FeatureCard
     title="Feature Name"
     subtitle="Category"
     description="This feature does something amazing."
     logo="/path/to/logo.png" // OR icon={<YourIcon />}
     href="/feature-details"
     accentColor={{
       light: 'rgba(142, 45, 226, 0.05)',
       medium: 'rgba(142, 45, 226, 0.15)'
     }}
   />
   ```

### Animation Guidelines

- Use animations sparingly and purposefully
- Prefer transform and opacity transitions for better performance
- Keep durations between 200ms and 500ms for most UI interactions
- Use longer durations (500ms-700ms) only for special emphasis elements
- Use will-change-transform for elements that will be animated frequently